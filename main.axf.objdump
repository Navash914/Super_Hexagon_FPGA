
C:/intelFPGA_lite/18.0/ECE243_Labs/Project/main.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	d0 21 00 00 d4 21 00 00 d8 21 00 00 dc 21 00 00     .!...!...!...!..
  30:	e0 21 00 00 44 7e 00 00 f4 29 00 00 e4 21 00 00     .!..D~...)...!..

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb001f12 	bl	7d24 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00008278 	.word	0x00008278

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00053af8 	.word	0x00053af8

00000124 <__cs3_heap_start_ptr>:
     124:	00053ec0 	.word	0x00053ec0

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00053b00 	.word	0x00053b00
     170:	00053b03 	.word	0x00053b03
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	00053b00 	.word	0x00053b00
     1bc:	00053b00 	.word	0x00053b00
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00053b00 	.word	0x00053b00
     200:	00000000 	.word	0x00000000
     204:	00007ed0 	.word	0x00007ed0

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00007ed0 	.word	0x00007ed0
     250:	00053b04 	.word	0x00053b04
     254:	00008278 	.word	0x00008278
     258:	00000000 	.word	0x00000000

0000025c <onStartup>:

void ulong_to_str(char buffer[], unsigned int num, int digits);
void update();
void update_screen();

void onStartup() {
     25c:	e92d4008 	push	{r3, lr}
    config_stack_pointers();        // Set up stack pointers for IRQ mode
     260:	eb0007e0 	bl	21e8 <config_stack_pointers>
    config_gic();                   // Config GIC to enable interrupts
     264:	eb000a2a 	bl	2b14 <config_gic>

    config_key_interrupt();         // Enable key interrupts
     268:	eb0007e8 	bl	2210 <config_key_interrupt>
    config_priv_timer_interrupt();  // Load priv timer to tick at 0.01s and set up interrupts
     26c:	eb0007ed 	bl	2228 <config_priv_timer_interrupt>
    config_ps2_interrupt();         // Enable PS/2 interrupt
     270:	eb0007f3 	bl	2244 <config_ps2_interrupt>

    config_arm_interrupt();         // Enable interrupts for the ARM processor
     274:	eb0007e2 	bl	2204 <config_arm_interrupt>

    init_vga();                     // Initialize VGA buffers
     278:	eb00059d 	bl	18f4 <init_vga>
    init_globals();                 // Initialize global variables
     27c:	eb00073f 	bl	1f80 <init_globals>

    turnOffAllLED();                // Turn Off All LEDs (Used for debugging
     280:	eb000445 	bl	139c <turnOffAllLED>
    turnOnLED(0);                   // LED 0 is the RUN signal
     284:	e3a00000 	mov	r0, #0
     288:	eb000426 	bl	1328 <turnOnLED>
     28c:	e8bd8008 	pop	{r3, pc}

00000290 <init_game>:
    gameLoop();                     // Enter game loop

    while (true);
}

void init_game() {
     290:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     294:	e24dd014 	sub	sp, sp, #20
     298:	e3a05027 	mov	r5, #39	; 0x27
     29c:	e3a07001 	mov	r7, #1
     2a0:	e3a04000 	mov	r4, #0
    int i;
    int space = (ORIGIN_Y) / SIZE;  // Space between hexagons

    // Init hexagons
    for (i = 0; i < SIZE; ++i) {
        Hexagon* hex = &HEXAGONS[i];
     2a4:	e3032c6c 	movw	r2, #15468	; 0x3c6c
     2a8:	e3402005 	movt	r2, #5
     2ac:	e58d2008 	str	r2, [sp, #8]
        if (i == 0)
            missing_segment = 0;

        int y = space * (i+1);
        int height = 4;
        int speed = SETTINGS.HEXAGON_SPEED;
     2b0:	e303bb20 	movw	r11, #15136	; 0x3b20
     2b4:	e340b005 	movt	r11, #5
        short int color = rand() % 0xFFFF;
     2b8:	e308a001 	movw	r10, #32769	; 0x8001
     2bc:	e348a000 	movt	r10, #32768	; 0x8000
    int space = (ORIGIN_Y) / SIZE;  // Space between hexagons

    // Init hexagons
    for (i = 0; i < SIZE; ++i) {
        Hexagon* hex = &HEXAGONS[i];
        int missing_segment = rand() % 6;
     2c0:	e30a9aab 	movw	r9, #43691	; 0xaaab
     2c4:	e3429aaa 	movt	r9, #10922	; 0x2aaa
     2c8:	e58d900c 	str	r9, [sp, #12]
     2cc:	ea000002 	b	2dc <init_game+0x4c>
     2d0:	e2844001 	add	r4, r4, #1
     2d4:	e2877001 	add	r7, r7, #1
     2d8:	e2855027 	add	r5, r5, #39	; 0x27
    int i;
    int space = (ORIGIN_Y) / SIZE;  // Space between hexagons

    // Init hexagons
    for (i = 0; i < SIZE; ++i) {
        Hexagon* hex = &HEXAGONS[i];
     2dc:	e3a030ac 	mov	r3, #172	; 0xac
     2e0:	e59d2008 	ldr	r2, [sp, #8]
     2e4:	e0282493 	mla	r8, r3, r4, r2
        int missing_segment = rand() % 6;
     2e8:	eb001a6b 	bl	6c9c <rand>
     2ec:	e1a06000 	mov	r6, r0

        // First hexagon missing segment should coincide
        // with player to give player time to get started
        if (i == 0)
     2f0:	e3540000 	cmp	r4, #0
     2f4:	0a000035 	beq	3d0 <__cs3_region_zero_size_ram+0x10>
            missing_segment = 0;

        int y = space * (i+1);
        int height = 4;
        int speed = SETTINGS.HEXAGON_SPEED;
     2f8:	e59b9010 	ldr	r9, [r11, #16]
        short int color = rand() % 0xFFFF;
     2fc:	eb001a66 	bl	6c9c <rand>
    int space = (ORIGIN_Y) / SIZE;  // Space between hexagons

    // Init hexagons
    for (i = 0; i < SIZE; ++i) {
        Hexagon* hex = &HEXAGONS[i];
        int missing_segment = rand() % 6;
     300:	e59d300c 	ldr	r3, [sp, #12]
     304:	e0c13693 	smull	r3, r1, r3, r6
     308:	e0411fc6 	sub	r1, r1, r6, asr #31
     30c:	e0811081 	add	r1, r1, r1, lsl #1
        int y = space * (i+1);
        int height = 4;
        int speed = SETTINGS.HEXAGON_SPEED;
        short int color = rand() % 0xFFFF;

        init_hexagon(hex, missing_segment, y, height, speed, color);
     310:	e58d9000 	str	r9, [sp]
            missing_segment = 0;

        int y = space * (i+1);
        int height = 4;
        int speed = SETTINGS.HEXAGON_SPEED;
        short int color = rand() % 0xFFFF;
     314:	e0c3209a 	smull	r2, r3, r10, r0
     318:	e0833000 	add	r3, r3, r0
     31c:	e1a02fc0 	asr	r2, r0, #31
     320:	e06237c3 	rsb	r3, r2, r3, asr #15
     324:	e0800003 	add	r0, r0, r3

        init_hexagon(hex, missing_segment, y, height, speed, color);
     328:	e6bf0070 	sxth	r0, r0
     32c:	e58d0004 	str	r0, [sp, #4]
     330:	e1a00008 	mov	r0, r8
     334:	e0461081 	sub	r1, r6, r1, lsl #1
     338:	e1a02005 	mov	r2, r5
     33c:	e3a03004 	mov	r3, #4
     340:	eb00057e 	bl	1940 <init_hexagon>
void init_game() {
    int i;
    int space = (ORIGIN_Y) / SIZE;  // Space between hexagons

    // Init hexagons
    for (i = 0; i < SIZE; ++i) {
     344:	e3570002 	cmp	r7, #2
     348:	daffffe0 	ble	2d0 <init_game+0x40>

        init_hexagon(hex, missing_segment, y, height, speed, color);
    }

    // Init game time
    GAME_STATE.GAME_TIME = 0;
     34c:	e3035b3c 	movw	r5, #15164	; 0x3b3c
     350:	e3405005 	movt	r5, #5
     354:	e3a04000 	mov	r4, #0
     358:	e5854004 	str	r4, [r5, #4]
    SCREEN_ROTATION_CHANGE_TIMER = 1000;
     35c:	e3033bd8 	movw	r3, #15320	; 0x3bd8
     360:	e3403005 	movt	r3, #5
     364:	e3a02ffa 	mov	r2, #1000	; 0x3e8
     368:	e5832000 	str	r2, [r3]

    // Init player
    PLAYER.section = 0;
     36c:	e3033e70 	movw	r3, #15984	; 0x3e70
     370:	e3403005 	movt	r3, #5
     374:	e5834000 	str	r4, [r3]
    PLAYER.height = 3;
     378:	e3a02003 	mov	r2, #3
     37c:	e5832004 	str	r2, [r3, #4]
    PLAYER.color = 0xFFFF;
     380:	e3e02000 	mvn	r2, #0
     384:	e1c320b8 	strh	r2, [r3, #8]
    PLAYER.rotation = 0;
     388:	e3a01000 	mov	r1, #0
     38c:	e583100c 	str	r1, [r3, #12]
    PLAYER.speed = SETTINGS.DEFAULT_PLAYER_SPEED;
     390:	e3032b20 	movw	r2, #15136	; 0x3b20
     394:	e3402005 	movt	r2, #5
     398:	e5920018 	ldr	r0, [r2, #24]
     39c:	e5830010 	str	r0, [r3, #16]
    PLAYER.move_left = false;
     3a0:	e5c34015 	strb	r4, [r3, #21]
    PLAYER.move_right = false;
     3a4:	e5c34014 	strb	r4, [r3, #20]

    // Reset screen rotation
    GAME_STATE.SCREEN_ROTATION_ANGLE = 0;
     3a8:	e5851008 	str	r1, [r5, #8]
    SETTINGS.SCREEN_ROTATION_DIRECTION = CLOCKWISE;
     3ac:	e5c24005 	strb	r4, [r2, #5]

    // Reset Game Over and RUN status
    GAME_STATE.GAME_OVER = false;
     3b0:	e5c54001 	strb	r4, [r5, #1]
    turnOffLED(9);
     3b4:	e3a00009 	mov	r0, #9
     3b8:	eb0003e1 	bl	1344 <turnOffLED>

    GAME_STATE.RUN = true;
     3bc:	e3a03001 	mov	r3, #1
     3c0:	e5c53000 	strb	r3, [r5]
    turnOnLED(0);
     3c4:	e1a00004 	mov	r0, r4
     3c8:	eb0003d6 	bl	1328 <turnOnLED>
     3cc:	ea00000f 	b	410 <__cs3_region_zero_size_ram+0x50>
        if (i == 0)
            missing_segment = 0;

        int y = space * (i+1);
        int height = 4;
        int speed = SETTINGS.HEXAGON_SPEED;
     3d0:	e59b6010 	ldr	r6, [r11, #16]
        short int color = rand() % 0xFFFF;
     3d4:	eb001a30 	bl	6c9c <rand>

        init_hexagon(hex, missing_segment, y, height, speed, color);
     3d8:	e58d6000 	str	r6, [sp]
            missing_segment = 0;

        int y = space * (i+1);
        int height = 4;
        int speed = SETTINGS.HEXAGON_SPEED;
        short int color = rand() % 0xFFFF;
     3dc:	e0c3209a 	smull	r2, r3, r10, r0
     3e0:	e0833000 	add	r3, r3, r0
     3e4:	e1a02fc0 	asr	r2, r0, #31
     3e8:	e06237c3 	rsb	r3, r2, r3, asr #15
     3ec:	e0800003 	add	r0, r0, r3

        init_hexagon(hex, missing_segment, y, height, speed, color);
     3f0:	e6bf0070 	sxth	r0, r0
     3f4:	e58d0004 	str	r0, [sp, #4]
     3f8:	e1a00008 	mov	r0, r8
     3fc:	e3a01000 	mov	r1, #0
     400:	e1a02005 	mov	r2, r5
     404:	e3a03004 	mov	r3, #4
     408:	eb00054c 	bl	1940 <init_hexagon>
     40c:	eaffffaf 	b	2d0 <init_game+0x40>
    GAME_STATE.GAME_OVER = false;
    turnOffLED(9);

    GAME_STATE.RUN = true;
    turnOnLED(0);
}
     410:	e28dd014 	add	sp, sp, #20
     414:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000418 <drawSectionDividers>:
        pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
    }
}

// Draws the division lines between each section (For debug purposes)
void drawSectionDividers() {
     418:	e92d45f0 	push	{r4, r5, r6, r7, r8, r10, lr}
     41c:	e24dd01c 	sub	sp, sp, #28
    int i;
    for (i = 0; i < NUM_SECTIONS; ++i) {
     420:	e3a04000 	mov	r4, #0
        int y = ORIGIN_Y;
        int half_length = y / GRADIENT;
        int x0 = ORIGIN_X;
     424:	e3a0a09f 	mov	r10, #159	; 0x9f
        int x1 = x0 + half_length;
     428:	e3a080e3 	mov	r8, #227	; 0xe3
        int y0 = ORIGIN_Y;
     42c:	e3a07077 	mov	r7, #119	; 0x77
        int y1 = ORIGIN_Y - y;
     430:	e1a06004 	mov	r6, r4
        rotate(&x0, &y0, i);
        rotate(&x1, &y1, i);
        rotate2(&x0, &y0, GAME_STATE.SCREEN_ROTATION_ANGLE);
     434:	e3035b3c 	movw	r5, #15164	; 0x3b3c
     438:	e3405005 	movt	r5, #5
void drawSectionDividers() {
    int i;
    for (i = 0; i < NUM_SECTIONS; ++i) {
        int y = ORIGIN_Y;
        int half_length = y / GRADIENT;
        int x0 = ORIGIN_X;
     43c:	e58da008 	str	r10, [sp, #8]
        int x1 = x0 + half_length;
     440:	e58d800c 	str	r8, [sp, #12]
        int y0 = ORIGIN_Y;
     444:	e58d7010 	str	r7, [sp, #16]
        int y1 = ORIGIN_Y - y;
     448:	e58d6014 	str	r6, [sp, #20]
        rotate(&x0, &y0, i);
     44c:	e28d0008 	add	r0, sp, #8
     450:	e28d1010 	add	r1, sp, #16
     454:	e1a02004 	mov	r2, r4
     458:	eb00032d 	bl	1114 <rotate>
        rotate(&x1, &y1, i);
     45c:	e28d000c 	add	r0, sp, #12
     460:	e28d1014 	add	r1, sp, #20
     464:	e1a02004 	mov	r2, r4
     468:	eb000329 	bl	1114 <rotate>
        rotate2(&x0, &y0, GAME_STATE.SCREEN_ROTATION_ANGLE);
     46c:	e28d0008 	add	r0, sp, #8
     470:	e28d1010 	add	r1, sp, #16
     474:	e5952008 	ldr	r2, [r5, #8]
     478:	eb000362 	bl	1208 <rotate2>
        rotate2(&x1, &y1, GAME_STATE.SCREEN_ROTATION_ANGLE);
     47c:	e28d000c 	add	r0, sp, #12
     480:	e28d1014 	add	r1, sp, #20
     484:	e5952008 	ldr	r2, [r5, #8]
     488:	eb00035e 	bl	1208 <rotate2>
        draw_line(x0, y0, x1, y1, 0xFFFF);
     48c:	e3e03000 	mvn	r3, #0
     490:	e58d3000 	str	r3, [sp]
     494:	e59d0008 	ldr	r0, [sp, #8]
     498:	e59d1010 	ldr	r1, [sp, #16]
     49c:	e59d200c 	ldr	r2, [sp, #12]
     4a0:	e59d3014 	ldr	r3, [sp, #20]
     4a4:	eb0003d3 	bl	13f8 <draw_line>
}

// Draws the division lines between each section (For debug purposes)
void drawSectionDividers() {
    int i;
    for (i = 0; i < NUM_SECTIONS; ++i) {
     4a8:	e2844001 	add	r4, r4, #1
     4ac:	e3540006 	cmp	r4, #6
     4b0:	1affffe1 	bne	43c <drawSectionDividers+0x24>
        rotate(&x1, &y1, i);
        rotate2(&x0, &y0, GAME_STATE.SCREEN_ROTATION_ANGLE);
        rotate2(&x1, &y1, GAME_STATE.SCREEN_ROTATION_ANGLE);
        draw_line(x0, y0, x1, y1, 0xFFFF);
    }
}
     4b4:	e28dd01c 	add	sp, sp, #28
     4b8:	e8bd85f0 	pop	{r4, r5, r6, r7, r8, r10, pc}

000004bc <ulong_to_str>:

// Converts an unsigned long to a string and stores it in buffer
void ulong_to_str(char buffer[], unsigned int num, int digits) {
     4bc:	e92d00f0 	push	{r4, r5, r6, r7}
    char *s = buffer + digits;
     4c0:	e0800002 	add	r0, r0, r2
    if (SETTINGS.TIME_MODE == MILLISECONDS && digits > 2)
     4c4:	e3033b20 	movw	r3, #15136	; 0x3b20
     4c8:	e3403005 	movt	r3, #5
     4cc:	e5d33003 	ldrb	r3, [r3, #3]
     4d0:	e3530001 	cmp	r3, #1
     4d4:	1a000001 	bne	4e0 <ulong_to_str+0x24>
     4d8:	e3520002 	cmp	r2, #2
        s++;    // Space for decimal point
     4dc:	c2800001 	addgt	r0, r0, #1
    *(s--) = '\0';
     4e0:	e3a03000 	mov	r3, #0
     4e4:	e5c03000 	strb	r3, [r0]
    int count = 0;

    while (num > 0) {
     4e8:	e1510003 	cmp	r1, r3
     4ec:	0a000019 	beq	558 <ulong_to_str+0x9c>
        draw_line(x0, y0, x1, y1, 0xFFFF);
    }
}

// Converts an unsigned long to a string and stores it in buffer
void ulong_to_str(char buffer[], unsigned int num, int digits) {
     4f0:	e2402002 	sub	r2, r0, #2
    char *s = buffer + digits;
    if (SETTINGS.TIME_MODE == MILLISECONDS && digits > 2)
        s++;    // Space for decimal point
    *(s--) = '\0';
    int count = 0;
     4f4:	e1a00003 	mov	r0, r3

    while (num > 0) {
        if (SETTINGS.TIME_MODE == MILLISECONDS && count == 2) {
     4f8:	e3034b20 	movw	r4, #15136	; 0x3b20
     4fc:	e3404005 	movt	r4, #5
            // Add decimal point
            *(s--) = '.';
            count++;
            continue;
        }
        int n = num % 10;
     500:	e30c5ccd 	movw	r5, #52429	; 0xcccd
     504:	e34c5ccc 	movt	r5, #52428	; 0xcccc
    int count = 0;

    while (num > 0) {
        if (SETTINGS.TIME_MODE == MILLISECONDS && count == 2) {
            // Add decimal point
            *(s--) = '.';
     508:	e3a0702e 	mov	r7, #46	; 0x2e
            count++;
     50c:	e3a06003 	mov	r6, #3
        s++;    // Space for decimal point
    *(s--) = '\0';
    int count = 0;

    while (num > 0) {
        if (SETTINGS.TIME_MODE == MILLISECONDS && count == 2) {
     510:	e5d43003 	ldrb	r3, [r4, #3]
     514:	e3530001 	cmp	r3, #1
     518:	1a000003 	bne	52c <ulong_to_str+0x70>
     51c:	e3500002 	cmp	r0, #2
            // Add decimal point
            *(s--) = '.';
     520:	05c27001 	strbeq	r7, [r2, #1]
            count++;
     524:	01a00006 	moveq	r0, r6
        s++;    // Space for decimal point
    *(s--) = '\0';
    int count = 0;

    while (num > 0) {
        if (SETTINGS.TIME_MODE == MILLISECONDS && count == 2) {
     528:	0a000007 	beq	54c <ulong_to_str+0x90>
            // Add decimal point
            *(s--) = '.';
            count++;
            continue;
        }
        int n = num % 10;
     52c:	e083c195 	umull	r12, r3, r5, r1
     530:	e1a031a3 	lsr	r3, r3, #3
     534:	e083c103 	add	r12, r3, r3, lsl #2
     538:	e041108c 	sub	r1, r1, r12, lsl #1
        char c = n + '0';
     53c:	e2811030 	add	r1, r1, #48	; 0x30
        *(s--) = c;
     540:	e5c21001 	strb	r1, [r2, #1]
        num /= 10;
     544:	e1a01003 	mov	r1, r3
        count++;
     548:	e2800001 	add	r0, r0, #1
     54c:	e2422001 	sub	r2, r2, #1
    if (SETTINGS.TIME_MODE == MILLISECONDS && digits > 2)
        s++;    // Space for decimal point
    *(s--) = '\0';
    int count = 0;

    while (num > 0) {
     550:	e3510000 	cmp	r1, #0
     554:	1affffed 	bne	510 <ulong_to_str+0x54>
        char c = n + '0';
        *(s--) = c;
        num /= 10;
        count++;
    }
}
     558:	e8bd00f0 	pop	{r4, r5, r6, r7}
     55c:	e12fff1e 	bx	lr

00000560 <draw_background>:

void draw_background() {
     560:	e92d4030 	push	{r4, r5, lr}
     564:	e24dd00c 	sub	sp, sp, #12
    int i;
    for (i = 0; i < NUM_SECTIONS; ++i) {
     568:	e3a04000 	mov	r4, #0
        draw_segment(BACKGROUND[i]);
     56c:	e3035bdc 	movw	r5, #15324	; 0x3bdc
     570:	e3405005 	movt	r5, #5
     574:	e0843084 	add	r3, r4, r4, lsl #1
     578:	e0853183 	add	r3, r5, r3, lsl #3
     57c:	e2832010 	add	r2, r3, #16
     580:	e8920003 	ldm	r2, {r0, r1}
     584:	e88d0003 	stm	sp, {r0, r1}
     588:	e893000f 	ldm	r3, {r0, r1, r2, r3}
     58c:	eb00023c 	bl	e84 <draw_segment>
    }
}

void draw_background() {
    int i;
    for (i = 0; i < NUM_SECTIONS; ++i) {
     590:	e2844001 	add	r4, r4, #1
     594:	e3540006 	cmp	r4, #6
     598:	1afffff5 	bne	574 <draw_background+0x14>
        draw_segment(BACKGROUND[i]);
    }
}
     59c:	e28dd00c 	add	sp, sp, #12
     5a0:	e8bd8030 	pop	{r4, r5, pc}

000005a4 <draw_time>:

void draw_time() {
     5a4:	e92d4030 	push	{r4, r5, lr}
     5a8:	e24dd014 	sub	sp, sp, #20
    clear_char_buffer();        // Clear previous draw
     5ac:	eb0003e7 	bl	1550 <clear_char_buffer>

    // Get time in ms or s based on setting
    unsigned int time = GAME_STATE.GAME_TIME;
     5b0:	e3033b3c 	movw	r3, #15164	; 0x3b3c
     5b4:	e3403005 	movt	r3, #5
     5b8:	e5934004 	ldr	r4, [r3, #4]
    if (SETTINGS.TIME_MODE == SECONDS)
     5bc:	e3033b20 	movw	r3, #15136	; 0x3b20
     5c0:	e3403005 	movt	r3, #5
     5c4:	e5d33003 	ldrb	r3, [r3, #3]
     5c8:	e3530000 	cmp	r3, #0
     5cc:	1a000059 	bne	738 <draw_time+0x194>
        time /= 100;
     5d0:	e308351f 	movw	r3, #34079	; 0x851f
     5d4:	e34531eb 	movt	r3, #20971	; 0x51eb
     5d8:	e0842493 	umull	r2, r4, r3, r4

    char text[10];

    char *s = text;
    if (time == 0) {
     5dc:	e1b042a4 	lsrs	r4, r4, #5
     5e0:	1a000011 	bne	62c <draw_time+0x88>
        if (SETTINGS.TIME_MODE == SECONDS) {
            *(s++) = '0';
     5e4:	e3a03030 	mov	r3, #48	; 0x30
     5e8:	e5cd3004 	strb	r3, [sp, #4]
            *(s++) = '0';
     5ec:	e5cd3005 	strb	r3, [sp, #5]
            *s = '\0';
     5f0:	e3a03000 	mov	r3, #0
     5f4:	e5cd3006 	strb	r3, [sp, #6]
     5f8:	ea000047 	b	71c <draw_time+0x178>
        } else if (SETTINGS.TIME_MODE == MILLISECONDS) {
     5fc:	e3530001 	cmp	r3, #1
     600:	1a000045 	bne	71c <draw_time+0x178>
            *(s++) = '0';
     604:	e3a03030 	mov	r3, #48	; 0x30
     608:	e5cd3004 	strb	r3, [sp, #4]
            *(s++) = '0';
     60c:	e5cd3005 	strb	r3, [sp, #5]
            *(s++) = '.';
     610:	e3a0202e 	mov	r2, #46	; 0x2e
     614:	e5cd2006 	strb	r2, [sp, #6]
            *(s++) = '0';
     618:	e5cd3007 	strb	r3, [sp, #7]
            *(s++) = '0';
     61c:	e5cd3008 	strb	r3, [sp, #8]
            *s = '\0';
     620:	e3a03000 	mov	r3, #0
     624:	e5cd3009 	strb	r3, [sp, #9]
     628:	ea00003b 	b	71c <draw_time+0x178>
        }
    } else {
        int n = 1 + log10(time);    // Number of digits
     62c:	e1a00004 	mov	r0, r4
     630:	eb00153a 	bl	5b20 <__aeabi_ui2d>
     634:	eb000b18 	bl	329c <log10>
     638:	e3a02000 	mov	r2, #0
     63c:	e3a03000 	mov	r3, #0
     640:	e3433ff0 	movt	r3, #16368	; 0x3ff0
     644:	eb001471 	bl	5810 <__adddf3>
     648:	eb0016ec 	bl	6200 <__aeabi_d2iz>
     64c:	e1a05000 	mov	r5, r0
        ulong_to_str(text, time, n);    // Convert time to string
     650:	e28d0004 	add	r0, sp, #4
     654:	e1a01004 	mov	r1, r4
     658:	e1a02005 	mov	r2, r5
     65c:	ebffff96 	bl	4bc <ulong_to_str>

        // Handle some edge cases for the string
        if (SETTINGS.TIME_MODE == SECONDS) {
     660:	e3033b20 	movw	r3, #15136	; 0x3b20
     664:	e3403005 	movt	r3, #5
     668:	e5d33003 	ldrb	r3, [r3, #3]
     66c:	e3530000 	cmp	r3, #0
     670:	1a000007 	bne	694 <draw_time+0xf0>
            if (n < 2) {
     674:	e3550001 	cmp	r5, #1
     678:	ca000027 	bgt	71c <draw_time+0x178>
                // Number is one digit
                // Add '0' at the beginning to make number two digits
                *(s + 2) = '\0';
     67c:	e5cd3006 	strb	r3, [sp, #6]
                *(s + 1) = *s;
     680:	e5dd3004 	ldrb	r3, [sp, #4]
     684:	e5cd3005 	strb	r3, [sp, #5]
                *s = '0';
     688:	e3a03030 	mov	r3, #48	; 0x30
     68c:	e5cd3004 	strb	r3, [sp, #4]
     690:	ea000021 	b	71c <draw_time+0x178>
            }
        } else if (SETTINGS.TIME_MODE == MILLISECONDS) {
     694:	e3530001 	cmp	r3, #1
     698:	1a00001f 	bne	71c <draw_time+0x178>
            if (n == 3) {
     69c:	e3550003 	cmp	r5, #3
     6a0:	1a00000c 	bne	6d8 <draw_time+0x134>
                // Seconds is one digit
                // Add '0' at the beginning to make seconds two digits
                *(s + 5) = '\0';
     6a4:	e3a03000 	mov	r3, #0
     6a8:	e5cd3009 	strb	r3, [sp, #9]
                int i;
                for (i = 4; i > 0; --i)
                    *(s + i) = *(s + i - 1);
     6ac:	e5dd3007 	ldrb	r3, [sp, #7]
     6b0:	e5cd3008 	strb	r3, [sp, #8]
     6b4:	e5dd3006 	ldrb	r3, [sp, #6]
     6b8:	e5cd3007 	strb	r3, [sp, #7]
     6bc:	e5dd3005 	ldrb	r3, [sp, #5]
     6c0:	e5cd3006 	strb	r3, [sp, #6]
     6c4:	e5dd3004 	ldrb	r3, [sp, #4]
     6c8:	e5cd3005 	strb	r3, [sp, #5]
                *s = '0';
     6cc:	e3a03030 	mov	r3, #48	; 0x30
     6d0:	e5cd3004 	strb	r3, [sp, #4]
     6d4:	ea000010 	b	71c <draw_time+0x178>
            } else if (n <= 2) {
     6d8:	e3550002 	cmp	r5, #2
     6dc:	ca00000e 	bgt	71c <draw_time+0x178>
                // Number is less than a second
                // Add a '00.' before number to look cleaner
                *(s + 5) = '\0';
     6e0:	e3a03000 	mov	r3, #0
     6e4:	e5cd3009 	strb	r3, [sp, #9]
                *(s + 4) = (n <= 1) ? *s : *(s + 1);
     6e8:	e3550001 	cmp	r5, #1
     6ec:	d5dd3004 	ldrble	r3, [sp, #4]
     6f0:	d5cd3008 	strble	r3, [sp, #8]
                *(s + 3) = (n <= 1) ? '0' : *s;
     6f4:	d3a03030 	movle	r3, #48	; 0x30
                *s = '0';
            } else if (n <= 2) {
                // Number is less than a second
                // Add a '00.' before number to look cleaner
                *(s + 5) = '\0';
                *(s + 4) = (n <= 1) ? *s : *(s + 1);
     6f8:	c5dd3005 	ldrbgt	r3, [sp, #5]
     6fc:	c5cd3008 	strbgt	r3, [sp, #8]
                *(s + 3) = (n <= 1) ? '0' : *s;
     700:	c5dd3004 	ldrbgt	r3, [sp, #4]
     704:	e5cd3007 	strb	r3, [sp, #7]
                *(s + 2) = '.';
     708:	e3a0302e 	mov	r3, #46	; 0x2e
     70c:	e5cd3006 	strb	r3, [sp, #6]
                *(s + 1) = '0';
     710:	e3a03030 	mov	r3, #48	; 0x30
     714:	e5cd3005 	strb	r3, [sp, #5]
                *s = '0';
     718:	e5cd3004 	strb	r3, [sp, #4]
            }
        }
    }

    // Draw the text at the top right corner
    int x = 79 - strlen(text);
     71c:	e28d0004 	add	r0, sp, #4
     720:	eb001974 	bl	6cf8 <strlen>
    int y = 1;

    plot_text(x, y, text);
     724:	e260004f 	rsb	r0, r0, #79	; 0x4f
     728:	e3a01001 	mov	r1, #1
     72c:	e28d2004 	add	r2, sp, #4
     730:	eb000396 	bl	1590 <plot_text>
     734:	ea000002 	b	744 <draw_time+0x1a0>
        time /= 100;

    char text[10];

    char *s = text;
    if (time == 0) {
     738:	e3540000 	cmp	r4, #0
     73c:	0affffae 	beq	5fc <draw_time+0x58>
     740:	eaffffb9 	b	62c <draw_time+0x88>
    // Draw the text at the top right corner
    int x = 79 - strlen(text);
    int y = 1;

    plot_text(x, y, text);
}
     744:	e28dd014 	add	sp, sp, #20
     748:	e8bd8030 	pop	{r4, r5, pc}

0000074c <update_screen>:
    update_settings();      // Update settings changes
    update_game_state();    // Update game state
    updatePlayer(&PLAYER);  // Update player position
}

void update_screen() {
     74c:	e92d4038 	push	{r3, r4, r5, lr}
    if (!SETTINGS.SCREEN_ROTATE)
     750:	e3033b20 	movw	r3, #15136	; 0x3b20
     754:	e3403005 	movt	r3, #5
     758:	e5d33004 	ldrb	r3, [r3, #4]
     75c:	e3530000 	cmp	r3, #0
     760:	08bd8038 	popeq	{r3, r4, r5, pc}
        return;

    // Rotate screen
    float dr = (SETTINGS.SCREEN_ROTATION_DIRECTION == CLOCKWISE ? 1 : -1) * SETTINGS.SCREEN_ROTATION_SPEED;
     764:	e3033b20 	movw	r3, #15136	; 0x3b20
     768:	e3403005 	movt	r3, #5
     76c:	e5d33005 	ldrb	r3, [r3, #5]
     770:	e3530000 	cmp	r3, #0
     774:	03a005fe 	moveq	r0, #1065353216	; 0x3f800000
     778:	13a00000 	movne	r0, #0
     77c:	134b0f80 	movtne	r0, #49024	; 0xbf80
    GAME_STATE.SCREEN_ROTATION_ANGLE += dr;
     780:	e3034b3c 	movw	r4, #15164	; 0x3b3c
     784:	e3404005 	movt	r4, #5
void update_screen() {
    if (!SETTINGS.SCREEN_ROTATE)
        return;

    // Rotate screen
    float dr = (SETTINGS.SCREEN_ROTATION_DIRECTION == CLOCKWISE ? 1 : -1) * SETTINGS.SCREEN_ROTATION_SPEED;
     788:	e3033b20 	movw	r3, #15136	; 0x3b20
     78c:	e3403005 	movt	r3, #5
     790:	e5931008 	ldr	r1, [r3, #8]
     794:	eb001783 	bl	65a8 <__aeabi_fmul>
    GAME_STATE.SCREEN_ROTATION_ANGLE += dr;
     798:	e5941008 	ldr	r1, [r4, #8]
     79c:	eb0016d9 	bl	6308 <__addsf3>
     7a0:	e1a05000 	mov	r5, r0

    // Clamp rotation between 0 to 360 degrees
    if (GAME_STATE.SCREEN_ROTATION_ANGLE >= 360)
     7a4:	e3a01000 	mov	r1, #0
     7a8:	e34413b4 	movt	r1, #17332	; 0x43b4
     7ac:	eb001874 	bl	6984 <__aeabi_fcmpge>
     7b0:	e3500000 	cmp	r0, #0
    if (!SETTINGS.SCREEN_ROTATE)
        return;

    // Rotate screen
    float dr = (SETTINGS.SCREEN_ROTATION_DIRECTION == CLOCKWISE ? 1 : -1) * SETTINGS.SCREEN_ROTATION_SPEED;
    GAME_STATE.SCREEN_ROTATION_ANGLE += dr;
     7b4:	01a03004 	moveq	r3, r4
     7b8:	05835008 	streq	r5, [r3, #8]

    // Clamp rotation between 0 to 360 degrees
    if (GAME_STATE.SCREEN_ROTATION_ANGLE >= 360)
     7bc:	0a000006 	beq	7dc <update_screen+0x90>
        GAME_STATE.SCREEN_ROTATION_ANGLE -= 360;
     7c0:	e3034b3c 	movw	r4, #15164	; 0x3b3c
     7c4:	e3404005 	movt	r4, #5
     7c8:	e1a00005 	mov	r0, r5
     7cc:	e3a01000 	mov	r1, #0
     7d0:	e34413b4 	movt	r1, #17332	; 0x43b4
     7d4:	eb0016ca 	bl	6304 <__aeabi_fsub>
     7d8:	e5840008 	str	r0, [r4, #8]
    if (GAME_STATE.SCREEN_ROTATION_ANGLE < 0)
     7dc:	e3033b3c 	movw	r3, #15164	; 0x3b3c
     7e0:	e3403005 	movt	r3, #5
     7e4:	e5934008 	ldr	r4, [r3, #8]
     7e8:	e1a00004 	mov	r0, r4
     7ec:	e3a01000 	mov	r1, #0
     7f0:	eb001857 	bl	6954 <__aeabi_fcmplt>
     7f4:	e3500000 	cmp	r0, #0
     7f8:	08bd8038 	popeq	{r3, r4, r5, pc}
        GAME_STATE.SCREEN_ROTATION_ANGLE += 360;
     7fc:	e3035b3c 	movw	r5, #15164	; 0x3b3c
     800:	e3405005 	movt	r5, #5
     804:	e1a00004 	mov	r0, r4
     808:	e3a01000 	mov	r1, #0
     80c:	e34413b4 	movt	r1, #17332	; 0x43b4
     810:	eb0016bc 	bl	6308 <__addsf3>
     814:	e5850008 	str	r0, [r5, #8]
     818:	e8bd8038 	pop	{r3, r4, r5, pc}

0000081c <update>:

    plot_text(x, y, text);
}

// Perform necessary updates every frame
void update() {
     81c:	e92d4008 	push	{r3, lr}
    update_screen();        // Update screen rotation
     820:	ebffffc9 	bl	74c <update_screen>
    update_settings();      // Update settings changes
     824:	eb000541 	bl	1d30 <update_settings>
    update_game_state();    // Update game state
     828:	eb00056c 	bl	1de0 <update_game_state>
    updatePlayer(&PLAYER);  // Update player position
     82c:	e3030e70 	movw	r0, #15984	; 0x3e70
     830:	e3400005 	movt	r0, #5
     834:	eb00090c 	bl	2c6c <updatePlayer>
     838:	e8bd8008 	pop	{r3, pc}

0000083c <draw_title>:
    if (GAME_STATE.SCREEN_ROTATION_ANGLE < 0)
        GAME_STATE.SCREEN_ROTATION_ANGLE += 360;
}

// Draw title screen
void draw_title() {
     83c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     840:	e24dd00c 	sub	sp, sp, #12
    clear_screen();
     844:	eb00032d 	bl	1500 <clear_screen>
    clear_char_buffer();
     848:	eb000340 	bl	1550 <clear_char_buffer>
     84c:	e3a09000 	mov	r9, #0

    int x, y;
    for (y = 0; y < 240; ++y) {
     850:	e1a06009 	mov	r6, r9
    if (GAME_STATE.SCREEN_ROTATION_ANGLE < 0)
        GAME_STATE.SCREEN_ROTATION_ANGLE += 360;
}

// Draw title screen
void draw_title() {
     854:	e1a0b009 	mov	r11, r9
    int x, y;
    for (y = 0; y < 240; ++y) {
        for (x = 0; x < 320; ++x) {
            int index = 320 * y + x;
            // Get color based on whether screen is start or options
            short int color = (TITLE_INDEX == 0) ? TITLE_START[index] : TITLE_OPTIONS[index];
     858:	e3037bc8 	movw	r7, #15304	; 0x3bc8
     85c:	e3407005 	movt	r7, #5
    if (GAME_STATE.SCREEN_ROTATION_ANGLE < 0)
        GAME_STATE.SCREEN_ROTATION_ANGLE += 360;
}

// Draw title screen
void draw_title() {
     860:	e30832b4 	movw	r3, #33460	; 0x82b4
     864:	e3403000 	movt	r3, #0
     868:	e58d3000 	str	r3, [sp]
     86c:	e30d3ab4 	movw	r3, #55988	; 0xdab4
     870:	e3403002 	movt	r3, #2
     874:	e58d3004 	str	r3, [sp, #4]
     878:	ea00000f 	b	8bc <draw_title+0x80>
    int x, y;
    for (y = 0; y < 240; ++y) {
        for (x = 0; x < 320; ++x) {
            int index = 320 * y + x;
            // Get color based on whether screen is start or options
            short int color = (TITLE_INDEX == 0) ? TITLE_START[index] : TITLE_OPTIONS[index];
     87c:	e5973000 	ldr	r3, [r7]
     880:	e3530000 	cmp	r3, #0
     884:	019820b5 	ldrheq	r2, [r8, r5]
     888:	119a20b5 	ldrhne	r2, [r10, r5]
            plot_pixel(x, y, color);
     88c:	e1a00004 	mov	r0, r4
     890:	e1a01006 	mov	r1, r6
     894:	e6bf2072 	sxth	r2, r2
     898:	eb0002c8 	bl	13c0 <plot_pixel>
    clear_screen();
    clear_char_buffer();

    int x, y;
    for (y = 0; y < 240; ++y) {
        for (x = 0; x < 320; ++x) {
     89c:	e2844001 	add	r4, r4, #1
     8a0:	e2855002 	add	r5, r5, #2
     8a4:	e3540d05 	cmp	r4, #320	; 0x140
     8a8:	1afffff3 	bne	87c <draw_title+0x40>
void draw_title() {
    clear_screen();
    clear_char_buffer();

    int x, y;
    for (y = 0; y < 240; ++y) {
     8ac:	e2866001 	add	r6, r6, #1
     8b0:	e2899d0a 	add	r9, r9, #640	; 0x280
     8b4:	e35600f0 	cmp	r6, #240	; 0xf0
     8b8:	0a000006 	beq	8d8 <draw_title+0x9c>
    if (GAME_STATE.SCREEN_ROTATION_ANGLE < 0)
        GAME_STATE.SCREEN_ROTATION_ANGLE += 360;
}

// Draw title screen
void draw_title() {
     8bc:	e1a0500b 	mov	r5, r11
     8c0:	e1a0400b 	mov	r4, r11
     8c4:	e59d3000 	ldr	r3, [sp]
     8c8:	e089a003 	add	r10, r9, r3
     8cc:	e59d3004 	ldr	r3, [sp, #4]
     8d0:	e0898003 	add	r8, r9, r3
     8d4:	eaffffe8 	b	87c <draw_title+0x40>
            short int color = (TITLE_INDEX == 0) ? TITLE_START[index] : TITLE_OPTIONS[index];
            plot_pixel(x, y, color);
        }
    }

    register int index = TITLE_INDEX;
     8d8:	e3033bc8 	movw	r3, #15304	; 0x3bc8
     8dc:	e3403005 	movt	r3, #5
     8e0:	e5934000 	ldr	r4, [r3]
    wait_for_vsync();
     8e4:	eb0003f8 	bl	18cc <wait_for_vsync>
    pixel_buffer_start = *(pixel_ctrl_ptr + 1);
     8e8:	e3083280 	movw	r3, #33408	; 0x8280
     8ec:	e3403000 	movt	r3, #0
     8f0:	e5933000 	ldr	r3, [r3]
     8f4:	e5932004 	ldr	r2, [r3, #4]
     8f8:	e3033b1c 	movw	r3, #15132	; 0x3b1c
     8fc:	e3403005 	movt	r3, #5
     900:	e5832000 	str	r2, [r3]
    while (GAME_STATE.MODE == TITLE && TITLE_INDEX == index);
     904:	e3032b3c 	movw	r2, #15164	; 0x3b3c
     908:	e3402005 	movt	r2, #5
     90c:	e3033bc8 	movw	r3, #15304	; 0x3bc8
     910:	e3403005 	movt	r3, #5
     914:	e5d2100c 	ldrb	r1, [r2, #12]
     918:	e3510000 	cmp	r1, #0
     91c:	1a000002 	bne	92c <draw_title+0xf0>
     920:	e5931000 	ldr	r1, [r3]
     924:	e1510004 	cmp	r1, r4
     928:	0afffff9 	beq	914 <draw_title+0xd8>
}
     92c:	e28dd00c 	add	sp, sp, #12
     930:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000934 <draw_options>:

// Loop in options screen
void draw_options() {
     934:	e92d45f0 	push	{r4, r5, r6, r7, r8, r10, lr}
     938:	e24dd054 	sub	sp, sp, #84	; 0x54
    // Draw background for options
    int x0 = 104, y0 = 120;
    int w = 116, h = 88;
    int x1 = x0 + w, y1 = y0 + h;
    int x, y;
    for (y = y0; y < y1; ++y) {
     93c:	e3a04078 	mov	r4, #120	; 0x78
        draw_line(x0, y, x1, y, 0x0);
     940:	e3a07000 	mov	r7, #0
     944:	e3a06068 	mov	r6, #104	; 0x68
     948:	e3a050dc 	mov	r5, #220	; 0xdc
     94c:	e58d7000 	str	r7, [sp]
     950:	e1a00006 	mov	r0, r6
     954:	e1a01004 	mov	r1, r4
     958:	e1a02005 	mov	r2, r5
     95c:	e1a03004 	mov	r3, r4
     960:	eb0002a4 	bl	13f8 <draw_line>
    // Draw background for options
    int x0 = 104, y0 = 120;
    int w = 116, h = 88;
    int x1 = x0 + w, y1 = y0 + h;
    int x, y;
    for (y = y0; y < y1; ++y) {
     964:	e2844001 	add	r4, r4, #1
     968:	e35400d0 	cmp	r4, #208	; 0xd0
     96c:	1afffff6 	bne	94c <draw_options+0x18>
        draw_line(x0, y, x1, y, 0x0);
    }

    wait_for_vsync();
     970:	eb0003d5 	bl	18cc <wait_for_vsync>
    pixel_buffer_start = *(pixel_ctrl_ptr + 1);
     974:	e3083280 	movw	r3, #33408	; 0x8280
     978:	e3403000 	movt	r3, #0
     97c:	e5933000 	ldr	r3, [r3]
     980:	e5932004 	ldr	r2, [r3, #4]
     984:	e3033b1c 	movw	r3, #15132	; 0x3b1c
     988:	e3403005 	movt	r3, #5
     98c:	e5832000 	str	r2, [r3]

    int x_left = 1 + x0 / 4, y_top = 1 + y0 / 4;
    int x_right = (x1 / 4), y_bottom = (y1 / 4);

    // Loop while game state is options
    while (GAME_STATE.MODE == OPTIONS) {
     990:	e3038b3c 	movw	r8, #15164	; 0x3b3c
     994:	e3408005 	movt	r8, #5
        if (!OPTIONS_UPDATE)
     998:	e3036bcc 	movw	r6, #15308	; 0x3bcc
     99c:	e3406005 	movt	r6, #5
        x = x_left, y = y_top;

        y++; // Empty Line

        // Input Type
        char * input_type_text = OPTIONS_INDEX == 0 ? ">Input Type\0" : "Input Type\0";
     9a0:	e3037bd4 	movw	r7, #15316	; 0x3bd4
     9a4:	e3407005 	movt	r7, #5
        plot_text(x, y, input_type_text);
        char *input_type = SETTINGS.DIFFICULTY == DEBUG ? "(SW[6])" : SETTINGS.INPUT_TYPE == KEYS ? "Keys\0" : "Keyboard\0";
     9a8:	e3035b20 	movw	r5, #15136	; 0x3b20
     9ac:	e3405005 	movt	r5, #5
        y += 2;

        y++; // Empty Line

        // Difficulty Set Options
        char text[] = "** Difficulty Set Options **\0";
     9b0:	e3074ed8 	movw	r4, #32472	; 0x7ed8
     9b4:	e3404000 	movt	r4, #0

    int x_left = 1 + x0 / 4, y_top = 1 + y0 / 4;
    int x_right = (x1 / 4), y_bottom = (y1 / 4);

    // Loop while game state is options
    while (GAME_STATE.MODE == OPTIONS) {
     9b8:	ea0000a3 	b	c4c <draw_options+0x318>
        if (!OPTIONS_UPDATE)
     9bc:	e5d63000 	ldrb	r3, [r6]
     9c0:	e3530000 	cmp	r3, #0
     9c4:	0a0000a0 	beq	c4c <draw_options+0x318>
            continue;   // No need to update anything
        OPTIONS_UPDATE = false;
     9c8:	e3a03000 	mov	r3, #0
     9cc:	e5c63000 	strb	r3, [r6]

        clear_char_buffer();    // Clear previous drawing
     9d0:	eb0002de 	bl	1550 <clear_char_buffer>
        x = x_left, y = y_top;

        y++; // Empty Line

        // Input Type
        char * input_type_text = OPTIONS_INDEX == 0 ? ">Input Type\0" : "Input Type\0";
     9d4:	e5973000 	ldr	r3, [r7]
     9d8:	e3530000 	cmp	r3, #0
     9dc:	01a02004 	moveq	r2, r4
     9e0:	12842010 	addne	r2, r4, #16
        plot_text(x, y, input_type_text);
     9e4:	e3a0001b 	mov	r0, #27
     9e8:	e3a01020 	mov	r1, #32
     9ec:	eb0002e7 	bl	1590 <plot_text>
        char *input_type = SETTINGS.DIFFICULTY == DEBUG ? "(SW[6])" : SETTINGS.INPUT_TYPE == KEYS ? "Keys\0" : "Keyboard\0";
     9f0:	e5d53002 	ldrb	r3, [r5, #2]
     9f4:	e3530000 	cmp	r3, #0
     9f8:	0308a020 	movweq	r10, #32800	; 0x8020
     9fc:	0340a000 	movteq	r10, #0
     a00:	0a000005 	beq	a1c <draw_options+0xe8>
     a04:	e5d53015 	ldrb	r3, [r5, #21]
     a08:	e3530000 	cmp	r3, #0
     a0c:	0284a028 	addeq	r10, r4, #40	; 0x28
     a10:	0a000001 	beq	a1c <draw_options+0xe8>
     a14:	eaffffff 	b	a18 <draw_options+0xe4>
     a18:	e284a01c 	add	r10, r4, #28
        x = x_right - strlen(input_type);
     a1c:	e1a0000a 	mov	r0, r10
     a20:	eb0018b4 	bl	6cf8 <strlen>
        plot_text(x, y, input_type);
     a24:	e2600037 	rsb	r0, r0, #55	; 0x37
     a28:	e3a01020 	mov	r1, #32
     a2c:	e1a0200a 	mov	r2, r10
     a30:	eb0002d6 	bl	1590 <plot_text>
        x = x_left;
        y += 2;

        // Control Type
        char * control_scheme_text = OPTIONS_INDEX == 1 ? ">Control Type\0" : "Control Type\0";
     a34:	e5973000 	ldr	r3, [r7]
     a38:	e3530001 	cmp	r3, #1
     a3c:	02842030 	addeq	r2, r4, #48	; 0x30
     a40:	12842040 	addne	r2, r4, #64	; 0x40
        plot_text(x, y, control_scheme_text);
     a44:	e3a0001b 	mov	r0, #27
     a48:	e3a01022 	mov	r1, #34	; 0x22
     a4c:	eb0002cf 	bl	1590 <plot_text>
        char *control_scheme = SETTINGS.DIFFICULTY == DEBUG ? "(SW[3])" : SETTINGS.CONTROL_SCHEME == DISCRETE ? "Discrete\0" : "Continuous\0";
     a50:	e5d53002 	ldrb	r3, [r5, #2]
     a54:	e3530000 	cmp	r3, #0
     a58:	0308a028 	movweq	r10, #32808	; 0x8028
     a5c:	0340a000 	movteq	r10, #0
     a60:	0a000005 	beq	a7c <draw_options+0x148>
     a64:	e5d53016 	ldrb	r3, [r5, #22]
     a68:	e3530000 	cmp	r3, #0
     a6c:	0284a05c 	addeq	r10, r4, #92	; 0x5c
     a70:	0a000001 	beq	a7c <draw_options+0x148>
     a74:	eaffffff 	b	a78 <draw_options+0x144>
     a78:	e284a050 	add	r10, r4, #80	; 0x50
        x = x_right - strlen(control_scheme);
     a7c:	e1a0000a 	mov	r0, r10
     a80:	eb00189c 	bl	6cf8 <strlen>
        plot_text(x, y, control_scheme);
     a84:	e2600037 	rsb	r0, r0, #55	; 0x37
     a88:	e3a01022 	mov	r1, #34	; 0x22
     a8c:	e1a0200a 	mov	r2, r10
     a90:	eb0002be 	bl	1590 <plot_text>
        x = x_left;
        y += 2;

        // Timer Type
        char * timer_type_text = OPTIONS_INDEX == 2 ? ">Timer Type\0" : "Timer Type\0";
     a94:	e5973000 	ldr	r3, [r7]
     a98:	e3530002 	cmp	r3, #2
     a9c:	02842068 	addeq	r2, r4, #104	; 0x68
     aa0:	12842078 	addne	r2, r4, #120	; 0x78
        plot_text(x, y, timer_type_text);
     aa4:	e3a0001b 	mov	r0, #27
     aa8:	e3a01024 	mov	r1, #36	; 0x24
     aac:	eb0002b7 	bl	1590 <plot_text>
        char *timer_type = SETTINGS.DIFFICULTY == DEBUG ? "(SW[4])" : SETTINGS.TIME_MODE == SECONDS ? "Seconds\0" : "Milliseconds\0";
     ab0:	e5d53002 	ldrb	r3, [r5, #2]
     ab4:	e3530000 	cmp	r3, #0
     ab8:	0308a030 	movweq	r10, #32816	; 0x8030
     abc:	0340a000 	movteq	r10, #0
     ac0:	0a000005 	beq	adc <draw_options+0x1a8>
     ac4:	e5d53003 	ldrb	r3, [r5, #3]
     ac8:	e3530000 	cmp	r3, #0
     acc:	0284a094 	addeq	r10, r4, #148	; 0x94
     ad0:	0a000001 	beq	adc <draw_options+0x1a8>
     ad4:	eaffffff 	b	ad8 <draw_options+0x1a4>
     ad8:	e284a084 	add	r10, r4, #132	; 0x84
        x = x_right - strlen(timer_type);
     adc:	e1a0000a 	mov	r0, r10
     ae0:	eb001884 	bl	6cf8 <strlen>
        plot_text(x, y, timer_type);
     ae4:	e2600037 	rsb	r0, r0, #55	; 0x37
     ae8:	e3a01024 	mov	r1, #36	; 0x24
     aec:	e1a0200a 	mov	r2, r10
     af0:	eb0002a6 	bl	1590 <plot_text>
        y += 2;

        y++; // Empty Line

        // Difficulty
        char * difficulty_option_text = OPTIONS_INDEX == 3 ? ">Difficulty\0" :  "Difficulty\0";
     af4:	e5973000 	ldr	r3, [r7]
     af8:	e3530003 	cmp	r3, #3
     afc:	028420a0 	addeq	r2, r4, #160	; 0xa0
     b00:	128420b0 	addne	r2, r4, #176	; 0xb0
        plot_text(x, y, difficulty_option_text);
     b04:	e3a0001b 	mov	r0, #27
     b08:	e3a01027 	mov	r1, #39	; 0x27
     b0c:	eb00029f 	bl	1590 <plot_text>
        char *difficulty_option = SETTINGS.DIFFICULTY == DEBUG ? "Debug\0" :
     b10:	e5d53002 	ldrb	r3, [r5, #2]
     b14:	e3530000 	cmp	r3, #0
     b18:	0284a0c4 	addeq	r10, r4, #196	; 0xc4
     b1c:	0a000005 	beq	b38 <draw_options+0x204>
                                  SETTINGS.DIFFICULTY == EASY ? "Easy\0" :
     b20:	e3530001 	cmp	r3, #1
     b24:	0284a0bc 	addeq	r10, r4, #188	; 0xbc
     b28:	0a000002 	beq	b38 <draw_options+0x204>
                                  SETTINGS.DIFFICULTY == NORMAL ? "Normal\0" :
     b2c:	e3530002 	cmp	r3, #2
     b30:	0284a0d4 	addeq	r10, r4, #212	; 0xd4
                                  "Hard\0";
     b34:	1284a0cc 	addne	r10, r4, #204	; 0xcc
        x = x_right - strlen(difficulty_option);
     b38:	e1a0000a 	mov	r0, r10
     b3c:	eb00186d 	bl	6cf8 <strlen>
        plot_text(x, y, difficulty_option);
     b40:	e2600037 	rsb	r0, r0, #55	; 0x37
     b44:	e3a01027 	mov	r1, #39	; 0x27
     b48:	e1a0200a 	mov	r2, r10
     b4c:	eb00028f 	bl	1590 <plot_text>
        y += 2;

        y++; // Empty Line

        // Difficulty Set Options
        char text[] = "** Difficulty Set Options **\0";
     b50:	e28dc030 	add	r12, sp, #48	; 0x30
     b54:	e284ec01 	add	lr, r4, #256	; 0x100
     b58:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
     b5c:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
     b60:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
     b64:	e8ac0007 	stmia	r12!, {r0, r1, r2}
     b68:	e1cc30b0 	strh	r3, [r12]
        x = x_left + (x_right - x_left - strlen(text)) / 2;
     b6c:	e28d0030 	add	r0, sp, #48	; 0x30
     b70:	eb001860 	bl	6cf8 <strlen>
     b74:	e260001c 	rsb	r0, r0, #28
     b78:	e1a000a0 	lsr	r0, r0, #1
        plot_text(x, y, text);
     b7c:	e280001b 	add	r0, r0, #27
     b80:	e3a0102a 	mov	r1, #42	; 0x2a
     b84:	e28d2030 	add	r2, sp, #48	; 0x30
     b88:	eb000280 	bl	1590 <plot_text>
        y += 2;

        y++; // Empty Line

        // Screen Rotation
        char screen_rotation_text[] = "Screen Rotation\0";
     b8c:	e28dc008 	add	r12, sp, #8
     b90:	e284ee12 	add	lr, r4, #288	; 0x120
     b94:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
     b98:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
     b9c:	e59e3000 	ldr	r3, [lr]
     ba0:	e5cc3000 	strb	r3, [r12]
        plot_text(x, y, screen_rotation_text);
     ba4:	e3a0001b 	mov	r0, #27
     ba8:	e3a0102d 	mov	r1, #45	; 0x2d
     bac:	e28d2008 	add	r2, sp, #8
     bb0:	eb000276 	bl	1590 <plot_text>
        char *screen_rotation = SETTINGS.DIFFICULTY == DEBUG ? "(SW[1])\0" :
     bb4:	e5d53002 	ldrb	r3, [r5, #2]
     bb8:	e3530000 	cmp	r3, #0
     bbc:	0284a0e0 	addeq	r10, r4, #224	; 0xe0
     bc0:	0a000003 	beq	bd4 <draw_options+0x2a0>
                                SETTINGS.SCREEN_ROTATE ? "Yes\0" : "No\0";
     bc4:	e5d53004 	ldrb	r3, [r5, #4]
     bc8:	e3530000 	cmp	r3, #0
     bcc:	1284a0ec 	addne	r10, r4, #236	; 0xec
     bd0:	0284a0dc 	addeq	r10, r4, #220	; 0xdc

        x = x_right - strlen(screen_rotation);
     bd4:	e1a0000a 	mov	r0, r10
     bd8:	eb001846 	bl	6cf8 <strlen>
        plot_text(x, y, screen_rotation);
     bdc:	e2600037 	rsb	r0, r0, #55	; 0x37
     be0:	e3a0102d 	mov	r1, #45	; 0x2d
     be4:	e1a0200a 	mov	r2, r10
     be8:	eb000268 	bl	1590 <plot_text>
        x = x_left;
        y += 2;

        // Hexagon Rotation
        char hex_rotation_text[] = "Hexagon Rotation\0";
     bec:	e28dc01c 	add	r12, sp, #28
     bf0:	e284ef4d 	add	lr, r4, #308	; 0x134
     bf4:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
     bf8:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
     bfc:	e59e3000 	ldr	r3, [lr]
     c00:	e1cc30b0 	strh	r3, [r12]
        plot_text(x, y, hex_rotation_text);
     c04:	e3a0001b 	mov	r0, #27
     c08:	e3a0102f 	mov	r1, #47	; 0x2f
     c0c:	e28d201c 	add	r2, sp, #28
     c10:	eb00025e 	bl	1590 <plot_text>
        char *hex_rotation = SETTINGS.DIFFICULTY == DEBUG ? "(SW[5])\0" :
     c14:	e5d53002 	ldrb	r3, [r5, #2]
     c18:	e3530000 	cmp	r3, #0
     c1c:	0284a0f4 	addeq	r10, r4, #244	; 0xf4
     c20:	0a000003 	beq	c34 <draw_options+0x300>
                             SETTINGS.HEXAGON_ROTATE ? "Yes\0" : "No\0";
     c24:	e5d5300c 	ldrb	r3, [r5, #12]
     c28:	e3530000 	cmp	r3, #0
     c2c:	1284a0ec 	addne	r10, r4, #236	; 0xec
     c30:	0284a0dc 	addeq	r10, r4, #220	; 0xdc

        x = x_right - strlen(hex_rotation);
     c34:	e1a0000a 	mov	r0, r10
     c38:	eb00182e 	bl	6cf8 <strlen>
        plot_text(x, y, hex_rotation);
     c3c:	e2600037 	rsb	r0, r0, #55	; 0x37
     c40:	e3a0102f 	mov	r1, #47	; 0x2f
     c44:	e1a0200a 	mov	r2, r10
     c48:	eb000250 	bl	1590 <plot_text>

    int x_left = 1 + x0 / 4, y_top = 1 + y0 / 4;
    int x_right = (x1 / 4), y_bottom = (y1 / 4);

    // Loop while game state is options
    while (GAME_STATE.MODE == OPTIONS) {
     c4c:	e5d8300c 	ldrb	r3, [r8, #12]
     c50:	e3530001 	cmp	r3, #1
     c54:	0affff58 	beq	9bc <draw_options+0x88>
        x = x_right - strlen(hex_rotation);
        plot_text(x, y, hex_rotation);
        x = x_left;
        y += 2;
    }
     c58:	e28dd054 	add	sp, sp, #84	; 0x54
     c5c:	e8bd85f0 	pop	{r4, r5, r6, r7, r8, r10, pc}

00000c60 <gameLoop>:

    GAME_STATE.RUN = true;
    turnOnLED(0);
}

void gameLoop() {
     c60:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     c64:	e24ddf59 	sub	sp, sp, #356	; 0x164
    //for (i = 0; i < NUM_SECTIONS; ++i) {
    //    init_segment(&BACKGROUND[i], i, ORIGIN_Y * 2, ORIGIN_Y * 2, 0, BACKGROUND_COLORS[i%2]);
    //}

    // Clear pixel and character buffers
    clear_screen();
     c68:	eb000224 	bl	1500 <clear_screen>
    clear_char_buffer();
     c6c:	eb000237 	bl	1550 <clear_char_buffer>

    // Init base hexagon
    Hexagon baseHex;
    init_hexagon(&baseHex, -1, ORIGIN_PADDING, ORIGIN_PADDING, 0, 0xFFFF);
     c70:	e3a03000 	mov	r3, #0
     c74:	e58d3000 	str	r3, [sp]
     c78:	e3e01000 	mvn	r1, #0
     c7c:	e58d1004 	str	r1, [sp, #4]
     c80:	e28d00b4 	add	r0, sp, #180	; 0xb4
     c84:	e3a0200a 	mov	r2, #10
     c88:	e1a03002 	mov	r3, r2
     c8c:	eb00032b 	bl	1940 <init_hexagon>


    while (true)
    {
        if (GAME_STATE.MODE == TITLE) {
     c90:	e3035b3c 	movw	r5, #15164	; 0x3b3c
     c94:	e3405005 	movt	r5, #5
            clear_char_buffer();
            continue;
        }

        // Initialize game if requested
        if (INIT_GAME_REQUEST) {
     c98:	e303bb4c 	movw	r11, #15180	; 0x3b4c
     c9c:	e340b005 	movt	r11, #5
        }

        clear_screen(); // Clear previous drawing

        draw_time();            // Draw game time (player score)
        draw_player(PLAYER);    // Draw the player
     ca0:	e3037e70 	movw	r7, #15984	; 0x3e70
     ca4:	e3407005 	movt	r7, #5
        if (hit)
            GAME_STATE.GAME_OVER = true;

        // Draw and update the hexagons
        for (i = 0; i < SIZE; ++i) {
            draw_hexagon(HEXAGONS[i]);
     ca8:	e3039c6c 	movw	r9, #15468	; 0x3c6c
     cac:	e3409005 	movt	r9, #5
        // Perform any necessary updates
        update();

        // Wait for VSync and swap buffers
        wait_for_vsync(); // swap front and back buffers on VGA vertical sync
        pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
     cb0:	e3082280 	movw	r2, #33408	; 0x8280
     cb4:	e3402000 	movt	r2, #0
     cb8:	e58d20a8 	str	r2, [sp, #168]	; 0xa8
     cbc:	e3033b1c 	movw	r3, #15132	; 0x3b1c
     cc0:	e3403005 	movt	r3, #5
     cc4:	e58d30ac 	str	r3, [sp, #172]	; 0xac
    init_hexagon(&baseHex, -1, ORIGIN_PADDING, ORIGIN_PADDING, 0, 0xFFFF);


    while (true)
    {
        if (GAME_STATE.MODE == TITLE) {
     cc8:	e5d5300c 	ldrb	r3, [r5, #12]
     ccc:	e3530000 	cmp	r3, #0
     cd0:	1a000001 	bne	cdc <gameLoop+0x7c>
            // In title screen
            draw_title();
     cd4:	ebfffed8 	bl	83c <draw_title>
            continue;
     cd8:	eafffffa 	b	cc8 <gameLoop+0x68>
        }

        if (GAME_STATE.MODE == OPTIONS) {
     cdc:	e5d5300c 	ldrb	r3, [r5, #12]
     ce0:	e3530001 	cmp	r3, #1
     ce4:	1a000006 	bne	d04 <gameLoop+0xa4>
            // Loop in options screen
            OPTIONS_UPDATE = true;
     ce8:	e3033bcc 	movw	r3, #15308	; 0x3bcc
     cec:	e3403005 	movt	r3, #5
     cf0:	e3a02001 	mov	r2, #1
     cf4:	e5c32000 	strb	r2, [r3]
            draw_options();
     cf8:	ebffff0d 	bl	934 <draw_options>
            clear_char_buffer();
     cfc:	eb000213 	bl	1550 <clear_char_buffer>
            continue;
     d00:	eafffff0 	b	cc8 <gameLoop+0x68>
        }

        // Initialize game if requested
        if (INIT_GAME_REQUEST) {
     d04:	e5db3000 	ldrb	r3, [r11]
     d08:	e3530000 	cmp	r3, #0
     d0c:	0a000002 	beq	d1c <gameLoop+0xbc>
            init_game();
     d10:	ebfffd5e 	bl	290 <init_game>
            INIT_GAME_REQUEST = false;  // Clear request
     d14:	e3a03000 	mov	r3, #0
     d18:	e5cb3000 	strb	r3, [r11]
        }

        // Do nothing if RUN is false
        if (!GAME_STATE.RUN)
     d1c:	e5d53000 	ldrb	r3, [r5]
     d20:	e3530000 	cmp	r3, #0
     d24:	0affffe7 	beq	cc8 <gameLoop+0x68>
            continue;

        // End game if GAME_OVER
        if (GAME_STATE.GAME_OVER) {
     d28:	e5d53001 	ldrb	r3, [r5, #1]
     d2c:	e3530000 	cmp	r3, #0
     d30:	0a000005 	beq	d4c <gameLoop+0xec>
            GAME_STATE.RUN = false;
     d34:	e3a00000 	mov	r0, #0
     d38:	e5c50000 	strb	r0, [r5]
            turnOffLED(0);
     d3c:	eb000180 	bl	1344 <turnOffLED>
            turnOnLED(9);   // LED to signal game over
     d40:	e3a00009 	mov	r0, #9
     d44:	eb000177 	bl	1328 <turnOnLED>
            continue;
     d48:	eaffffde 	b	cc8 <gameLoop+0x68>
        }

        clear_screen(); // Clear previous drawing
     d4c:	eb0001eb 	bl	1500 <clear_screen>

        draw_time();            // Draw game time (player score)
     d50:	ebfffe13 	bl	5a4 <draw_time>
        draw_player(PLAYER);    // Draw the player
     d54:	e2874010 	add	r4, r7, #16
     d58:	e8940003 	ldm	r4, {r0, r1}
     d5c:	e88d0003 	stm	sp, {r0, r1}
     d60:	e897000f 	ldm	r7, {r0, r1, r2, r3}
     d64:	eb000891 	bl	2fb0 <draw_player>

        // Check for player hit (game over condition)
        bool hit = checkPlayerHit(PLAYER);
     d68:	e8940003 	ldm	r4, {r0, r1}
     d6c:	e88d0003 	stm	sp, {r0, r1}
     d70:	e897000f 	ldm	r7, {r0, r1, r2, r3}
     d74:	eb000868 	bl	2f1c <checkPlayerHit>
        int sect = PLAYER.section;
     d78:	e5972000 	ldr	r2, [r7]
     d7c:	e58d20a4 	str	r2, [sp, #164]	; 0xa4
        if (hit)
     d80:	e3500000 	cmp	r0, #0
     d84:	e58d00a0 	str	r0, [sp, #160]	; 0xa0
            GAME_STATE.GAME_OVER = true;
     d88:	13a03001 	movne	r3, #1
     d8c:	15c53001 	strbne	r3, [r5, #1]
     d90:	ea000026 	b	e30 <gameLoop+0x1d0>

        // Draw and update the hexagons
        for (i = 0; i < SIZE; ++i) {
            draw_hexagon(HEXAGONS[i]);
     d94:	e024969a 	mla	r4, r10, r6, r9
     d98:	e1a0000d 	mov	r0, sp
     d9c:	e2841010 	add	r1, r4, #16
     da0:	e1a02008 	mov	r2, r8
     da4:	eb001732 	bl	6a74 <memcpy>
     da8:	e894000f 	ldm	r4, {r0, r1, r2, r3}
     dac:	eb0003c7 	bl	1cd0 <draw_hexagon>
            update_hexagon(&HEXAGONS[i]);
     db0:	e1a00004 	mov	r0, r4
     db4:	eb000387 	bl	1bd8 <update_hexagon>
        int sect = PLAYER.section;
        if (hit)
            GAME_STATE.GAME_OVER = true;

        // Draw and update the hexagons
        for (i = 0; i < SIZE; ++i) {
     db8:	e2866001 	add	r6, r6, #1
     dbc:	e3560003 	cmp	r6, #3
     dc0:	1afffff3 	bne	d94 <gameLoop+0x134>
            draw_hexagon(HEXAGONS[i]);
            update_hexagon(&HEXAGONS[i]);
        }

        // Draw the base hexagon
        draw_hexagon(baseHex);
     dc4:	e1a0000d 	mov	r0, sp
     dc8:	e28d10c4 	add	r1, sp, #196	; 0xc4
     dcc:	e3a0209c 	mov	r2, #156	; 0x9c
     dd0:	eb001727 	bl	6a74 <memcpy>
     dd4:	e28d30b4 	add	r3, sp, #180	; 0xb4
     dd8:	e893000f 	ldm	r3, {r0, r1, r2, r3}
     ddc:	eb0003bb 	bl	1cd0 <draw_hexagon>

        // Draw player in red when game over
        if (hit) {
     de0:	e59d30a0 	ldr	r3, [sp, #160]	; 0xa0
     de4:	e3530000 	cmp	r3, #0
     de8:	0a000008 	beq	e10 <gameLoop+0x1b0>
            PLAYER.section = sect;
     dec:	e59d20a4 	ldr	r2, [sp, #164]	; 0xa4
     df0:	e5872000 	str	r2, [r7]
            PLAYER.color = RED;
     df4:	e3a03b3e 	mov	r3, #63488	; 0xf800
     df8:	e1c730b8 	strh	r3, [r7, #8]
            draw_player(PLAYER);
     dfc:	e2873010 	add	r3, r7, #16
     e00:	e8930003 	ldm	r3, {r0, r1}
     e04:	e88d0003 	stm	sp, {r0, r1}
     e08:	e897000f 	ldm	r7, {r0, r1, r2, r3}
     e0c:	eb000867 	bl	2fb0 <draw_player>
        }

        // Perform any necessary updates
        update();
     e10:	ebfffe81 	bl	81c <update>

        // Wait for VSync and swap buffers
        wait_for_vsync(); // swap front and back buffers on VGA vertical sync
     e14:	eb0002ac 	bl	18cc <wait_for_vsync>
        pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
     e18:	e59d20a8 	ldr	r2, [sp, #168]	; 0xa8
     e1c:	e5923000 	ldr	r3, [r2]
     e20:	e5933004 	ldr	r3, [r3, #4]
     e24:	e59d20ac 	ldr	r2, [sp, #172]	; 0xac
     e28:	e5823000 	str	r3, [r2]
     e2c:	eaffffa5 	b	cc8 <gameLoop+0x68>

    GAME_STATE.RUN = true;
    turnOnLED(0);
}

void gameLoop() {
     e30:	e3a06000 	mov	r6, #0
        if (hit)
            GAME_STATE.GAME_OVER = true;

        // Draw and update the hexagons
        for (i = 0; i < SIZE; ++i) {
            draw_hexagon(HEXAGONS[i]);
     e34:	e3a0a0ac 	mov	r10, #172	; 0xac
     e38:	e3a0809c 	mov	r8, #156	; 0x9c
     e3c:	eaffffd4 	b	d94 <gameLoop+0x134>

00000e40 <main>:
    turnOffAllLED();                // Turn Off All LEDs (Used for debugging
    turnOnLED(0);                   // LED 0 is the RUN signal
}

int main(void)
{
     e40:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     e44:	e24dd00c 	sub	sp, sp, #12
    onStartup();                    // Actions to perform on startup
     e48:	ebfffd03 	bl	25c <onStartup>

    // Seed random number generator
    time_t t;
    srand((unsigned) time(&t));
     e4c:	e28d0004 	add	r0, sp, #4
     e50:	eb0017c0 	bl	6d58 <time>
     e54:	eb001789 	bl	6c80 <srand>

    gameLoop();                     // Enter game loop
     e58:	ebffff80 	bl	c60 <gameLoop>

00000e5c <init_segment>:
#include "vga.h"
#include "utils.h"
#include "globals.h"

void init_segment(Segment* seg, int section, int y, int height, int speed, short int color) {
    seg->section = section;
     e5c:	e5801008 	str	r1, [r0, #8]
    seg->y = y;
     e60:	e5802000 	str	r2, [r0]
    seg->height = height;
     e64:	e5803004 	str	r3, [r0, #4]
    seg->speed = speed;
     e68:	e59d3000 	ldr	r3, [sp]
     e6c:	e580300c 	str	r3, [r0, #12]
    seg->color = color;
     e70:	e1dd30f4 	ldrsh	r3, [sp, #4]
     e74:	e1c031b4 	strh	r3, [r0, #20]
    seg->rotation = 0;
     e78:	e3a03000 	mov	r3, #0
     e7c:	e5803010 	str	r3, [r0, #16]
     e80:	e12fff1e 	bx	lr

00000e84 <draw_segment>:
    //seg->rotation_speed = 0;
}

void draw_segment(Segment seg) {
     e84:	e24dd010 	sub	sp, sp, #16
     e88:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     e8c:	e24dd01c 	sub	sp, sp, #28
     e90:	e28dc03c 	add	r12, sp, #60	; 0x3c
     e94:	e98c000f 	stmib	r12, {r0, r1, r2, r3}
     e98:	e59db044 	ldr	r11, [sp, #68]	; 0x44
     e9c:	e59d9050 	ldr	r9, [sp, #80]	; 0x50
    int x = ORIGIN_X;
    //int angle = ROTATION_ANGLE * seg.section;
    int angle = seg.section;
     ea0:	e59da048 	ldr	r10, [sp, #72]	; 0x48
    int i;
    for (i = 0; i<seg.height; ++i) {
     ea4:	e35b0000 	cmp	r11, #0
     ea8:	da000037 	ble	f8c <draw_segment+0x108>
     eac:	e3a06000 	mov	r6, #0
        int y = seg.y - i;
        int half_length = y / GRADIENT;
     eb0:	e306406b 	movw	r4, #24683	; 0x606b
     eb4:	e34e4858 	movt	r4, #59480	; 0xe858
     eb8:	e30b567a 	movw	r5, #46714	; 0xb67a
     ebc:	e3435ffb 	movt	r5, #16379	; 0x3ffb
        int y1 = ORIGIN_Y - y;

        rotate(&x0, &y0, angle);
        rotate(&x1, &y1, angle);

        rotate2(&x0, &y0, GAME_STATE.SCREEN_ROTATION_ANGLE);
     ec0:	e3038b3c 	movw	r8, #15164	; 0x3b3c
     ec4:	e3408005 	movt	r8, #5
    int x = ORIGIN_X;
    //int angle = ROTATION_ANGLE * seg.section;
    int angle = seg.section;
    int i;
    for (i = 0; i<seg.height; ++i) {
        int y = seg.y - i;
     ec8:	e59d7040 	ldr	r7, [sp, #64]	; 0x40
     ecc:	e0667007 	rsb	r7, r6, r7
        int half_length = y / GRADIENT;
     ed0:	e1a00007 	mov	r0, r7
     ed4:	eb00131a 	bl	5b44 <__aeabi_i2d>
     ed8:	e1a02004 	mov	r2, r4
     edc:	e1a03005 	mov	r3, r5
     ee0:	eb0013f2 	bl	5eb0 <__aeabi_ddiv>
     ee4:	eb0014c5 	bl	6200 <__aeabi_d2iz>
        int x0 = x - half_length;
     ee8:	e260309f 	rsb	r3, r0, #159	; 0x9f
     eec:	e58d3008 	str	r3, [sp, #8]
        int x1 = x + half_length;
     ef0:	e280009f 	add	r0, r0, #159	; 0x9f
     ef4:	e58d000c 	str	r0, [sp, #12]
        int y0 = ORIGIN_Y - y;
     ef8:	e2677077 	rsb	r7, r7, #119	; 0x77
     efc:	e58d7010 	str	r7, [sp, #16]
        int y1 = ORIGIN_Y - y;
     f00:	e58d7014 	str	r7, [sp, #20]

        rotate(&x0, &y0, angle);
     f04:	e28d0008 	add	r0, sp, #8
     f08:	e28d1010 	add	r1, sp, #16
     f0c:	e1a0200a 	mov	r2, r10
     f10:	eb00007f 	bl	1114 <rotate>
        rotate(&x1, &y1, angle);
     f14:	e28d000c 	add	r0, sp, #12
     f18:	e28d1014 	add	r1, sp, #20
     f1c:	e1a0200a 	mov	r2, r10
     f20:	eb00007b 	bl	1114 <rotate>

        rotate2(&x0, &y0, GAME_STATE.SCREEN_ROTATION_ANGLE);
     f24:	e28d0008 	add	r0, sp, #8
     f28:	e28d1010 	add	r1, sp, #16
     f2c:	e5982008 	ldr	r2, [r8, #8]
     f30:	eb0000b4 	bl	1208 <rotate2>
        rotate2(&x1, &y1, GAME_STATE.SCREEN_ROTATION_ANGLE);
     f34:	e28d000c 	add	r0, sp, #12
     f38:	e28d1014 	add	r1, sp, #20
     f3c:	e5982008 	ldr	r2, [r8, #8]
     f40:	eb0000b0 	bl	1208 <rotate2>

        rotate2(&x0, &y0, seg.rotation);
     f44:	e28d0008 	add	r0, sp, #8
     f48:	e28d1010 	add	r1, sp, #16
     f4c:	e1a02009 	mov	r2, r9
     f50:	eb0000ac 	bl	1208 <rotate2>
        rotate2(&x1, &y1, seg.rotation);
     f54:	e28d000c 	add	r0, sp, #12
     f58:	e28d1014 	add	r1, sp, #20
     f5c:	e1a02009 	mov	r2, r9
     f60:	eb0000a8 	bl	1208 <rotate2>

        draw_triple_line(x0, y0, x1, y1, seg.color);
     f64:	e1dd35f4 	ldrsh	r3, [sp, #84]	; 0x54
     f68:	e58d3000 	str	r3, [sp]
     f6c:	e59d0008 	ldr	r0, [sp, #8]
     f70:	e59d1010 	ldr	r1, [sp, #16]
     f74:	e59d200c 	ldr	r2, [sp, #12]
     f78:	e59d3014 	ldr	r3, [sp, #20]
     f7c:	eb000210 	bl	17c4 <draw_triple_line>
void draw_segment(Segment seg) {
    int x = ORIGIN_X;
    //int angle = ROTATION_ANGLE * seg.section;
    int angle = seg.section;
    int i;
    for (i = 0; i<seg.height; ++i) {
     f80:	e2866001 	add	r6, r6, #1
     f84:	e156000b 	cmp	r6, r11
     f88:	1affffce 	bne	ec8 <draw_segment+0x44>
        rotate2(&x0, &y0, seg.rotation);
        rotate2(&x1, &y1, seg.rotation);

        draw_triple_line(x0, y0, x1, y1, seg.color);
    }
}
     f8c:	e28dd01c 	add	sp, sp, #28
     f90:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     f94:	e28dd010 	add	sp, sp, #16
     f98:	e12fff1e 	bx	lr

00000f9c <update_segment>:

void update_segment(Segment* seg) {
    if (seg->y <= ORIGIN_PADDING) {
     f9c:	e5903000 	ldr	r3, [r0]
     fa0:	e353000a 	cmp	r3, #10
        seg->y = ORIGIN_Y;
     fa4:	d3a03077 	movle	r3, #119	; 0x77
     fa8:	d5803000 	strle	r3, [r0]
        seg->speed++;
     fac:	d590300c 	ldrle	r3, [r0, #12]
     fb0:	d2833001 	addle	r3, r3, #1
     fb4:	d580300c 	strle	r3, [r0, #12]
    } else {
        seg->y -= seg->speed;
     fb8:	c590200c 	ldrgt	r2, [r0, #12]
     fbc:	c0623003 	rsbgt	r3, r2, r3
     fc0:	c5803000 	strgt	r3, [r0]
     fc4:	e12fff1e 	bx	lr

00000fc8 <abs>:
int abs(int x) {
    if (x < 0)
        return -1 * x;
    else
        return x;
}
     fc8:	e3500000 	cmp	r0, #0
     fcc:	b2600000 	rsblt	r0, r0, #0
     fd0:	e12fff1e 	bx	lr

00000fd4 <swap>:

void swap(int *x, int *y) {
    int temp = *x;
     fd4:	e5903000 	ldr	r3, [r0]
    *x = *y;
     fd8:	e5912000 	ldr	r2, [r1]
     fdc:	e5802000 	str	r2, [r0]
    *y = temp;
     fe0:	e5813000 	str	r3, [r1]
     fe4:	e12fff1e 	bx	lr

00000fe8 <inBoundsX>:
    return inBoundsX(x) && inBoundsY(y);
}

bool inBoundsX(int x) {
    return x >= 0 && x < MAX_X;
}
     fe8:	e3500d05 	cmp	r0, #320	; 0x140
     fec:	23a00000 	movcs	r0, #0
     ff0:	33a00001 	movcc	r0, #1
     ff4:	e12fff1e 	bx	lr

00000ff8 <inBoundsY>:

bool inBoundsY(int y) {
    return y >= 0 && y < MAX_Y;
}
     ff8:	e35000ef 	cmp	r0, #239	; 0xef
     ffc:	83a00000 	movhi	r0, #0
    1000:	93a00001 	movls	r0, #1
    1004:	e12fff1e 	bx	lr

00001008 <inBounds>:
    int temp = *x;
    *x = *y;
    *y = temp;
}

bool inBounds(int x, int y) {
    1008:	e92d4010 	push	{r4, lr}
    100c:	e1a04001 	mov	r4, r1
    return inBoundsX(x) && inBoundsY(y);
    1010:	ebfffff4 	bl	fe8 <inBoundsX>
    1014:	e3500000 	cmp	r0, #0
    1018:	03a00000 	moveq	r0, #0
    101c:	0a000002 	beq	102c <inBounds+0x24>
    1020:	e1a00004 	mov	r0, r4
    1024:	ebfffff3 	bl	ff8 <inBoundsY>
    1028:	eaffffff 	b	102c <inBounds+0x24>
}
    102c:	e2000001 	and	r0, r0, #1
    1030:	e8bd8010 	pop	{r4, pc}

00001034 <getCosOfSection>:
bool inBoundsY(int y) {
    return y >= 0 && y < MAX_Y;
}

double getCosOfSection(int section) {
    switch(section) {
    1034:	e2400001 	sub	r0, r0, #1
    1038:	e3500004 	cmp	r0, #4
    103c:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
    1040:	ea000004 	b	1058 <getCosOfSection+0x24>
    1044:	00001098 	.word	0x00001098
    1048:	00001068 	.word	0x00001068
    104c:	00001078 	.word	0x00001078
    1050:	00001088 	.word	0x00001088
    1054:	00001098 	.word	0x00001098
        case 0:
            return 1;
    1058:	e3a00000 	mov	r0, #0
    105c:	e3a01000 	mov	r1, #0
    1060:	e3431ff0 	movt	r1, #16368	; 0x3ff0
    1064:	e12fff1e 	bx	lr
        case 1:
            return 0.5;
        case 2:
            return -0.5;
    1068:	e3a00000 	mov	r0, #0
    106c:	e3a01000 	mov	r1, #0
    1070:	e34b1fe0 	movt	r1, #49120	; 0xbfe0
    1074:	e12fff1e 	bx	lr
        case 3:
            return -1;
    1078:	e3a00000 	mov	r0, #0
    107c:	e3a01000 	mov	r1, #0
    1080:	e34b1ff0 	movt	r1, #49136	; 0xbff0
    1084:	e12fff1e 	bx	lr
        case 4:
            return -0.5;
    1088:	e3a00000 	mov	r0, #0
    108c:	e3a01000 	mov	r1, #0
    1090:	e34b1fe0 	movt	r1, #49120	; 0xbfe0
    1094:	e12fff1e 	bx	lr
double getCosOfSection(int section) {
    switch(section) {
        case 0:
            return 1;
        case 1:
            return 0.5;
    1098:	e3a00000 	mov	r0, #0
    109c:	e3a01000 	mov	r1, #0
    10a0:	e3431fe0 	movt	r1, #16352	; 0x3fe0
        case 5:
            return 0.5;
        default:
            return 1;
    }
}
    10a4:	e12fff1e 	bx	lr

000010a8 <getSinOfSection>:

double getSinOfSection(int section) {
    switch(section) {
    10a8:	e2400001 	sub	r0, r0, #1
    10ac:	e3500004 	cmp	r0, #4
    10b0:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
    10b4:	ea000004 	b	10cc <getSinOfSection+0x24>
    10b8:	00001100 	.word	0x00001100
    10bc:	00001100 	.word	0x00001100
    10c0:	000010cc 	.word	0x000010cc
    10c4:	000010d8 	.word	0x000010d8
    10c8:	000010ec 	.word	0x000010ec
        case 0:
            return 0;
    10cc:	e3a00000 	mov	r0, #0
    10d0:	e3a01000 	mov	r1, #0
    10d4:	e12fff1e 	bx	lr
        case 2:
            return 0.86602540378;
        case 3:
            return 0;
        case 4:
            return -0.86602540378;
    10d8:	e30b007f 	movw	r0, #45183	; 0xb07f
    10dc:	e34e0857 	movt	r0, #59479	; 0xe857
    10e0:	e30b167a 	movw	r1, #46714	; 0xb67a
    10e4:	e34b1feb 	movt	r1, #49131	; 0xbfeb
    10e8:	e12fff1e 	bx	lr
        case 5:
            return -0.86602540378;
    10ec:	e30b007f 	movw	r0, #45183	; 0xb07f
    10f0:	e34e0857 	movt	r0, #59479	; 0xe857
    10f4:	e30b167a 	movw	r1, #46714	; 0xb67a
    10f8:	e34b1feb 	movt	r1, #49131	; 0xbfeb
    10fc:	e12fff1e 	bx	lr
double getSinOfSection(int section) {
    switch(section) {
        case 0:
            return 0;
        case 1:
            return 0.86602540378;
    1100:	e30b007f 	movw	r0, #45183	; 0xb07f
    1104:	e34e0857 	movt	r0, #59479	; 0xe857
    1108:	e30b167a 	movw	r1, #46714	; 0xb67a
    110c:	e3431feb 	movt	r1, #16363	; 0x3feb
        case 5:
            return -0.86602540378;
        default:
            return 0;
    }
}
    1110:	e12fff1e 	bx	lr

00001114 <rotate>:

void rotate(int *x, int *y, int section) {
    1114:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
    1118:	e24dd018 	sub	sp, sp, #24
    111c:	e1a0a000 	mov	r10, r0
    1120:	e1a08001 	mov	r8, r1
    1124:	e1a09002 	mov	r9, r2
    int x_ = *x - ORIGIN_X;
    1128:	e5900000 	ldr	r0, [r0]
    int y_ = *y - ORIGIN_Y;

    *x = x_ * getCosOfSection(section) - y_ * getSinOfSection(section);
    112c:	e240009f 	sub	r0, r0, #159	; 0x9f
    1130:	eb001283 	bl	5b44 <__aeabi_i2d>
    1134:	e1a04000 	mov	r4, r0
    1138:	e1a05001 	mov	r5, r1
    113c:	e1a00009 	mov	r0, r9
    1140:	ebffffbb 	bl	1034 <getCosOfSection>
    1144:	e1a06000 	mov	r6, r0
    1148:	e1a07001 	mov	r7, r1
    114c:	e1a00004 	mov	r0, r4
    1150:	e1a01005 	mov	r1, r5
    1154:	e1a02006 	mov	r2, r6
    1158:	e1a03007 	mov	r3, r7
    115c:	eb0012af 	bl	5c20 <__aeabi_dmul>
    1160:	e1cd01f0 	strd	r0, [sp, #16]
    }
}

void rotate(int *x, int *y, int section) {
    int x_ = *x - ORIGIN_X;
    int y_ = *y - ORIGIN_Y;
    1164:	e5980000 	ldr	r0, [r8]

    *x = x_ * getCosOfSection(section) - y_ * getSinOfSection(section);
    1168:	e2400077 	sub	r0, r0, #119	; 0x77
    116c:	eb001274 	bl	5b44 <__aeabi_i2d>
    1170:	e1cd00f0 	strd	r0, [sp]
    1174:	e1a00009 	mov	r0, r9
    1178:	ebffffca 	bl	10a8 <getSinOfSection>
    117c:	e1cd00f8 	strd	r0, [sp, #8]
    1180:	e1cd00d0 	ldrd	r0, [sp]
    1184:	e1cd20d8 	ldrd	r2, [sp, #8]
    1188:	eb0012a4 	bl	5c20 <__aeabi_dmul>
    118c:	e1a02000 	mov	r2, r0
    1190:	e1a03001 	mov	r3, r1
    1194:	e1cd01d0 	ldrd	r0, [sp, #16]
    1198:	eb00119b 	bl	580c <__aeabi_dsub>
    119c:	eb001417 	bl	6200 <__aeabi_d2iz>
    11a0:	e58a0000 	str	r0, [r10]
    *y = y_ * getCosOfSection(section) + x_ * getSinOfSection(section);
    11a4:	e1a00006 	mov	r0, r6
    11a8:	e1a01007 	mov	r1, r7
    11ac:	e1cd20d0 	ldrd	r2, [sp]
    11b0:	eb00129a 	bl	5c20 <__aeabi_dmul>
    11b4:	e1a06000 	mov	r6, r0
    11b8:	e1a07001 	mov	r7, r1
    11bc:	e1a00004 	mov	r0, r4
    11c0:	e1a01005 	mov	r1, r5
    11c4:	e1cd20d8 	ldrd	r2, [sp, #8]
    11c8:	eb001294 	bl	5c20 <__aeabi_dmul>
    11cc:	e1a02000 	mov	r2, r0
    11d0:	e1a03001 	mov	r3, r1
    11d4:	e1a00006 	mov	r0, r6
    11d8:	e1a01007 	mov	r1, r7
    11dc:	eb00118b 	bl	5810 <__adddf3>
    11e0:	eb001406 	bl	6200 <__aeabi_d2iz>
    11e4:	e5880000 	str	r0, [r8]

    *x += ORIGIN_X;
    11e8:	e59a3000 	ldr	r3, [r10]
    11ec:	e283309f 	add	r3, r3, #159	; 0x9f
    11f0:	e58a3000 	str	r3, [r10]
    *y += ORIGIN_Y;
    11f4:	e5983000 	ldr	r3, [r8]
    11f8:	e2833077 	add	r3, r3, #119	; 0x77
    11fc:	e5883000 	str	r3, [r8]
}
    1200:	e28dd018 	add	sp, sp, #24
    1204:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}

00001208 <rotate2>:

void rotate2(int *x, int *y, float angle) {
    1208:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
    120c:	e1a07000 	mov	r7, r0
    1210:	e1a06001 	mov	r6, r1
    if (angle <= 0.1)
    1214:	e1a00002 	mov	r0, r2
    1218:	eb001253 	bl	5b6c <__aeabi_f2d>
    121c:	e1a04000 	mov	r4, r0
    1220:	e1a05001 	mov	r5, r1
    1224:	e309299a 	movw	r2, #39322	; 0x999a
    1228:	e3492999 	movt	r2, #39321	; 0x9999
    122c:	e3093999 	movw	r3, #39321	; 0x9999
    1230:	e3433fb9 	movt	r3, #16313	; 0x3fb9
    1234:	eb0013df 	bl	61b8 <__aeabi_dcmple>
    1238:	e3500000 	cmp	r0, #0
    123c:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, r10, pc}
        return;

    int x_ = *x - ORIGIN_X;
    int y_ = *y - ORIGIN_Y;

    angle *= DEG_TO_RAD;
    1240:	e1a00004 	mov	r0, r4
    1244:	e1a01005 	mov	r1, r5
    1248:	e30d2d11 	movw	r2, #56593	; 0xdd11
    124c:	e34a2252 	movt	r2, #41554	; 0xa252
    1250:	e30d3f46 	movw	r3, #57158	; 0xdf46
    1254:	e3433f91 	movt	r3, #16273	; 0x3f91
    1258:	eb001270 	bl	5c20 <__aeabi_dmul>
    125c:	eb0013fe 	bl	625c <__aeabi_d2f>

    float c = cos(angle);
    1260:	eb001241 	bl	5b6c <__aeabi_f2d>
    1264:	e1a04000 	mov	r4, r0
    1268:	e1a05001 	mov	r5, r1
    126c:	eb00078d 	bl	30a8 <cos>
    1270:	eb0013f9 	bl	625c <__aeabi_d2f>
    1274:	e1a0a000 	mov	r10, r0
    float s = sin(angle);
    1278:	e1a00004 	mov	r0, r4
    127c:	e1a01005 	mov	r1, r5
    1280:	eb0007c5 	bl	319c <sin>
    1284:	eb0013f4 	bl	625c <__aeabi_d2f>
    1288:	e1a05000 	mov	r5, r0

void rotate2(int *x, int *y, float angle) {
    if (angle <= 0.1)
        return;

    int x_ = *x - ORIGIN_X;
    128c:	e5970000 	ldr	r0, [r7]

    angle *= DEG_TO_RAD;

    float c = cos(angle);
    float s = sin(angle);
    *x = x_ * c - y_ * s;
    1290:	e240009f 	sub	r0, r0, #159	; 0x9f
    1294:	eb00148c 	bl	64cc <__aeabi_i2f>
    1298:	e1a04000 	mov	r4, r0
void rotate2(int *x, int *y, float angle) {
    if (angle <= 0.1)
        return;

    int x_ = *x - ORIGIN_X;
    int y_ = *y - ORIGIN_Y;
    129c:	e5960000 	ldr	r0, [r6]

    angle *= DEG_TO_RAD;

    float c = cos(angle);
    float s = sin(angle);
    *x = x_ * c - y_ * s;
    12a0:	e2400077 	sub	r0, r0, #119	; 0x77
    12a4:	eb001488 	bl	64cc <__aeabi_i2f>
    12a8:	e1a08000 	mov	r8, r0
    12ac:	e1a00004 	mov	r0, r4
    12b0:	e1a0100a 	mov	r1, r10
    12b4:	eb0014bb 	bl	65a8 <__aeabi_fmul>
    12b8:	e1a09000 	mov	r9, r0
    12bc:	e1a00008 	mov	r0, r8
    12c0:	e1a01005 	mov	r1, r5
    12c4:	eb0014b7 	bl	65a8 <__aeabi_fmul>
    12c8:	e1a01000 	mov	r1, r0
    12cc:	e1a00009 	mov	r0, r9
    12d0:	eb00140b 	bl	6304 <__aeabi_fsub>
    12d4:	eb0015b6 	bl	69b4 <__aeabi_f2iz>
    12d8:	e5870000 	str	r0, [r7]
    *y = y_ * c + x_ * s;
    12dc:	e1a0000a 	mov	r0, r10
    12e0:	e1a01008 	mov	r1, r8
    12e4:	eb0014af 	bl	65a8 <__aeabi_fmul>
    12e8:	e1a08000 	mov	r8, r0
    12ec:	e1a00005 	mov	r0, r5
    12f0:	e1a01004 	mov	r1, r4
    12f4:	eb0014ab 	bl	65a8 <__aeabi_fmul>
    12f8:	e1a01000 	mov	r1, r0
    12fc:	e1a00008 	mov	r0, r8
    1300:	eb001400 	bl	6308 <__addsf3>
    1304:	eb0015aa 	bl	69b4 <__aeabi_f2iz>
    1308:	e5860000 	str	r0, [r6]

    *x += ORIGIN_X;
    130c:	e5973000 	ldr	r3, [r7]
    1310:	e283309f 	add	r3, r3, #159	; 0x9f
    1314:	e5873000 	str	r3, [r7]
    *y += ORIGIN_Y;
    1318:	e5963000 	ldr	r3, [r6]
    131c:	e2833077 	add	r3, r3, #119	; 0x77
    1320:	e5863000 	str	r3, [r6]
    1324:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, r10, pc}

00001328 <turnOnLED>:
}

void turnOnLED(int index) {
    volatile int * ledr = (int *) LEDR_BASE;
    int value = 1 << index;
    value = *ledr | value;
    1328:	e3a03000 	mov	r3, #0
    132c:	e34f3f20 	movt	r3, #65312	; 0xff20
    1330:	e5932000 	ldr	r2, [r3]
    1334:	e3a01001 	mov	r1, #1
    1338:	e1820011 	orr	r0, r2, r1, lsl r0
    *ledr = value;
    133c:	e5830000 	str	r0, [r3]
    1340:	e12fff1e 	bx	lr

00001344 <turnOffLED>:
}

void turnOffLED(int index) {
    volatile int * ledr = (int *) LEDR_BASE;
    int value = 0x3FF;
    int i = 1 << index;
    1344:	e3a03001 	mov	r3, #1
    1348:	e1a00013 	lsl	r0, r3, r0
    value = value ^ i;
    134c:	e2200fff 	eor	r0, r0, #1020	; 0x3fc
    1350:	e2200003 	eor	r0, r0, #3
    value = *ledr & value;
    1354:	e3a03000 	mov	r3, #0
    1358:	e34f3f20 	movt	r3, #65312	; 0xff20
    135c:	e5932000 	ldr	r2, [r3]
    1360:	e0000002 	and	r0, r0, r2
    *ledr = value;
    1364:	e5830000 	str	r0, [r3]
    1368:	e12fff1e 	bx	lr

0000136c <setLED>:
    *x += ORIGIN_X;
    *y += ORIGIN_Y;
}


void setLED(int index, bool value) {
    136c:	e92d4008 	push	{r3, lr}
    if (value)
    1370:	e3510000 	cmp	r1, #0
    1374:	0a000001 	beq	1380 <setLED+0x14>
        turnOnLED(index);
    1378:	ebffffea 	bl	1328 <turnOnLED>
    137c:	e8bd8008 	pop	{r3, pc}
    else
        turnOffLED(index);
    1380:	ebffffef 	bl	1344 <turnOffLED>
    1384:	e8bd8008 	pop	{r3, pc}

00001388 <turnOnAllLED>:
    value = *ledr & value;
    *ledr = value;
}

void turnOnAllLED(){
    *((int *) LEDR_BASE) = 0x3FF;
    1388:	e3a03000 	mov	r3, #0
    138c:	e34f3f20 	movt	r3, #65312	; 0xff20
    1390:	e30023ff 	movw	r2, #1023	; 0x3ff
    1394:	e5832000 	str	r2, [r3]
    1398:	e12fff1e 	bx	lr

0000139c <turnOffAllLED>:
}

void turnOffAllLED() {
    *((int *) LEDR_BASE) = 0;
    139c:	e3a03000 	mov	r3, #0
    13a0:	e34f3f20 	movt	r3, #65312	; 0xff20
    13a4:	e3a02000 	mov	r2, #0
    13a8:	e5832000 	str	r2, [r3]
    13ac:	e12fff1e 	bx	lr

000013b0 <getColor>:
}

short int getColor(short int red, short int green, short int blue) {
    return (red << 11) | (green << 5) | blue;
    13b0:	e1820580 	orr	r0, r2, r0, lsl #11
    13b4:	e1800281 	orr	r0, r0, r1, lsl #5
    13b8:	e6bf0070 	sxth	r0, r0
    13bc:	e12fff1e 	bx	lr

000013c0 <plot_pixel>:
    }

}

void plot_pixel(int x, int y, short int line_color)
{
    13c0:	e92d4070 	push	{r4, r5, r6, lr}
    13c4:	e1a06000 	mov	r6, r0
    13c8:	e1a05001 	mov	r5, r1
    13cc:	e1a04002 	mov	r4, r2
    if (inBounds(x, y))
    13d0:	ebffff0c 	bl	1008 <inBounds>
    13d4:	e3500000 	cmp	r0, #0
    13d8:	08bd8070 	popeq	{r4, r5, r6, pc}
        *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
    13dc:	e3033b1c 	movw	r3, #15132	; 0x3b1c
    13e0:	e3403005 	movt	r3, #5
    13e4:	e5933000 	ldr	r3, [r3]
    13e8:	e1a06086 	lsl	r6, r6, #1
    13ec:	e0835505 	add	r5, r3, r5, lsl #10
    13f0:	e18540b6 	strh	r4, [r5, r6]
    13f4:	e8bd8070 	pop	{r4, r5, r6, pc}

000013f8 <draw_line>:
            plot_char(x, y, clear_char);
        }
    }
}

void draw_line(int x0, int y0, int x1, int y1, short int color) {
    13f8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    13fc:	e24dd014 	sub	sp, sp, #20
    1400:	e58d000c 	str	r0, [sp, #12]
    1404:	e58d1008 	str	r1, [sp, #8]
    1408:	e58d2004 	str	r2, [sp, #4]
    140c:	e58d3000 	str	r3, [sp]
    1410:	e1dda3f8 	ldrsh	r10, [sp, #56]	; 0x38
    bool is_steep;
    if (abs(y1 - y0) > abs(x1 - x0))
    1414:	e0613003 	rsb	r3, r1, r3
    1418:	e3530000 	cmp	r3, #0
    141c:	b2633000 	rsblt	r3, r3, #0
    1420:	e0602002 	rsb	r2, r0, r2
    1424:	e0228fc2 	eor	r8, r2, r2, asr #31
    1428:	e0488fc2 	sub	r8, r8, r2, asr #31
    142c:	e1530008 	cmp	r3, r8
    1430:	d3a08000 	movle	r8, #0
    1434:	c3a08001 	movgt	r8, #1
        is_steep = true;
    else
        is_steep = false;
    if (is_steep) {
    1438:	e3580000 	cmp	r8, #0
    143c:	0a000005 	beq	1458 <draw_line+0x60>
        swap(&x0, &y0);
    1440:	e28d000c 	add	r0, sp, #12
    1444:	e28d1008 	add	r1, sp, #8
    1448:	ebfffee1 	bl	fd4 <swap>
        swap(&x1, &y1);
    144c:	e28d0004 	add	r0, sp, #4
    1450:	e1a0100d 	mov	r1, sp
    1454:	ebfffede 	bl	fd4 <swap>
    }
    if (x0 > x1) {
    1458:	e59d3004 	ldr	r3, [sp, #4]
    145c:	e59d200c 	ldr	r2, [sp, #12]
    1460:	e1520003 	cmp	r2, r3
    1464:	da000005 	ble	1480 <draw_line+0x88>
        swap(&x0, &x1);
    1468:	e28d000c 	add	r0, sp, #12
    146c:	e28d1004 	add	r1, sp, #4
    1470:	ebfffed7 	bl	fd4 <swap>
        swap(&y0, &y1);
    1474:	e28d0008 	add	r0, sp, #8
    1478:	e1a0100d 	mov	r1, sp
    147c:	ebfffed4 	bl	fd4 <swap>
    }
    int deltax = x1 - x0;
    1480:	e59d3004 	ldr	r3, [sp, #4]
    1484:	e59d500c 	ldr	r5, [sp, #12]
    1488:	e0659003 	rsb	r9, r5, r3
    int deltay = abs(y1 - y0);
    148c:	e59d2000 	ldr	r2, [sp]
    1490:	e59d6008 	ldr	r6, [sp, #8]
    1494:	e0667002 	rsb	r7, r6, r2
    1498:	e3570000 	cmp	r7, #0
    149c:	b2677000 	rsblt	r7, r7, #0
    int error = -(deltax / 2);
    14a0:	e0894fa9 	add	r4, r9, r9, lsr #31
    14a4:	e1a040c4 	asr	r4, r4, #1
    14a8:	e2644000 	rsb	r4, r4, #0
    int y = y0;
    int y_step;
    if (y0 < y1)
        y_step = 1;
    14ac:	e1520006 	cmp	r2, r6
    14b0:	d3e0b000 	mvnle	r11, #0
    14b4:	c3a0b001 	movgt	r11, #1
    else
        y_step = -1;

    int x;
    for (x = x0; x <= x1; ++x) {
    14b8:	e1530005 	cmp	r3, r5
    14bc:	ba00000d 	blt	14f8 <draw_line+0x100>
        if (is_steep)
    14c0:	e3580000 	cmp	r8, #0
            plot_pixel(y, x, color);
    14c4:	11a00006 	movne	r0, r6
    14c8:	11a01005 	movne	r1, r5
        else
            plot_pixel(x, y, color);
    14cc:	01a00005 	moveq	r0, r5
    14d0:	01a01006 	moveq	r1, r6
    14d4:	e1a0200a 	mov	r2, r10
    14d8:	ebffffb8 	bl	13c0 <plot_pixel>
        error = error + deltay;
        if (error >= 0) {
    14dc:	e0944007 	adds	r4, r4, r7
            y = y + y_step;
    14e0:	5086600b 	addpl	r6, r6, r11
            error = error - deltax;
    14e4:	50694004 	rsbpl	r4, r9, r4
        y_step = 1;
    else
        y_step = -1;

    int x;
    for (x = x0; x <= x1; ++x) {
    14e8:	e2855001 	add	r5, r5, #1
    14ec:	e59d3004 	ldr	r3, [sp, #4]
    14f0:	e1530005 	cmp	r3, r5
    14f4:	aafffff1 	bge	14c0 <draw_line+0xc8>
            y = y + y_step;
            error = error - deltax;
        }
    }

}
    14f8:	e28dd014 	add	sp, sp, #20
    14fc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00001500 <clear_screen>:
    *(pixel_ctrl_ptr + 1) = 0xC0000000;
    //*(pixel_ctrl_ptr + 1) = 0xC8000000;
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer
}

void clear_screen() {
    1500:	e92d4070 	push	{r4, r5, r6, lr}
    int x_max = 320;
    int y_max = 240;
    int x, y;
    short int black = 0;
    for (x = 0; x < x_max; ++x) {
    1504:	e3a05000 	mov	r5, #0
    *(pixel_ctrl_ptr + 1) = 0xC0000000;
    //*(pixel_ctrl_ptr + 1) = 0xC8000000;
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer
}

void clear_screen() {
    1508:	e1a06005 	mov	r6, r5
    150c:	ea000009 	b	1538 <clear_screen+0x38>
    int y_max = 240;
    int x, y;
    short int black = 0;
    for (x = 0; x < x_max; ++x) {
        for (y = 0; y < y_max; ++y) {
            plot_pixel(x, y, black);
    1510:	e1a00005 	mov	r0, r5
    1514:	e1a01004 	mov	r1, r4
    1518:	e1a02006 	mov	r2, r6
    151c:	ebffffa7 	bl	13c0 <plot_pixel>
    int x_max = 320;
    int y_max = 240;
    int x, y;
    short int black = 0;
    for (x = 0; x < x_max; ++x) {
        for (y = 0; y < y_max; ++y) {
    1520:	e2844001 	add	r4, r4, #1
    1524:	e35400f0 	cmp	r4, #240	; 0xf0
    1528:	1afffff8 	bne	1510 <clear_screen+0x10>
void clear_screen() {
    int x_max = 320;
    int y_max = 240;
    int x, y;
    short int black = 0;
    for (x = 0; x < x_max; ++x) {
    152c:	e2855001 	add	r5, r5, #1
    1530:	e3550d05 	cmp	r5, #320	; 0x140
    1534:	08bd8070 	popeq	{r4, r5, r6, pc}
    *(pixel_ctrl_ptr + 1) = 0xC0000000;
    //*(pixel_ctrl_ptr + 1) = 0xC8000000;
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer
}

void clear_screen() {
    1538:	e1a04006 	mov	r4, r6
    153c:	eafffff3 	b	1510 <clear_screen+0x10>

00001540 <plot_char>:
        *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
}

void plot_char(int x, int y, char c) {
    volatile char * character_buffer = (char *) FPGA_CHAR_BASE;
    int offset = (y << 7) + x;
    1540:	e0801381 	add	r1, r0, r1, lsl #7
    *(character_buffer + offset) = c;
    1544:	e28114c9 	add	r1, r1, #-922746880	; 0xc9000000
    1548:	e5c12000 	strb	r2, [r1]
    154c:	e12fff1e 	bx	lr

00001550 <clear_char_buffer>:
            plot_pixel(x, y, black);
        }
    }
}

void clear_char_buffer() {
    1550:	e92d4070 	push	{r4, r5, r6, lr}
    int x_max = 80;
    int y_max = 60;
    int x, y;
    char clear_char = '\0';
    for (x = 0; x < x_max; ++x) {
    1554:	e3a05000 	mov	r5, #0
            plot_pixel(x, y, black);
        }
    }
}

void clear_char_buffer() {
    1558:	e1a06005 	mov	r6, r5
    155c:	ea000009 	b	1588 <clear_char_buffer+0x38>
    int y_max = 60;
    int x, y;
    char clear_char = '\0';
    for (x = 0; x < x_max; ++x) {
        for (y = 0; y < y_max; ++y) {
            plot_char(x, y, clear_char);
    1560:	e1a00005 	mov	r0, r5
    1564:	e1a01004 	mov	r1, r4
    1568:	e1a02006 	mov	r2, r6
    156c:	ebfffff3 	bl	1540 <plot_char>
    int x_max = 80;
    int y_max = 60;
    int x, y;
    char clear_char = '\0';
    for (x = 0; x < x_max; ++x) {
        for (y = 0; y < y_max; ++y) {
    1570:	e2844001 	add	r4, r4, #1
    1574:	e354003c 	cmp	r4, #60	; 0x3c
    1578:	1afffff8 	bne	1560 <clear_char_buffer+0x10>
void clear_char_buffer() {
    int x_max = 80;
    int y_max = 60;
    int x, y;
    char clear_char = '\0';
    for (x = 0; x < x_max; ++x) {
    157c:	e2855001 	add	r5, r5, #1
    1580:	e3550050 	cmp	r5, #80	; 0x50
    1584:	08bd8070 	popeq	{r4, r5, r6, pc}
            plot_pixel(x, y, black);
        }
    }
}

void clear_char_buffer() {
    1588:	e1a04006 	mov	r4, r6
    158c:	eafffff3 	b	1560 <clear_char_buffer+0x10>

00001590 <plot_text>:
    *(character_buffer + offset) = c;
}

void plot_text(int x, int y, char * text) {
    volatile char * character_buffer = (char *) FPGA_CHAR_BASE;
    int offset = (y << 7) + x;
    1590:	e0801381 	add	r1, r0, r1, lsl #7
    while (*text)
    1594:	e5d23000 	ldrb	r3, [r2]
    1598:	e3530000 	cmp	r3, #0
    159c:	012fff1e 	bxeq	lr
    15a0:	e1a0c002 	mov	r12, r2
    volatile char * character_buffer = (char *) FPGA_CHAR_BASE;
    int offset = (y << 7) + x;
    *(character_buffer + offset) = c;
}

void plot_text(int x, int y, char * text) {
    15a4:	e0622001 	rsb	r2, r2, r1
    15a8:	e28224c9 	add	r2, r2, #-922746880	; 0xc9000000
    volatile char * character_buffer = (char *) FPGA_CHAR_BASE;
    int offset = (y << 7) + x;
    while (*text)
        *(character_buffer + offset++) = *(text++);
    15ac:	e7c2300c 	strb	r3, [r2, r12]
}

void plot_text(int x, int y, char * text) {
    volatile char * character_buffer = (char *) FPGA_CHAR_BASE;
    int offset = (y << 7) + x;
    while (*text)
    15b0:	e5fc3001 	ldrb	r3, [r12, #1]!
    15b4:	e3530000 	cmp	r3, #0
    15b8:	1afffffb 	bne	15ac <plot_text+0x1c>
    15bc:	e12fff1e 	bx	lr

000015c0 <plot_double_pixel>:
    }

}

void plot_double_pixel(int x, int y, short int line_color)
{
    15c0:	e92d4070 	push	{r4, r5, r6, lr}
    15c4:	e1a04000 	mov	r4, r0
    15c8:	e1a05001 	mov	r5, r1
    15cc:	e1a06002 	mov	r6, r2
    if (inBounds(x, y))
    15d0:	ebfffe8c 	bl	1008 <inBounds>
    15d4:	e3500000 	cmp	r0, #0
    15d8:	0a000005 	beq	15f4 <plot_double_pixel+0x34>
        *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
    15dc:	e3033b1c 	movw	r3, #15132	; 0x3b1c
    15e0:	e3403005 	movt	r3, #5
    15e4:	e5932000 	ldr	r2, [r3]
    15e8:	e1a03084 	lsl	r3, r4, #1
    15ec:	e0822505 	add	r2, r2, r5, lsl #10
    15f0:	e18260b3 	strh	r6, [r2, r3]
    if (inBounds(x, y+1))
    15f4:	e2855001 	add	r5, r5, #1
    15f8:	e1a00004 	mov	r0, r4
    15fc:	e1a01005 	mov	r1, r5
    1600:	ebfffe80 	bl	1008 <inBounds>
    1604:	e3500000 	cmp	r0, #0
    1608:	08bd8070 	popeq	{r4, r5, r6, pc}
        *(short int *)(pixel_buffer_start + ((y+1) << 10) + (x << 1)) = line_color;
    160c:	e3033b1c 	movw	r3, #15132	; 0x3b1c
    1610:	e3403005 	movt	r3, #5
    1614:	e5933000 	ldr	r3, [r3]
    1618:	e1a04084 	lsl	r4, r4, #1
    161c:	e0835505 	add	r5, r3, r5, lsl #10
    1620:	e18560b4 	strh	r6, [r5, r4]
    1624:	e8bd8070 	pop	{r4, r5, r6, pc}

00001628 <draw_double_line>:
    int offset = (y << 7) + x;
    while (*text)
        *(character_buffer + offset++) = *(text++);
}

void draw_double_line(int x0, int y0, int x1, int y1, short int color) {
    1628:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    162c:	e24dd014 	sub	sp, sp, #20
    1630:	e58d000c 	str	r0, [sp, #12]
    1634:	e58d1008 	str	r1, [sp, #8]
    1638:	e58d2004 	str	r2, [sp, #4]
    163c:	e58d3000 	str	r3, [sp]
    1640:	e1dda3f8 	ldrsh	r10, [sp, #56]	; 0x38
    bool is_steep;
    if (abs(y1 - y0) > abs(x1 - x0))
    1644:	e0613003 	rsb	r3, r1, r3
    1648:	e3530000 	cmp	r3, #0
    164c:	b2633000 	rsblt	r3, r3, #0
    1650:	e0602002 	rsb	r2, r0, r2
    1654:	e0228fc2 	eor	r8, r2, r2, asr #31
    1658:	e0488fc2 	sub	r8, r8, r2, asr #31
    165c:	e1530008 	cmp	r3, r8
    1660:	d3a08000 	movle	r8, #0
    1664:	c3a08001 	movgt	r8, #1
        is_steep = true;
    else
        is_steep = false;
    if (is_steep) {
    1668:	e3580000 	cmp	r8, #0
    166c:	0a000005 	beq	1688 <draw_double_line+0x60>
        swap(&x0, &y0);
    1670:	e28d000c 	add	r0, sp, #12
    1674:	e28d1008 	add	r1, sp, #8
    1678:	ebfffe55 	bl	fd4 <swap>
        swap(&x1, &y1);
    167c:	e28d0004 	add	r0, sp, #4
    1680:	e1a0100d 	mov	r1, sp
    1684:	ebfffe52 	bl	fd4 <swap>
    }
    if (x0 > x1) {
    1688:	e59d3004 	ldr	r3, [sp, #4]
    168c:	e59d200c 	ldr	r2, [sp, #12]
    1690:	e1520003 	cmp	r2, r3
    1694:	da000005 	ble	16b0 <draw_double_line+0x88>
        swap(&x0, &x1);
    1698:	e28d000c 	add	r0, sp, #12
    169c:	e28d1004 	add	r1, sp, #4
    16a0:	ebfffe4b 	bl	fd4 <swap>
        swap(&y0, &y1);
    16a4:	e28d0008 	add	r0, sp, #8
    16a8:	e1a0100d 	mov	r1, sp
    16ac:	ebfffe48 	bl	fd4 <swap>
    }
    int deltax = x1 - x0;
    16b0:	e59d3004 	ldr	r3, [sp, #4]
    16b4:	e59d500c 	ldr	r5, [sp, #12]
    16b8:	e0659003 	rsb	r9, r5, r3
    int deltay = abs(y1 - y0);
    16bc:	e59d2000 	ldr	r2, [sp]
    16c0:	e59d6008 	ldr	r6, [sp, #8]
    16c4:	e0667002 	rsb	r7, r6, r2
    16c8:	e3570000 	cmp	r7, #0
    16cc:	b2677000 	rsblt	r7, r7, #0
    int error = -(deltax / 2);
    16d0:	e0894fa9 	add	r4, r9, r9, lsr #31
    16d4:	e1a040c4 	asr	r4, r4, #1
    16d8:	e2644000 	rsb	r4, r4, #0
    int y = y0;
    int y_step;
    if (y0 < y1)
        y_step = 1;
    16dc:	e1520006 	cmp	r2, r6
    16e0:	d3e0b000 	mvnle	r11, #0
    16e4:	c3a0b001 	movgt	r11, #1
    else
        y_step = -1;

    int x;
    for (x = x0; x <= x1; ++x) {
    16e8:	e1530005 	cmp	r3, r5
    16ec:	ba00000d 	blt	1728 <draw_double_line+0x100>
        if (is_steep)
    16f0:	e3580000 	cmp	r8, #0
            plot_double_pixel(y, x, color);
    16f4:	11a00006 	movne	r0, r6
    16f8:	11a01005 	movne	r1, r5
        else
            plot_double_pixel(x, y, color);
    16fc:	01a00005 	moveq	r0, r5
    1700:	01a01006 	moveq	r1, r6
    1704:	e1a0200a 	mov	r2, r10
    1708:	ebffffac 	bl	15c0 <plot_double_pixel>
        error = error + deltay;
        if (error >= 0) {
    170c:	e0944007 	adds	r4, r4, r7
            y = y + y_step;
    1710:	5086600b 	addpl	r6, r6, r11
            error = error - deltax;
    1714:	50694004 	rsbpl	r4, r9, r4
        y_step = 1;
    else
        y_step = -1;

    int x;
    for (x = x0; x <= x1; ++x) {
    1718:	e2855001 	add	r5, r5, #1
    171c:	e59d3004 	ldr	r3, [sp, #4]
    1720:	e1530005 	cmp	r3, r5
    1724:	aafffff1 	bge	16f0 <draw_double_line+0xc8>
            y = y + y_step;
            error = error - deltax;
        }
    }

}
    1728:	e28dd014 	add	sp, sp, #20
    172c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00001730 <plot_triple_pixel>:
    }

}

void plot_triple_pixel(int x, int y, short int line_color)
{
    1730:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    1734:	e1a06000 	mov	r6, r0
    1738:	e1a04001 	mov	r4, r1
    173c:	e1a05002 	mov	r5, r2
    if (inBoundsY(y))
    1740:	e1a00001 	mov	r0, r1
    1744:	ebfffe2b 	bl	ff8 <inBoundsY>
    1748:	e3500000 	cmp	r0, #0
    174c:	0a000005 	beq	1768 <plot_triple_pixel+0x38>
        *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
    1750:	e3033b1c 	movw	r3, #15132	; 0x3b1c
    1754:	e3403005 	movt	r3, #5
    1758:	e5932000 	ldr	r2, [r3]
    175c:	e1a03086 	lsl	r3, r6, #1
    1760:	e0822504 	add	r2, r2, r4, lsl #10
    1764:	e18250b3 	strh	r5, [r2, r3]
    if (inBoundsY(y+1))
    1768:	e2847001 	add	r7, r4, #1
    176c:	e1a00007 	mov	r0, r7
    1770:	ebfffe20 	bl	ff8 <inBoundsY>
    1774:	e3500000 	cmp	r0, #0
    1778:	0a000005 	beq	1794 <plot_triple_pixel+0x64>
        *(short int *)(pixel_buffer_start + ((y+1) << 10) + (x << 1)) = line_color;
    177c:	e3033b1c 	movw	r3, #15132	; 0x3b1c
    1780:	e3403005 	movt	r3, #5
    1784:	e5932000 	ldr	r2, [r3]
    1788:	e1a03086 	lsl	r3, r6, #1
    178c:	e0827507 	add	r7, r2, r7, lsl #10
    1790:	e18750b3 	strh	r5, [r7, r3]
    if (inBoundsY(y-1))
    1794:	e2444001 	sub	r4, r4, #1
    1798:	e1a00004 	mov	r0, r4
    179c:	ebfffe15 	bl	ff8 <inBoundsY>
    17a0:	e3500000 	cmp	r0, #0
    17a4:	08bd80f8 	popeq	{r3, r4, r5, r6, r7, pc}
        *(short int *)(pixel_buffer_start + ((y-1) << 10) + (x << 1)) = line_color;
    17a8:	e3033b1c 	movw	r3, #15132	; 0x3b1c
    17ac:	e3403005 	movt	r3, #5
    17b0:	e5933000 	ldr	r3, [r3]
    17b4:	e1a06086 	lsl	r6, r6, #1
    17b8:	e0834504 	add	r4, r3, r4, lsl #10
    17bc:	e18450b6 	strh	r5, [r4, r6]
    17c0:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

000017c4 <draw_triple_line>:
        *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
    if (inBounds(x, y+1))
        *(short int *)(pixel_buffer_start + ((y+1) << 10) + (x << 1)) = line_color;
}

void draw_triple_line(int x0, int y0, int x1, int y1, short int color) {
    17c4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    17c8:	e24dd014 	sub	sp, sp, #20
    17cc:	e58d000c 	str	r0, [sp, #12]
    17d0:	e58d1008 	str	r1, [sp, #8]
    17d4:	e58d2004 	str	r2, [sp, #4]
    17d8:	e58d3000 	str	r3, [sp]
    17dc:	e1dda3f8 	ldrsh	r10, [sp, #56]	; 0x38
    bool is_steep;
    if (abs(y1 - y0) > abs(x1 - x0))
    17e0:	e0613003 	rsb	r3, r1, r3
    17e4:	e3530000 	cmp	r3, #0
    17e8:	b2633000 	rsblt	r3, r3, #0
    17ec:	e0602002 	rsb	r2, r0, r2
    17f0:	e0228fc2 	eor	r8, r2, r2, asr #31
    17f4:	e0488fc2 	sub	r8, r8, r2, asr #31
    17f8:	e1530008 	cmp	r3, r8
    17fc:	d3a08000 	movle	r8, #0
    1800:	c3a08001 	movgt	r8, #1
        is_steep = true;
    else
        is_steep = false;
    if (is_steep) {
    1804:	e3580000 	cmp	r8, #0
    1808:	0a000005 	beq	1824 <draw_triple_line+0x60>
        swap(&x0, &y0);
    180c:	e28d000c 	add	r0, sp, #12
    1810:	e28d1008 	add	r1, sp, #8
    1814:	ebfffdee 	bl	fd4 <swap>
        swap(&x1, &y1);
    1818:	e28d0004 	add	r0, sp, #4
    181c:	e1a0100d 	mov	r1, sp
    1820:	ebfffdeb 	bl	fd4 <swap>
    }
    if (x0 > x1) {
    1824:	e59d3004 	ldr	r3, [sp, #4]
    1828:	e59d200c 	ldr	r2, [sp, #12]
    182c:	e1520003 	cmp	r2, r3
    1830:	da000005 	ble	184c <draw_triple_line+0x88>
        swap(&x0, &x1);
    1834:	e28d000c 	add	r0, sp, #12
    1838:	e28d1004 	add	r1, sp, #4
    183c:	ebfffde4 	bl	fd4 <swap>
        swap(&y0, &y1);
    1840:	e28d0008 	add	r0, sp, #8
    1844:	e1a0100d 	mov	r1, sp
    1848:	ebfffde1 	bl	fd4 <swap>
    }
    int deltax = x1 - x0;
    184c:	e59d3004 	ldr	r3, [sp, #4]
    1850:	e59d500c 	ldr	r5, [sp, #12]
    1854:	e0659003 	rsb	r9, r5, r3
    int deltay = abs(y1 - y0);
    1858:	e59d2000 	ldr	r2, [sp]
    185c:	e59d6008 	ldr	r6, [sp, #8]
    1860:	e0667002 	rsb	r7, r6, r2
    1864:	e3570000 	cmp	r7, #0
    1868:	b2677000 	rsblt	r7, r7, #0
    int error = -(deltax / 2);
    186c:	e0894fa9 	add	r4, r9, r9, lsr #31
    1870:	e1a040c4 	asr	r4, r4, #1
    1874:	e2644000 	rsb	r4, r4, #0
    int y = y0;
    int y_step;
    if (y0 < y1)
        y_step = 1;
    1878:	e1520006 	cmp	r2, r6
    187c:	d3e0b000 	mvnle	r11, #0
    1880:	c3a0b001 	movgt	r11, #1
    else
        y_step = -1;

    int x;
    for (x = x0; x <= x1; ++x) {
    1884:	e1530005 	cmp	r3, r5
    1888:	ba00000d 	blt	18c4 <draw_triple_line+0x100>
        if (is_steep)
    188c:	e3580000 	cmp	r8, #0
            plot_triple_pixel(y, x, color);
    1890:	11a00006 	movne	r0, r6
    1894:	11a01005 	movne	r1, r5
        else
            plot_triple_pixel(x, y, color);
    1898:	01a00005 	moveq	r0, r5
    189c:	01a01006 	moveq	r1, r6
    18a0:	e1a0200a 	mov	r2, r10
    18a4:	ebffffa1 	bl	1730 <plot_triple_pixel>
        error = error + deltay;
        if (error >= 0) {
    18a8:	e0944007 	adds	r4, r4, r7
            y = y + y_step;
    18ac:	5086600b 	addpl	r6, r6, r11
            error = error - deltax;
    18b0:	50694004 	rsbpl	r4, r9, r4
        y_step = 1;
    else
        y_step = -1;

    int x;
    for (x = x0; x <= x1; ++x) {
    18b4:	e2855001 	add	r5, r5, #1
    18b8:	e59d3004 	ldr	r3, [sp, #4]
    18bc:	e1530005 	cmp	r3, r5
    18c0:	aafffff1 	bge	188c <draw_triple_line+0xc8>
            y = y + y_step;
            error = error - deltax;
        }
    }

}
    18c4:	e28dd014 	add	sp, sp, #20
    18c8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

000018cc <wait_for_vsync>:
    if (inBoundsY(y-1))
        *(short int *)(pixel_buffer_start + ((y-1) << 10) + (x << 1)) = line_color;
}

void wait_for_vsync() {
    *pixel_ctrl_ptr = 1;
    18cc:	e3083280 	movw	r3, #33408	; 0x8280
    18d0:	e3403000 	movt	r3, #0
    18d4:	e5932000 	ldr	r2, [r3]
    18d8:	e3a01001 	mov	r1, #1
    18dc:	e5821000 	str	r1, [r2]
    while ((*(pixel_ctrl_ptr + 3) & 1) == 1);
    18e0:	e5932000 	ldr	r2, [r3]
    18e4:	e592300c 	ldr	r3, [r2, #12]
    18e8:	e3130001 	tst	r3, #1
    18ec:	1afffffc 	bne	18e4 <wait_for_vsync+0x18>
}
    18f0:	e12fff1e 	bx	lr

000018f4 <init_vga>:
#include "address_map_arm.h"

volatile int pixel_buffer_start;
volatile int * pixel_ctrl_ptr = (int *)PIXEL_BUF_CTRL_BASE;

void init_vga() {
    18f4:	e92d4038 	push	{r3, r4, r5, lr}
    /* set front pixel buffer to start of FPGA On-chip memory */
    *(pixel_ctrl_ptr + 1) = 0xC8000000; // first store the address in the
    18f8:	e3084280 	movw	r4, #33408	; 0x8280
    18fc:	e3404000 	movt	r4, #0
    1900:	e5943000 	ldr	r3, [r4]
    1904:	e3a02332 	mov	r2, #-939524096	; 0xc8000000
    1908:	e5832004 	str	r2, [r3, #4]
    // back buffer

    /* now, swap the front/back buffers, to set the front buffer location */
    wait_for_vsync();
    190c:	ebffffee 	bl	18cc <wait_for_vsync>

    /* initialize a pointer to the pixel buffer, used by drawing functions */
    pixel_buffer_start = *pixel_ctrl_ptr;
    1910:	e5943000 	ldr	r3, [r4]
    1914:	e5933000 	ldr	r3, [r3]
    1918:	e3035b1c 	movw	r5, #15132	; 0x3b1c
    191c:	e3405005 	movt	r5, #5
    1920:	e5853000 	str	r3, [r5]
    clear_screen(); // pixel_buffer_start points to the pixel buffer
    1924:	ebfffef5 	bl	1500 <clear_screen>

    /* set back pixel buffer to start of SDRAM memory */
    *(pixel_ctrl_ptr + 1) = 0xC0000000;
    1928:	e5943000 	ldr	r3, [r4]
    192c:	e3a02103 	mov	r2, #-1073741824	; 0xc0000000
    1930:	e5832004 	str	r2, [r3, #4]
    //*(pixel_ctrl_ptr + 1) = 0xC8000000;
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer
    1934:	e5933004 	ldr	r3, [r3, #4]
    1938:	e5853000 	str	r3, [r5]
    193c:	e8bd8038 	pop	{r3, r4, r5, pc}

00001940 <init_hexagon>:
#include <stdlib.h>

const int rotation_speeds_size = 12;
float rotation_speeds[] = { 1, 1, 1, 2, 2, 3, 1, 1, 1, 2, 2, 3 };

void init_hexagon(Hexagon* hex, int missing_segment, int y, int height, int speed, short int color) {
    1940:	e92d45f0 	push	{r4, r5, r6, r7, r8, r10, lr}
    1944:	e24dd00c 	sub	sp, sp, #12
    1948:	e1a05000 	mov	r5, r0
    194c:	e1a0a002 	mov	r10, r2
    1950:	e1a08003 	mov	r8, r3
    1954:	e59d7028 	ldr	r7, [sp, #40]	; 0x28
    1958:	e1dd62fc 	ldrsh	r6, [sp, #44]	; 0x2c
    hex->missing_segment = missing_segment;
    195c:	e5801090 	str	r1, [r0, #144]	; 0x90
    hex->y = y;
    1960:	e5852094 	str	r2, [r5, #148]	; 0x94
    hex->height = height;
    1964:	e5853098 	str	r3, [r5, #152]	; 0x98
    hex->speed = speed;
    1968:	e580709c 	str	r7, [r0, #156]	; 0x9c
    hex->rotation = 0;
    196c:	e3a03000 	mov	r3, #0
    1970:	e58030a0 	str	r3, [r0, #160]	; 0xa0
    hex->rotation_speed = 0;
    1974:	e58030a4 	str	r3, [r0, #164]	; 0xa4
    hex->color = color;
    1978:	e1c06ab8 	strh	r6, [r0, #168]	; 0xa8
    int i;
    for (i=0; i<6; ++i) {
    197c:	e3a04000 	mov	r4, #0
        init_segment(&hex->segments[i], i, y, height, speed, color);
    1980:	e0840084 	add	r0, r4, r4, lsl #1
    1984:	e58d7000 	str	r7, [sp]
    1988:	e58d6004 	str	r6, [sp, #4]
    198c:	e0850180 	add	r0, r5, r0, lsl #3
    1990:	e1a01004 	mov	r1, r4
    1994:	e1a0200a 	mov	r2, r10
    1998:	e1a03008 	mov	r3, r8
    199c:	ebfffd2e 	bl	e5c <init_segment>
    hex->speed = speed;
    hex->rotation = 0;
    hex->rotation_speed = 0;
    hex->color = color;
    int i;
    for (i=0; i<6; ++i) {
    19a0:	e2844001 	add	r4, r4, #1
    19a4:	e3540006 	cmp	r4, #6
    19a8:	1afffff4 	bne	1980 <init_hexagon+0x40>
        init_segment(&hex->segments[i], i, y, height, speed, color);
    }
}
    19ac:	e28dd00c 	add	sp, sp, #12
    19b0:	e8bd85f0 	pop	{r4, r5, r6, r7, r8, r10, pc}

000019b4 <set_hexagon_speed>:
void decrease_hexagon_speed(Hexagon* hex, int value) {
    set_hexagon_speed(hex, hex->speed - value);
}

void set_hexagon_speed(Hexagon* hex, int value) {
    hex->speed = value;
    19b4:	e580109c 	str	r1, [r0, #156]	; 0x9c
    int i;
    for (i=0; i<6; ++i) {
        //if (i != hex->missing_segment)
            hex->segments[i].speed = value;
    19b8:	e580100c 	str	r1, [r0, #12]
    19bc:	e5801024 	str	r1, [r0, #36]	; 0x24
    19c0:	e580103c 	str	r1, [r0, #60]	; 0x3c
    19c4:	e5801054 	str	r1, [r0, #84]	; 0x54
    19c8:	e580106c 	str	r1, [r0, #108]	; 0x6c
    19cc:	e5801084 	str	r1, [r0, #132]	; 0x84
    19d0:	e12fff1e 	bx	lr

000019d4 <decrease_hexagon_speed>:

void increase_hexagon_speed(Hexagon* hex, int value) {
    set_hexagon_speed(hex, hex->speed + value);
}

void decrease_hexagon_speed(Hexagon* hex, int value) {
    19d4:	e92d4008 	push	{r3, lr}
    set_hexagon_speed(hex, hex->speed - value);
    19d8:	e590309c 	ldr	r3, [r0, #156]	; 0x9c
    19dc:	e0611003 	rsb	r1, r1, r3
    19e0:	ebfffff3 	bl	19b4 <set_hexagon_speed>
    19e4:	e8bd8008 	pop	{r3, pc}

000019e8 <increase_hexagon_speed>:
    }
}

// **************   Hexagon Speed Setting Operations    ************** //

void increase_hexagon_speed(Hexagon* hex, int value) {
    19e8:	e92d4008 	push	{r3, lr}
    set_hexagon_speed(hex, hex->speed + value);
    19ec:	e590309c 	ldr	r3, [r0, #156]	; 0x9c
    19f0:	e0811003 	add	r1, r1, r3
    19f4:	ebffffee 	bl	19b4 <set_hexagon_speed>
    19f8:	e8bd8008 	pop	{r3, pc}

000019fc <set_hexagon_y>:
}

// **************   Hexagon Y Setting Operations    ************** //

void set_hexagon_y(Hexagon* hex, int value) {
    hex->y = value;
    19fc:	e5801094 	str	r1, [r0, #148]	; 0x94
    int i;
    for (i=0; i<6; ++i) {
        //if (i != hex->missing_segment)
            hex->segments[i].y = value;
    1a00:	e5801000 	str	r1, [r0]
    1a04:	e5801018 	str	r1, [r0, #24]
    1a08:	e5801030 	str	r1, [r0, #48]	; 0x30
    1a0c:	e5801048 	str	r1, [r0, #72]	; 0x48
    1a10:	e5801060 	str	r1, [r0, #96]	; 0x60
    1a14:	e5801078 	str	r1, [r0, #120]	; 0x78
    1a18:	e12fff1e 	bx	lr

00001a1c <increase_hexagon_y>:
    }
}

void increase_hexagon_y(Hexagon* hex, int value) {
    1a1c:	e92d4008 	push	{r3, lr}
    set_hexagon_y(hex, hex->y + value);
    1a20:	e5903094 	ldr	r3, [r0, #148]	; 0x94
    1a24:	e0811003 	add	r1, r1, r3
    1a28:	ebfffff3 	bl	19fc <set_hexagon_y>
    1a2c:	e8bd8008 	pop	{r3, pc}

00001a30 <decrease_hexagon_y>:
}

void decrease_hexagon_y(Hexagon* hex, int value) {
    1a30:	e92d4008 	push	{r3, lr}
    set_hexagon_y(hex, hex->y - value);
    1a34:	e5903094 	ldr	r3, [r0, #148]	; 0x94
    1a38:	e0611003 	rsb	r1, r1, r3
    1a3c:	ebffffee 	bl	19fc <set_hexagon_y>
    1a40:	e8bd8008 	pop	{r3, pc}

00001a44 <set_hexagon_height>:
}

// **************   Hexagon Height Setting Operations    ************** //

void set_hexagon_height(Hexagon* hex, int value) {
    hex->height = value;
    1a44:	e5801098 	str	r1, [r0, #152]	; 0x98
    int i;
    for (i=0; i<6; ++i) {
        //if (i != hex->missing_segment)
            hex->segments[i].height = value;
    1a48:	e5801004 	str	r1, [r0, #4]
    1a4c:	e580101c 	str	r1, [r0, #28]
    1a50:	e5801034 	str	r1, [r0, #52]	; 0x34
    1a54:	e580104c 	str	r1, [r0, #76]	; 0x4c
    1a58:	e5801064 	str	r1, [r0, #100]	; 0x64
    1a5c:	e580107c 	str	r1, [r0, #124]	; 0x7c
    1a60:	e12fff1e 	bx	lr

00001a64 <increase_hexagon_height>:
    }
}

void increase_hexagon_height(Hexagon* hex, int value) {
    1a64:	e92d4008 	push	{r3, lr}
    set_hexagon_height(hex, hex->height + value);
    1a68:	e5903098 	ldr	r3, [r0, #152]	; 0x98
    1a6c:	e0811003 	add	r1, r1, r3
    1a70:	ebfffff3 	bl	1a44 <set_hexagon_height>
    1a74:	e8bd8008 	pop	{r3, pc}

00001a78 <decrease_hexagon_height>:
}

void decrease_hexagon_height(Hexagon* hex, int value) {
    1a78:	e92d4008 	push	{r3, lr}
    set_hexagon_height(hex, hex->height - value);
    1a7c:	e5903098 	ldr	r3, [r0, #152]	; 0x98
    1a80:	e0611003 	rsb	r1, r1, r3
    1a84:	ebffffee 	bl	1a44 <set_hexagon_height>
    1a88:	e8bd8008 	pop	{r3, pc}

00001a8c <set_hexagon_rotation_speed>:
}

// **************   Hexagon Rotation Setting Operations    ************** //

void set_hexagon_rotation_speed(Hexagon* hex, float value) {
    if (!SETTINGS.HEXAGON_ROTATE || SETTINGS.CONTROL_SCHEME == DISCRETE)
    1a8c:	e3033b20 	movw	r3, #15136	; 0x3b20
    1a90:	e3403005 	movt	r3, #5
    1a94:	e5d3300c 	ldrb	r3, [r3, #12]
    1a98:	e3530000 	cmp	r3, #0
        value = 0;
    1a9c:	03a01000 	moveq	r1, #0
}

// **************   Hexagon Rotation Setting Operations    ************** //

void set_hexagon_rotation_speed(Hexagon* hex, float value) {
    if (!SETTINGS.HEXAGON_ROTATE || SETTINGS.CONTROL_SCHEME == DISCRETE)
    1aa0:	0a000004 	beq	1ab8 <set_hexagon_rotation_speed+0x2c>
    1aa4:	e3033b20 	movw	r3, #15136	; 0x3b20
    1aa8:	e3403005 	movt	r3, #5
    1aac:	e5d33016 	ldrb	r3, [r3, #22]
    1ab0:	e3530000 	cmp	r3, #0
        value = 0;
    1ab4:	03a01000 	moveq	r1, #0
    hex->rotation_speed = value;
    1ab8:	e58010a4 	str	r1, [r0, #164]	; 0xa4
    1abc:	e12fff1e 	bx	lr

00001ac0 <set_hexagon_rotation>:
    //for (i=0; i<6; ++i) {
    //    hex->segments[i].rotation_speed = value;
    //}
}

void set_hexagon_rotation(Hexagon* hex, float value) {
    1ac0:	e92d4038 	push	{r3, r4, r5, lr}
    1ac4:	e1a05000 	mov	r5, r0
    1ac8:	e1a04001 	mov	r4, r1
    if (!SETTINGS.HEXAGON_ROTATE || SETTINGS.CONTROL_SCHEME == DISCRETE)
    1acc:	e3033b20 	movw	r3, #15136	; 0x3b20
    1ad0:	e3403005 	movt	r3, #5
    1ad4:	e5d3300c 	ldrb	r3, [r3, #12]
    1ad8:	e3530000 	cmp	r3, #0
    1adc:	03a04000 	moveq	r4, #0
    1ae0:	0a00001b 	beq	1b54 <set_hexagon_rotation+0x94>
    1ae4:	e3033b20 	movw	r3, #15136	; 0x3b20
    1ae8:	e3403005 	movt	r3, #5
    1aec:	e5d33016 	ldrb	r3, [r3, #22]
    1af0:	e3530000 	cmp	r3, #0
    1af4:	03a04000 	moveq	r4, #0
    1af8:	0a000015 	beq	1b54 <set_hexagon_rotation+0x94>
        value = 0;
    if (value >= 360)
    1afc:	e1a00004 	mov	r0, r4
    1b00:	e3a01000 	mov	r1, #0
    1b04:	e34413b4 	movt	r1, #17332	; 0x43b4
    1b08:	eb00139d 	bl	6984 <__aeabi_fcmpge>
    1b0c:	e3500000 	cmp	r0, #0
    1b10:	0a000004 	beq	1b28 <set_hexagon_rotation+0x68>
        value -= 360;
    1b14:	e1a00004 	mov	r0, r4
    1b18:	e3a01000 	mov	r1, #0
    1b1c:	e34413b4 	movt	r1, #17332	; 0x43b4
    1b20:	eb0011f7 	bl	6304 <__aeabi_fsub>
    1b24:	e1a04000 	mov	r4, r0
    if (value < 0)
    1b28:	e1a00004 	mov	r0, r4
    1b2c:	e3a01000 	mov	r1, #0
    1b30:	eb001387 	bl	6954 <__aeabi_fcmplt>
    1b34:	e3500000 	cmp	r0, #0
    1b38:	0a000005 	beq	1b54 <set_hexagon_rotation+0x94>
        value += 360;
    1b3c:	e1a00004 	mov	r0, r4
    1b40:	e3a01000 	mov	r1, #0
    1b44:	e34413b4 	movt	r1, #17332	; 0x43b4
    1b48:	eb0011ee 	bl	6308 <__addsf3>
    1b4c:	e1a04000 	mov	r4, r0
    1b50:	eaffffff 	b	1b54 <set_hexagon_rotation+0x94>
    hex->rotation = value;
    1b54:	e58540a0 	str	r4, [r5, #160]	; 0xa0
    int i;
    for (i=0; i<6; ++i) {
        hex->segments[i].rotation = value;
    1b58:	e5854010 	str	r4, [r5, #16]
    1b5c:	e5854028 	str	r4, [r5, #40]	; 0x28
    1b60:	e5854040 	str	r4, [r5, #64]	; 0x40
    1b64:	e5854058 	str	r4, [r5, #88]	; 0x58
    1b68:	e5854070 	str	r4, [r5, #112]	; 0x70
    1b6c:	e5854088 	str	r4, [r5, #136]	; 0x88
    1b70:	e8bd8038 	pop	{r3, r4, r5, pc}

00001b74 <increase_hexagon_rotation>:
    }
}

void increase_hexagon_rotation(Hexagon* hex, float value) {
    1b74:	e92d4010 	push	{r4, lr}
    1b78:	e1a04000 	mov	r4, r0
    set_hexagon_rotation(hex, hex->rotation + value);
    1b7c:	e1a00001 	mov	r0, r1
    1b80:	e59410a0 	ldr	r1, [r4, #160]	; 0xa0
    1b84:	eb0011df 	bl	6308 <__addsf3>
    1b88:	e1a01000 	mov	r1, r0
    1b8c:	e1a00004 	mov	r0, r4
    1b90:	ebffffca 	bl	1ac0 <set_hexagon_rotation>
    1b94:	e8bd8010 	pop	{r4, pc}

00001b98 <decrease_hexagon_rotation>:
}

void decrease_hexagon_rotation(Hexagon* hex, float value) {
    1b98:	e92d4010 	push	{r4, lr}
    1b9c:	e1a04000 	mov	r4, r0
    set_hexagon_rotation(hex, hex->rotation - value);
    1ba0:	e59000a0 	ldr	r0, [r0, #160]	; 0xa0
    1ba4:	eb0011d6 	bl	6304 <__aeabi_fsub>
    1ba8:	e1a01000 	mov	r1, r0
    1bac:	e1a00004 	mov	r0, r4
    1bb0:	ebffffc2 	bl	1ac0 <set_hexagon_rotation>
    1bb4:	e8bd8010 	pop	{r4, pc}

00001bb8 <set_hexagon_color>:
}

// **************   Hexagon Color Setting Operations    ************** //

void set_hexagon_color(Hexagon* hex, short int color) {
    hex->color = color;
    1bb8:	e1c01ab8 	strh	r1, [r0, #168]	; 0xa8
    int i;
    for (i=0; i<6; ++i) {
        //if (i != hex->missing_segment)
            hex->segments[i].color = color;
    1bbc:	e1c011b4 	strh	r1, [r0, #20]
    1bc0:	e1c012bc 	strh	r1, [r0, #44]	; 0x2c
    1bc4:	e1c014b4 	strh	r1, [r0, #68]	; 0x44
    1bc8:	e1c015bc 	strh	r1, [r0, #92]	; 0x5c
    1bcc:	e1c017b4 	strh	r1, [r0, #116]	; 0x74
    1bd0:	e1c018bc 	strh	r1, [r0, #140]	; 0x8c
    1bd4:	e12fff1e 	bx	lr

00001bd8 <update_hexagon>:
    }
}

// **************   Hexagon Update Operations    ************** //

void update_hexagon(Hexagon* hex) {
    1bd8:	e92d4070 	push	{r4, r5, r6, lr}
    1bdc:	e1a04000 	mov	r4, r0
    //if ((hex->y - hex->height) <= ORIGIN_PADDING) {
    if ((hex->y - hex->height) <= 0) {
    1be0:	e5902094 	ldr	r2, [r0, #148]	; 0x94
    1be4:	e5903098 	ldr	r3, [r0, #152]	; 0x98
    1be8:	e0633002 	rsb	r3, r3, r2
    1bec:	e3530000 	cmp	r3, #0
    1bf0:	ca000030 	bgt	1cb8 <update_hexagon+0xe0>
        hex->missing_segment = rand() % 6;
    1bf4:	eb001428 	bl	6c9c <rand>
    1bf8:	e30a3aab 	movw	r3, #43691	; 0xaaab
    1bfc:	e3423aaa 	movt	r3, #10922	; 0x2aaa
    1c00:	e0c31093 	smull	r1, r3, r3, r0
    1c04:	e0433fc0 	sub	r3, r3, r0, asr #31
    1c08:	e0833083 	add	r3, r3, r3, lsl #1
    1c0c:	e0400083 	sub	r0, r0, r3, lsl #1
    1c10:	e5840090 	str	r0, [r4, #144]	; 0x90
        set_hexagon_y(hex, ORIGIN_Y);
    1c14:	e1a00004 	mov	r0, r4
    1c18:	e3a01077 	mov	r1, #119	; 0x77
    1c1c:	ebffff76 	bl	19fc <set_hexagon_y>
        //increase_hexagon_speed(hex, 1);
        set_hexagon_color(hex, rand() % 0xFFFF);
    1c20:	eb00141d 	bl	6c9c <rand>
    1c24:	e3083001 	movw	r3, #32769	; 0x8001
    1c28:	e3483000 	movt	r3, #32768	; 0x8000
    1c2c:	e0c12093 	smull	r2, r1, r3, r0
    1c30:	e0811000 	add	r1, r1, r0
    1c34:	e1a02fc0 	asr	r2, r0, #31
    1c38:	e06217c1 	rsb	r1, r2, r1, asr #15
    1c3c:	e0801001 	add	r1, r0, r1
    1c40:	e1a00004 	mov	r0, r4
    1c44:	e6bf1071 	sxth	r1, r1
    1c48:	ebffffda 	bl	1bb8 <set_hexagon_color>
        set_hexagon_rotation(hex, 0);
    1c4c:	e1a00004 	mov	r0, r4
    1c50:	e3a01000 	mov	r1, #0
    1c54:	ebffff99 	bl	1ac0 <set_hexagon_rotation>
        int dir = (rand() % 2 == 0) ? -1 : 1;
    1c58:	eb00140f 	bl	6c9c <rand>
    1c5c:	e2000001 	and	r0, r0, #1
    1c60:	e3500000 	cmp	r0, #0
    1c64:	13a06001 	movne	r6, #1
    1c68:	03e06000 	mvneq	r6, #0
        set_hexagon_rotation_speed(hex, dir * rotation_speeds[rand() % rotation_speeds_size]);
    1c6c:	eb00140a 	bl	6c9c <rand>
    1c70:	e1a05000 	mov	r5, r0
    1c74:	e1a00006 	mov	r0, r6
    1c78:	eb001213 	bl	64cc <__aeabi_i2f>
    1c7c:	e3083284 	movw	r3, #33412	; 0x8284
    1c80:	e3403000 	movt	r3, #0
    1c84:	e30a2aab 	movw	r2, #43691	; 0xaaab
    1c88:	e3422aaa 	movt	r2, #10922	; 0x2aaa
    1c8c:	e0c21592 	smull	r1, r2, r2, r5
    1c90:	e1a01fc5 	asr	r1, r5, #31
    1c94:	e06120c2 	rsb	r2, r1, r2, asr #1
    1c98:	e0822082 	add	r2, r2, r2, lsl #1
    1c9c:	e0455102 	sub	r5, r5, r2, lsl #2
    1ca0:	e7931105 	ldr	r1, [r3, r5, lsl #2]
    1ca4:	eb00123f 	bl	65a8 <__aeabi_fmul>
    1ca8:	e1a01000 	mov	r1, r0
    1cac:	e1a00004 	mov	r0, r4
    1cb0:	ebffff75 	bl	1a8c <set_hexagon_rotation_speed>
    1cb4:	e8bd8070 	pop	{r4, r5, r6, pc}
    } else {
        //if ((hex->y - hex->height) <= 1)
        //    hex->missing_segment = rand() % 6;
        decrease_hexagon_y(hex, hex->speed);
    1cb8:	e594109c 	ldr	r1, [r4, #156]	; 0x9c
    1cbc:	ebffff5b 	bl	1a30 <decrease_hexagon_y>
        increase_hexagon_rotation(hex, hex->rotation_speed);
    1cc0:	e1a00004 	mov	r0, r4
    1cc4:	e59410a4 	ldr	r1, [r4, #164]	; 0xa4
    1cc8:	ebffffa9 	bl	1b74 <increase_hexagon_rotation>
    1ccc:	e8bd8070 	pop	{r4, r5, r6, pc}

00001cd0 <draw_hexagon>:
    }
}

// **************   Hexagon Drawing Operations    ************** //

void draw_hexagon(Hexagon hex) {
    1cd0:	e24dd010 	sub	sp, sp, #16
    1cd4:	e92d4010 	push	{r4, lr}
    1cd8:	e24dd008 	sub	sp, sp, #8
    1cdc:	e28dc00c 	add	r12, sp, #12
    1ce0:	e98c000f 	stmib	r12, {r0, r1, r2, r3}
    int i;
    for (i = 0; i < 6; ++i) {
    1ce4:	e3a04000 	mov	r4, #0
        if (i != hex.missing_segment)
    1ce8:	e59d30a0 	ldr	r3, [sp, #160]	; 0xa0
    1cec:	e1530004 	cmp	r3, r4
    1cf0:	0a000007 	beq	1d14 <draw_hexagon+0x44>
            draw_segment(hex.segments[i]);
    1cf4:	e0843084 	add	r3, r4, r4, lsl #1
    1cf8:	e28d2010 	add	r2, sp, #16
    1cfc:	e0823183 	add	r3, r2, r3, lsl #3
    1d00:	e2832010 	add	r2, r3, #16
    1d04:	e8920003 	ldm	r2, {r0, r1}
    1d08:	e88d0003 	stm	sp, {r0, r1}
    1d0c:	e893000f 	ldm	r3, {r0, r1, r2, r3}
    1d10:	ebfffc5b 	bl	e84 <draw_segment>

// **************   Hexagon Drawing Operations    ************** //

void draw_hexagon(Hexagon hex) {
    int i;
    for (i = 0; i < 6; ++i) {
    1d14:	e2844001 	add	r4, r4, #1
    1d18:	e3540006 	cmp	r4, #6
    1d1c:	1afffff1 	bne	1ce8 <draw_hexagon+0x18>
        if (i != hex.missing_segment)
            draw_segment(hex.segments[i]);
    }
    1d20:	e28dd008 	add	sp, sp, #8
    1d24:	e8bd4010 	pop	{r4, lr}
    1d28:	e28dd010 	add	sp, sp, #16
    1d2c:	e12fff1e 	bx	lr

00001d30 <update_settings>:
    const int CONTROL_SCHEME =              0b1000;
    const int TIME_MODE =                   0b10000;
    const int HEXAGON_ROTATE =              0b100000;
    const int INPUT_TYPE =                  0b1000000;

    if (!SETTINGS.DEBUG)
    1d30:	e3033b20 	movw	r3, #15136	; 0x3b20
    1d34:	e3403005 	movt	r3, #5
    1d38:	e5d33000 	ldrb	r3, [r3]
    1d3c:	e3530000 	cmp	r3, #0
    1d40:	012fff1e 	bxeq	lr
        return;

    volatile int * SW = (int *) SW_BASE;

    SETTINGS.HIT_DETECT = ((*SW) & HIT_DETECT) == 0;
    1d44:	e3a02000 	mov	r2, #0
    1d48:	e34f2f20 	movt	r2, #65312	; 0xff20
    1d4c:	e5921040 	ldr	r1, [r2, #64]	; 0x40
    1d50:	e3033b20 	movw	r3, #15136	; 0x3b20
    1d54:	e3403005 	movt	r3, #5
    1d58:	e2211001 	eor	r1, r1, #1
    1d5c:	e2011001 	and	r1, r1, #1
    1d60:	e5c31001 	strb	r1, [r3, #1]
    SETTINGS.SCREEN_ROTATE = ((*SW) & SCREEN_ROTATE) != 0;
    1d64:	e5921040 	ldr	r1, [r2, #64]	; 0x40
    1d68:	e7e010d1 	ubfx	r1, r1, #1, #1
    1d6c:	e5c31004 	strb	r1, [r3, #4]
    SETTINGS.SCREEN_ROTATION_DIRECTION = (*SW & SCREEN_ROTATE_DIRECTION) ? COUNTER_CLOCKWISE : CLOCKWISE;
    1d70:	e5921040 	ldr	r1, [r2, #64]	; 0x40
    1d74:	e7e01151 	ubfx	r1, r1, #2, #1
    1d78:	e5c31005 	strb	r1, [r3, #5]
    SETTINGS.CONTROL_SCHEME = (*SW & CONTROL_SCHEME) ? CONTINUOUS : DISCRETE;
    1d7c:	e5921040 	ldr	r1, [r2, #64]	; 0x40
    1d80:	e7e011d1 	ubfx	r1, r1, #3, #1
    1d84:	e5c31016 	strb	r1, [r3, #22]
    SETTINGS.TIME_MODE = (*SW & TIME_MODE) ? MILLISECONDS : SECONDS;
    1d88:	e5921040 	ldr	r1, [r2, #64]	; 0x40
    1d8c:	e7e01251 	ubfx	r1, r1, #4, #1
    1d90:	e5c31003 	strb	r1, [r3, #3]
    SETTINGS.HEXAGON_ROTATE = (*SW & HEXAGON_ROTATE) != 0;
    1d94:	e5921040 	ldr	r1, [r2, #64]	; 0x40
    1d98:	e7e012d1 	ubfx	r1, r1, #5, #1
    1d9c:	e5c3100c 	strb	r1, [r3, #12]
    SETTINGS.INPUT_TYPE = (*SW & INPUT_TYPE) ? KEYBOARD : KEYS;
    1da0:	e5922040 	ldr	r2, [r2, #64]	; 0x40
    1da4:	e7e02352 	ubfx	r2, r2, #6, #1
    1da8:	e5c32015 	strb	r2, [r3, #21]
    1dac:	e12fff1e 	bx	lr

00001db0 <init_game_state>:
}


void init_game_state() {
    GAME_STATE.RUN = true;
    1db0:	e3033b20 	movw	r3, #15136	; 0x3b20
    1db4:	e3403005 	movt	r3, #5
    1db8:	e3a01001 	mov	r1, #1
    1dbc:	e5c3101c 	strb	r1, [r3, #28]
    GAME_STATE.GAME_OVER = false;
    1dc0:	e3a02000 	mov	r2, #0
    1dc4:	e5c3201d 	strb	r2, [r3, #29]

    GAME_STATE.GAME_TIME = 0;
    1dc8:	e5832020 	str	r2, [r3, #32]
    GAME_STATE.SCREEN_ROTATION_ANGLE = 0;
    1dcc:	e3a00000 	mov	r0, #0
    1dd0:	e5830024 	str	r0, [r3, #36]	; 0x24

    GAME_STATE.MODE = TITLE;
    1dd4:	e5c32028 	strb	r2, [r3, #40]	; 0x28
    INIT_GAME_REQUEST = true;
    1dd8:	e5c3102c 	strb	r1, [r3, #44]	; 0x2c
    1ddc:	e12fff1e 	bx	lr

00001de0 <update_game_state>:
}

void update_game_state() {
    1de0:	e12fff1e 	bx	lr

00001de4 <apply_difficulty>:

}

void apply_difficulty(int index) {
    1de4:	e92d0070 	push	{r4, r5, r6}
    Settings difficulty = DIFFICULTIES[index];
    1de8:	e3033b20 	movw	r3, #15136	; 0x3b20
    1dec:	e3403005 	movt	r3, #5
    1df0:	e2831030 	add	r1, r3, #48	; 0x30
    1df4:	e0600180 	rsb	r0, r0, r0, lsl #3
    1df8:	e1a00100 	lsl	r0, r0, #2
    1dfc:	e0812000 	add	r2, r1, r0
    1e00:	e7d16000 	ldrb	r6, [r1, r0]
    1e04:	e5d25001 	ldrb	r5, [r2, #1]
    1e08:	e5d24004 	ldrb	r4, [r2, #4]
    1e0c:	e5d2c00c 	ldrb	r12, [r2, #12]
    1e10:	e5920010 	ldr	r0, [r2, #16]
    1e14:	e5d21014 	ldrb	r1, [r2, #20]
    SETTINGS.DIFFICULTY = difficulty.DIFFICULTY;
    1e18:	e5d22002 	ldrb	r2, [r2, #2]
    1e1c:	e5c32002 	strb	r2, [r3, #2]

    SETTINGS.DEBUG = difficulty.DEBUG;
    1e20:	e5c36000 	strb	r6, [r3]
    SETTINGS.HIT_DETECT = difficulty.HIT_DETECT;
    1e24:	e5c35001 	strb	r5, [r3, #1]

    SETTINGS.SCREEN_ROTATE = difficulty.SCREEN_ROTATE;
    1e28:	e5c34004 	strb	r4, [r3, #4]
    SETTINGS.HEXAGON_ROTATE = difficulty.HEXAGON_ROTATE;
    1e2c:	e5c3c00c 	strb	r12, [r3, #12]
    SETTINGS.HEXAGON_SPEED = difficulty.HEXAGON_SPEED;
    1e30:	e5830010 	str	r0, [r3, #16]

    SETTINGS.BACKGROUND_UPDATE = difficulty.BACKGROUND_UPDATE;
    1e34:	e5c31014 	strb	r1, [r3, #20]
}
    1e38:	e8bd0070 	pop	{r4, r5, r6}
    1e3c:	e12fff1e 	bx	lr

00001e40 <init_settings>:
    OPTIONS_INDEX = 0;

    SCREEN_ROTATION_CHANGE_TIMER = 1000;
}

void init_settings() {
    1e40:	e92d4008 	push	{r3, lr}
    // ******* DEFAULT SETTINGS ******** //
    SETTINGS.DIFFICULTY = DEBUG;
    1e44:	e3033b20 	movw	r3, #15136	; 0x3b20
    1e48:	e3403005 	movt	r3, #5
    1e4c:	e3a00000 	mov	r0, #0
    1e50:	e5c30002 	strb	r0, [r3, #2]
    SETTINGS.DEBUG = true;
    1e54:	e3a02001 	mov	r2, #1
    1e58:	e5c32000 	strb	r2, [r3]
    SETTINGS.HIT_DETECT = false;
    1e5c:	e5c30001 	strb	r0, [r3, #1]

    SETTINGS.TIME_MODE = SECONDS;
    1e60:	e5c30003 	strb	r0, [r3, #3]

    SETTINGS.SCREEN_ROTATE = true;
    1e64:	e5c32004 	strb	r2, [r3, #4]
    SETTINGS.SCREEN_ROTATION_DIRECTION = CLOCKWISE;
    1e68:	e5c30005 	strb	r0, [r3, #5]
    SETTINGS.SCREEN_ROTATION_SPEED = 5;
    1e6c:	e3a01000 	mov	r1, #0
    1e70:	e34410a0 	movt	r1, #16544	; 0x40a0
    1e74:	e5831008 	str	r1, [r3, #8]

    SETTINGS.BACKGROUND_UPDATE = false;
    1e78:	e5c30014 	strb	r0, [r3, #20]

    SETTINGS.HEXAGON_ROTATE = true;
    1e7c:	e5c3200c 	strb	r2, [r3, #12]
    SETTINGS.HEXAGON_SPEED = 2;
    1e80:	e3a0e002 	mov	lr, #2
    1e84:	e583e010 	str	lr, [r3, #16]

    SETTINGS.INPUT_TYPE = KEYS;
    1e88:	e5c30015 	strb	r0, [r3, #21]
    SETTINGS.CONTROL_SCHEME = CONTINUOUS;
    1e8c:	e5c32016 	strb	r2, [r3, #22]
    SETTINGS.DEFAULT_PLAYER_SPEED = 25;
    1e90:	e3a0c000 	mov	r12, #0
    1e94:	e344c1c8 	movt	r12, #16840	; 0x41c8
    1e98:	e583c018 	str	r12, [r3, #24]

    // ******* DEBUG SETTINGS ******** //

    Settings* debug = &DIFFICULTIES[0];
    debug->DIFFICULTY = DEBUG;
    1e9c:	e5c30032 	strb	r0, [r3, #50]	; 0x32
    debug->DEBUG = true;
    1ea0:	e5c32030 	strb	r2, [r3, #48]	; 0x30
    debug->HIT_DETECT = false;
    1ea4:	e5c30031 	strb	r0, [r3, #49]	; 0x31

    debug->TIME_MODE = MILLISECONDS;
    1ea8:	e5c32033 	strb	r2, [r3, #51]	; 0x33

    debug->SCREEN_ROTATE = false;
    1eac:	e5c30034 	strb	r0, [r3, #52]	; 0x34
    debug->SCREEN_ROTATION_DIRECTION = CLOCKWISE;
    1eb0:	e5c30035 	strb	r0, [r3, #53]	; 0x35
    debug->SCREEN_ROTATION_SPEED = 5;
    1eb4:	e5831038 	str	r1, [r3, #56]	; 0x38

    debug->HEXAGON_ROTATE = false;
    1eb8:	e5c3003c 	strb	r0, [r3, #60]	; 0x3c
    debug->HEXAGON_SPEED = 2;
    1ebc:	e583e040 	str	lr, [r3, #64]	; 0x40

    debug->BACKGROUND_UPDATE = false;
    1ec0:	e5c30044 	strb	r0, [r3, #68]	; 0x44

    debug->INPUT_TYPE = KEYBOARD;
    1ec4:	e5c32045 	strb	r2, [r3, #69]	; 0x45
    debug->CONTROL_SCHEME = CONTINUOUS;
    1ec8:	e5c32046 	strb	r2, [r3, #70]	; 0x46
    debug->DEFAULT_PLAYER_SPEED = 15;
    1ecc:	e3a0c000 	mov	r12, #0
    1ed0:	e344c170 	movt	r12, #16752	; 0x4170
    1ed4:	e583c048 	str	r12, [r3, #72]	; 0x48

    // ******* EASY SETTINGS ******** //

    Settings* easy = &DIFFICULTIES[1];
    easy->DIFFICULTY = EASY;
    1ed8:	e5c3204e 	strb	r2, [r3, #78]	; 0x4e
    easy->DEBUG = false;
    1edc:	e5c3004c 	strb	r0, [r3, #76]	; 0x4c
    easy->HIT_DETECT = true;
    1ee0:	e5c3204d 	strb	r2, [r3, #77]	; 0x4d

    easy->TIME_MODE = MILLISECONDS;
    1ee4:	e5c3204f 	strb	r2, [r3, #79]	; 0x4f

    easy->SCREEN_ROTATE = false;
    1ee8:	e5c30050 	strb	r0, [r3, #80]	; 0x50
    easy->SCREEN_ROTATION_DIRECTION = CLOCKWISE;
    1eec:	e5c30051 	strb	r0, [r3, #81]	; 0x51
    easy->SCREEN_ROTATION_SPEED = 5;
    1ef0:	e5831054 	str	r1, [r3, #84]	; 0x54

    easy->HEXAGON_ROTATE = false;
    1ef4:	e5c30058 	strb	r0, [r3, #88]	; 0x58
    easy->HEXAGON_SPEED = 1;
    1ef8:	e583205c 	str	r2, [r3, #92]	; 0x5c

    easy->BACKGROUND_UPDATE = false;
    1efc:	e5c30060 	strb	r0, [r3, #96]	; 0x60

    easy->INPUT_TYPE = KEYBOARD;
    1f00:	e5c32061 	strb	r2, [r3, #97]	; 0x61
    easy->CONTROL_SCHEME = CONTINUOUS;
    1f04:	e5c32062 	strb	r2, [r3, #98]	; 0x62
    easy->DEFAULT_PLAYER_SPEED = 15;
    1f08:	e583c064 	str	r12, [r3, #100]	; 0x64

    // ******* NORMAL SETTINGS ******** //

    Settings* normal = &DIFFICULTIES[2];
    normal->DIFFICULTY = NORMAL;
    1f0c:	e5c3e06a 	strb	lr, [r3, #106]	; 0x6a
    normal->DEBUG = false;
    1f10:	e5c30068 	strb	r0, [r3, #104]	; 0x68
    normal->HIT_DETECT = true;
    1f14:	e5c32069 	strb	r2, [r3, #105]	; 0x69

    normal->TIME_MODE = MILLISECONDS;
    1f18:	e5c3206b 	strb	r2, [r3, #107]	; 0x6b

    normal->SCREEN_ROTATE = false;
    1f1c:	e5c3006c 	strb	r0, [r3, #108]	; 0x6c
    normal->SCREEN_ROTATION_DIRECTION = CLOCKWISE;
    1f20:	e5c3006d 	strb	r0, [r3, #109]	; 0x6d
    normal->SCREEN_ROTATION_SPEED = 5;
    1f24:	e5831070 	str	r1, [r3, #112]	; 0x70

    normal->HEXAGON_ROTATE = true;
    1f28:	e5c32074 	strb	r2, [r3, #116]	; 0x74
    normal->HEXAGON_SPEED = 2;
    1f2c:	e583e078 	str	lr, [r3, #120]	; 0x78

    normal->BACKGROUND_UPDATE = false;
    1f30:	e5c3007c 	strb	r0, [r3, #124]	; 0x7c

    normal->INPUT_TYPE = KEYBOARD;
    1f34:	e5c3207d 	strb	r2, [r3, #125]	; 0x7d
    normal->CONTROL_SCHEME = CONTINUOUS;
    1f38:	e5c3207e 	strb	r2, [r3, #126]	; 0x7e
    normal->DEFAULT_PLAYER_SPEED = 15;
    1f3c:	e583c080 	str	r12, [r3, #128]	; 0x80

    // ******* HARD SETTINGS ******** //

    Settings* hard = &DIFFICULTIES[3];
    hard->DIFFICULTY = HARD;
    1f40:	e3a0e003 	mov	lr, #3
    1f44:	e5c3e086 	strb	lr, [r3, #134]	; 0x86
    hard->DEBUG = false;
    1f48:	e5c30084 	strb	r0, [r3, #132]	; 0x84
    hard->HIT_DETECT = true;
    1f4c:	e5c32085 	strb	r2, [r3, #133]	; 0x85

    hard->TIME_MODE = MILLISECONDS;
    1f50:	e5c32087 	strb	r2, [r3, #135]	; 0x87

    hard->SCREEN_ROTATE = true;
    1f54:	e5c32088 	strb	r2, [r3, #136]	; 0x88
    hard->SCREEN_ROTATION_DIRECTION = CLOCKWISE;
    1f58:	e5c30089 	strb	r0, [r3, #137]	; 0x89
    hard->SCREEN_ROTATION_SPEED = 5;
    1f5c:	e583108c 	str	r1, [r3, #140]	; 0x8c

    hard->HEXAGON_ROTATE = true;
    1f60:	e5c32090 	strb	r2, [r3, #144]	; 0x90
    hard->HEXAGON_SPEED = 3;
    1f64:	e583e094 	str	lr, [r3, #148]	; 0x94

    hard->BACKGROUND_UPDATE = false;
    1f68:	e5c30098 	strb	r0, [r3, #152]	; 0x98

    hard->INPUT_TYPE = KEYBOARD;
    1f6c:	e5c32099 	strb	r2, [r3, #153]	; 0x99
    hard->CONTROL_SCHEME = CONTINUOUS;
    1f70:	e5c3209a 	strb	r2, [r3, #154]	; 0x9a
    hard->DEFAULT_PLAYER_SPEED = 15;
    1f74:	e583c09c 	str	r12, [r3, #156]	; 0x9c

    apply_difficulty(0);
    1f78:	ebffff99 	bl	1de4 <apply_difficulty>
    1f7c:	e8bd8008 	pop	{r3, pc}

00001f80 <init_globals>:
int OPTIONS_SIZE;
volatile int OPTIONS_INDEX;

volatile unsigned int SCREEN_ROTATION_CHANGE_TIMER;

void init_globals() {
    1f80:	e92d4008 	push	{r3, lr}
    init_settings();
    1f84:	ebffffad 	bl	1e40 <init_settings>
    init_game_state();
    1f88:	ebffff88 	bl	1db0 <init_game_state>

    BACKGROUND_COLORS[0] = 0x0;
    1f8c:	e3033b20 	movw	r3, #15136	; 0x3b20
    1f90:	e3403005 	movt	r3, #5
    1f94:	e3a02000 	mov	r2, #0
    1f98:	e1c32ab0 	strh	r2, [r3, #160]	; 0xa0
    BACKGROUND_COLORS[1] = 0xFFFF;
    1f9c:	e3e00000 	mvn	r0, #0
    1fa0:	e1c30ab2 	strh	r0, [r3, #162]	; 0xa2

    TITLE_SIZE = 2;
    1fa4:	e3a00002 	mov	r0, #2
    1fa8:	e58300a4 	str	r0, [r3, #164]	; 0xa4
    TITLE_INDEX = 0;
    1fac:	e58320a8 	str	r2, [r3, #168]	; 0xa8

    OPTIONS_UPDATE = false;
    1fb0:	e5c320ac 	strb	r2, [r3, #172]	; 0xac
    OPTIONS_SIZE = 4;
    1fb4:	e3a01004 	mov	r1, #4
    1fb8:	e58310b0 	str	r1, [r3, #176]	; 0xb0
    OPTIONS_INDEX = 0;
    1fbc:	e58320b4 	str	r2, [r3, #180]	; 0xb4

    SCREEN_ROTATION_CHANGE_TIMER = 1000;
    1fc0:	e3a02ffa 	mov	r2, #1000	; 0x3e8
    1fc4:	e58320b8 	str	r2, [r3, #184]	; 0xb8
    1fc8:	e8bd8008 	pop	{r3, pc}

00001fcc <chooseNextOption>:
    SETTINGS.HEXAGON_SPEED = difficulty.HEXAGON_SPEED;

    SETTINGS.BACKGROUND_UPDATE = difficulty.BACKGROUND_UPDATE;
}

void chooseNextOption() {
    1fcc:	e92d4010 	push	{r4, lr}
    OPTIONS_INDEX = (OPTIONS_INDEX + 1) % OPTIONS_SIZE;
    1fd0:	e3034b20 	movw	r4, #15136	; 0x3b20
    1fd4:	e3404005 	movt	r4, #5
    1fd8:	e59400b4 	ldr	r0, [r4, #180]	; 0xb4
    1fdc:	e2800001 	add	r0, r0, #1
    1fe0:	e59410b0 	ldr	r1, [r4, #176]	; 0xb0
    1fe4:	eb000dfd 	bl	57e0 <__aeabi_idivmod>
    1fe8:	e58410b4 	str	r1, [r4, #180]	; 0xb4
    OPTIONS_UPDATE = true;
    1fec:	e3a03001 	mov	r3, #1
    1ff0:	e5c430ac 	strb	r3, [r4, #172]	; 0xac
    1ff4:	e8bd8010 	pop	{r4, pc}

00001ff8 <choosePreviousOption>:
}

void choosePreviousOption() {
    1ff8:	e92d4010 	push	{r4, lr}
    OPTIONS_INDEX = (OPTIONS_SIZE + OPTIONS_INDEX - 1) % OPTIONS_SIZE;
    1ffc:	e3034b20 	movw	r4, #15136	; 0x3b20
    2000:	e3404005 	movt	r4, #5
    2004:	e59410b0 	ldr	r1, [r4, #176]	; 0xb0
    2008:	e59400b4 	ldr	r0, [r4, #180]	; 0xb4
    200c:	e0810000 	add	r0, r1, r0
    2010:	e2400001 	sub	r0, r0, #1
    2014:	eb000df1 	bl	57e0 <__aeabi_idivmod>
    2018:	e58410b4 	str	r1, [r4, #180]	; 0xb4
    OPTIONS_UPDATE = true;
    201c:	e3a03001 	mov	r3, #1
    2020:	e5c430ac 	strb	r3, [r4, #172]	; 0xac
    2024:	e8bd8010 	pop	{r4, pc}

00002028 <cycleOptionRight>:
}

void cycleOptionRight() {
    2028:	e92d4008 	push	{r3, lr}
    if (OPTIONS_INDEX == 0) // Input Type
    202c:	e3033b20 	movw	r3, #15136	; 0x3b20
    2030:	e3403005 	movt	r3, #5
    2034:	e59330b4 	ldr	r3, [r3, #180]	; 0xb4
    2038:	e3530000 	cmp	r3, #0
    203c:	1a000006 	bne	205c <cycleOptionRight+0x34>
        SETTINGS.INPUT_TYPE = (SETTINGS.INPUT_TYPE == KEYS) ? KEYBOARD : KEYS;
    2040:	e3033b20 	movw	r3, #15136	; 0x3b20
    2044:	e3403005 	movt	r3, #5
    2048:	e5d32015 	ldrb	r2, [r3, #21]
    204c:	e2722001 	rsbs	r2, r2, #1
    2050:	33a02000 	movcc	r2, #0
    2054:	e5c32015 	strb	r2, [r3, #21]
    2058:	ea000022 	b	20e8 <cycleOptionRight+0xc0>
    else if (OPTIONS_INDEX == 1) // Control Scheme
    205c:	e3033b20 	movw	r3, #15136	; 0x3b20
    2060:	e3403005 	movt	r3, #5
    2064:	e59330b4 	ldr	r3, [r3, #180]	; 0xb4
    2068:	e3530001 	cmp	r3, #1
    206c:	1a000006 	bne	208c <cycleOptionRight+0x64>
        SETTINGS.CONTROL_SCHEME = (SETTINGS.CONTROL_SCHEME == DISCRETE) ? CONTINUOUS : DISCRETE;
    2070:	e3033b20 	movw	r3, #15136	; 0x3b20
    2074:	e3403005 	movt	r3, #5
    2078:	e5d32016 	ldrb	r2, [r3, #22]
    207c:	e2722001 	rsbs	r2, r2, #1
    2080:	33a02000 	movcc	r2, #0
    2084:	e5c32016 	strb	r2, [r3, #22]
    2088:	ea000016 	b	20e8 <cycleOptionRight+0xc0>
    else if (OPTIONS_INDEX == 2) // Time Mode
    208c:	e3033b20 	movw	r3, #15136	; 0x3b20
    2090:	e3403005 	movt	r3, #5
    2094:	e59330b4 	ldr	r3, [r3, #180]	; 0xb4
    2098:	e3530002 	cmp	r3, #2
    209c:	1a000006 	bne	20bc <cycleOptionRight+0x94>
        SETTINGS.TIME_MODE = (SETTINGS.TIME_MODE == SECONDS) ? MILLISECONDS : SECONDS;
    20a0:	e3033b20 	movw	r3, #15136	; 0x3b20
    20a4:	e3403005 	movt	r3, #5
    20a8:	e5d32003 	ldrb	r2, [r3, #3]
    20ac:	e2722001 	rsbs	r2, r2, #1
    20b0:	33a02000 	movcc	r2, #0
    20b4:	e5c32003 	strb	r2, [r3, #3]
    20b8:	ea00000a 	b	20e8 <cycleOptionRight+0xc0>
    else if (OPTIONS_INDEX == 3) // Difficulty
    20bc:	e3033b20 	movw	r3, #15136	; 0x3b20
    20c0:	e3403005 	movt	r3, #5
    20c4:	e59330b4 	ldr	r3, [r3, #180]	; 0xb4
    20c8:	e3530003 	cmp	r3, #3
    20cc:	1a000005 	bne	20e8 <cycleOptionRight+0xc0>
        apply_difficulty((SETTINGS.DIFFICULTY + 1) % 4);
    20d0:	e3033b20 	movw	r3, #15136	; 0x3b20
    20d4:	e3403005 	movt	r3, #5
    20d8:	e5d30002 	ldrb	r0, [r3, #2]
    20dc:	e2800001 	add	r0, r0, #1
    20e0:	e2000003 	and	r0, r0, #3
    20e4:	ebffff3e 	bl	1de4 <apply_difficulty>
    OPTIONS_UPDATE = true;
    20e8:	e3033b20 	movw	r3, #15136	; 0x3b20
    20ec:	e3403005 	movt	r3, #5
    20f0:	e3a02001 	mov	r2, #1
    20f4:	e5c320ac 	strb	r2, [r3, #172]	; 0xac
    20f8:	e8bd8008 	pop	{r3, pc}

000020fc <cycleOptionLeft>:
}

void cycleOptionLeft() {
    20fc:	e92d4008 	push	{r3, lr}
    if (OPTIONS_INDEX == 0) // Input Type
    2100:	e3033b20 	movw	r3, #15136	; 0x3b20
    2104:	e3403005 	movt	r3, #5
    2108:	e59330b4 	ldr	r3, [r3, #180]	; 0xb4
    210c:	e3530000 	cmp	r3, #0
    2110:	1a000006 	bne	2130 <cycleOptionLeft+0x34>
        SETTINGS.INPUT_TYPE = (SETTINGS.INPUT_TYPE == KEYS) ? KEYBOARD : KEYS;
    2114:	e3033b20 	movw	r3, #15136	; 0x3b20
    2118:	e3403005 	movt	r3, #5
    211c:	e5d32015 	ldrb	r2, [r3, #21]
    2120:	e2722001 	rsbs	r2, r2, #1
    2124:	33a02000 	movcc	r2, #0
    2128:	e5c32015 	strb	r2, [r3, #21]
    212c:	ea000022 	b	21bc <cycleOptionLeft+0xc0>
    else if (OPTIONS_INDEX == 1) // Control Scheme
    2130:	e3033b20 	movw	r3, #15136	; 0x3b20
    2134:	e3403005 	movt	r3, #5
    2138:	e59330b4 	ldr	r3, [r3, #180]	; 0xb4
    213c:	e3530001 	cmp	r3, #1
    2140:	1a000006 	bne	2160 <cycleOptionLeft+0x64>
        SETTINGS.CONTROL_SCHEME = (SETTINGS.CONTROL_SCHEME == DISCRETE) ? CONTINUOUS : DISCRETE;
    2144:	e3033b20 	movw	r3, #15136	; 0x3b20
    2148:	e3403005 	movt	r3, #5
    214c:	e5d32016 	ldrb	r2, [r3, #22]
    2150:	e2722001 	rsbs	r2, r2, #1
    2154:	33a02000 	movcc	r2, #0
    2158:	e5c32016 	strb	r2, [r3, #22]
    215c:	ea000016 	b	21bc <cycleOptionLeft+0xc0>
    else if (OPTIONS_INDEX == 2) // Time Mode
    2160:	e3033b20 	movw	r3, #15136	; 0x3b20
    2164:	e3403005 	movt	r3, #5
    2168:	e59330b4 	ldr	r3, [r3, #180]	; 0xb4
    216c:	e3530002 	cmp	r3, #2
    2170:	1a000006 	bne	2190 <cycleOptionLeft+0x94>
        SETTINGS.TIME_MODE = (SETTINGS.TIME_MODE == SECONDS) ? MILLISECONDS : SECONDS;
    2174:	e3033b20 	movw	r3, #15136	; 0x3b20
    2178:	e3403005 	movt	r3, #5
    217c:	e5d32003 	ldrb	r2, [r3, #3]
    2180:	e2722001 	rsbs	r2, r2, #1
    2184:	33a02000 	movcc	r2, #0
    2188:	e5c32003 	strb	r2, [r3, #3]
    218c:	ea00000a 	b	21bc <cycleOptionLeft+0xc0>
    else if (OPTIONS_INDEX == 3) // Difficulty
    2190:	e3033b20 	movw	r3, #15136	; 0x3b20
    2194:	e3403005 	movt	r3, #5
    2198:	e59330b4 	ldr	r3, [r3, #180]	; 0xb4
    219c:	e3530003 	cmp	r3, #3
    21a0:	1a000005 	bne	21bc <cycleOptionLeft+0xc0>
        apply_difficulty((4 + SETTINGS.DIFFICULTY - 1) % 4);
    21a4:	e3033b20 	movw	r3, #15136	; 0x3b20
    21a8:	e3403005 	movt	r3, #5
    21ac:	e5d30002 	ldrb	r0, [r3, #2]
    21b0:	e2800003 	add	r0, r0, #3
    21b4:	e2000003 	and	r0, r0, #3
    21b8:	ebffff09 	bl	1de4 <apply_difficulty>
    OPTIONS_UPDATE = true;
    21bc:	e3033b20 	movw	r3, #15136	; 0x3b20
    21c0:	e3403005 	movt	r3, #5
    21c4:	e3a02001 	mov	r2, #1
    21c8:	e5c320ac 	strb	r2, [r3, #172]	; 0xac
    21cc:	e8bd8008 	pop	{r3, pc}

000021d0 <__cs3_reset>:
#include "interrupt_ids.h"
#include "player.h"
#include "utils.h"

//  *************   Vector Table Callback Functions     ************** //
void __attribute__((interrupt)) __cs3_reset() {
    21d0:	eafffffe 	b	21d0 <__cs3_reset>

000021d4 <__cs3_isr_undef>:
    while (true);
}

void __attribute__((interrupt)) __cs3_isr_undef() {
    21d4:	eafffffe 	b	21d4 <__cs3_isr_undef>

000021d8 <__cs3_isr_swi>:
    while (true);
}

void __attribute__((interrupt)) __cs3_isr_swi() {
    21d8:	eafffffe 	b	21d8 <__cs3_isr_swi>

000021dc <__cs3_isr_pabort>:
    while (true);
}

void __attribute__((interrupt)) __cs3_isr_pabort() {
    21dc:	eafffffe 	b	21dc <__cs3_isr_pabort>

000021e0 <__cs3_isr_dabort>:
    while (true);
}

void __attribute__((interrupt)) __cs3_isr_dabort() {
    21e0:	eafffffe 	b	21e0 <__cs3_isr_dabort>

000021e4 <__cs3_isr_fiq>:
    while (true);
}

void __attribute__((interrupt)) __cs3_isr_fiq() {
    21e4:	eafffffe 	b	21e4 <__cs3_isr_fiq>

000021e8 <config_stack_pointers>:
// Configure stack pointer for IRQ mode
void config_stack_pointers() {
    int stack, mode;
    stack = A9_ONCHIP_END - 7;
    mode = INT_DISABLE | IRQ_MODE;
    asm("msr cpsr, %[ps]" : : [ps] "r"(mode));
    21e8:	e3a030d2 	mov	r3, #210	; 0xd2
    21ec:	e129f003 	msr	CPSR_fc, r3
    asm("mov sp, %[ps]" : : [ps] "r"(stack));
    21f0:	e3e03007 	mvn	r3, #7
    21f4:	e1a0d003 	mov	sp, r3

    mode = INT_DISABLE | SVC_MODE;
    asm("msr cpsr, %[ps]" : : [ps] "r"(mode));
    21f8:	e3a030d3 	mov	r3, #211	; 0xd3
    21fc:	e129f003 	msr	CPSR_fc, r3
    2200:	e12fff1e 	bx	lr

00002204 <config_arm_interrupt>:
}

// Configure interrupt for arm processor
void config_arm_interrupt() {
    int value = SVC_MODE | INT_ENABLE;
    __asm__ volatile ("MSR CPSR, %0" :: "r" (value));
    2204:	e3a03053 	mov	r3, #83	; 0x53
    2208:	e129f003 	msr	CPSR_fc, r3
    220c:	e12fff1e 	bx	lr

00002210 <config_key_interrupt>:
}

// Enable key interrupts
void config_key_interrupt() {
    volatile int * key_base = (int *) KEY_BASE;
    *(key_base + 2) = 0xFFFF;   // Set up interrupt masks
    2210:	e3a03000 	mov	r3, #0
    2214:	e34f3f20 	movt	r3, #65312	; 0xff20
    2218:	e30f2fff 	movw	r2, #65535	; 0xffff
    221c:	e5832058 	str	r2, [r3, #88]	; 0x58
    *(key_base + 3) = 0xFFFF;   // Reset edge captures
    2220:	e583205c 	str	r2, [r3, #92]	; 0x5c
    2224:	e12fff1e 	bx	lr

00002228 <config_priv_timer_interrupt>:

// Enable priv timer interrupts
void config_priv_timer_interrupt() {
    volatile int * priv_timer_base = (int *) MPCORE_PRIV_TIMER;
    int load_value = 0.01 * 200 * 1000000;  // Tick every 0.01s
    *priv_timer_base = load_value;
    2228:	e3e03a13 	mvn	r3, #77824	; 0x13000
    222c:	e3082480 	movw	r2, #33920	; 0x8480
    2230:	e340201e 	movt	r2, #30
    2234:	e50329ff 	str	r2, [r3, #-2559]	; 0xfffff601
    *(priv_timer_base + 2) = 0b111; // Enable interrupt, autoload and enable
    2238:	e3a02007 	mov	r2, #7
    223c:	e50329f7 	str	r2, [r3, #-2551]	; 0xfffff609
    2240:	e12fff1e 	bx	lr

00002244 <config_ps2_interrupt>:
}

// Enable PS/2 port interrupts
void config_ps2_interrupt() {
    volatile int * ps2_base = (int *) PS2_BASE;
    *(ps2_base) = 0xFF;     // reset
    2244:	e3a03000 	mov	r3, #0
    2248:	e34f3f20 	movt	r3, #65312	; 0xff20
    224c:	e3a020ff 	mov	r2, #255	; 0xff
    2250:	e5832100 	str	r2, [r3, #256]	; 0x100
    *(ps2_base + 1) = 1;    // enable interrupts
    2254:	e3a02001 	mov	r2, #1
    2258:	e5832104 	str	r2, [r3, #260]	; 0x104
    225c:	e12fff1e 	bx	lr

00002260 <on_key_press>:

//  *************   End Of Config Interrupts     ************** //


// Called on key interrupt
void on_key_press() {
    2260:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    2264:	e24dd00c 	sub	sp, sp, #12
    volatile int *key_base = (int *) KEY_BASE;
    volatile int edge = *(key_base + 3) & 0xF;
    2268:	e3a03000 	mov	r3, #0
    226c:	e34f3f20 	movt	r3, #65312	; 0xff20
    2270:	e593305c 	ldr	r3, [r3, #92]	; 0x5c
    2274:	e203300f 	and	r3, r3, #15
    2278:	e58d3004 	str	r3, [sp, #4]

    if (edge == KEY0) {
    227c:	e59d3004 	ldr	r3, [sp, #4]
    2280:	e3530001 	cmp	r3, #1
    2284:	1a00003a 	bne	2374 <on_key_press+0x114>
        // Key 0 Press
        if (GAME_STATE.MODE == TITLE) {
    2288:	e3033b3c 	movw	r3, #15164	; 0x3b3c
    228c:	e3403005 	movt	r3, #5
    2290:	e5d3300c 	ldrb	r3, [r3, #12]
    2294:	e3530000 	cmp	r3, #0
    2298:	1a00001b 	bne	230c <on_key_press+0xac>
            if (TITLE_INDEX == 0) {
    229c:	e3033bc8 	movw	r3, #15304	; 0x3bc8
    22a0:	e3403005 	movt	r3, #5
    22a4:	e5933000 	ldr	r3, [r3]
    22a8:	e3530000 	cmp	r3, #0
    22ac:	1a000008 	bne	22d4 <on_key_press+0x74>
                GAME_STATE.MODE = GAME;
    22b0:	e3033b3c 	movw	r3, #15164	; 0x3b3c
    22b4:	e3403005 	movt	r3, #5
    22b8:	e3a02002 	mov	r2, #2
    22bc:	e5c3200c 	strb	r2, [r3, #12]
                INIT_GAME_REQUEST = true;
    22c0:	e3033b4c 	movw	r3, #15180	; 0x3b4c
    22c4:	e3403005 	movt	r3, #5
    22c8:	e3a02001 	mov	r2, #1
    22cc:	e5c32000 	strb	r2, [r3]
    22d0:	ea0000a9 	b	257c <on_key_press+0x31c>
            } else if (TITLE_INDEX == 1) {
    22d4:	e3033bc8 	movw	r3, #15304	; 0x3bc8
    22d8:	e3403005 	movt	r3, #5
    22dc:	e5933000 	ldr	r3, [r3]
    22e0:	e3530001 	cmp	r3, #1
    22e4:	1a0000a4 	bne	257c <on_key_press+0x31c>
                GAME_STATE.MODE = OPTIONS;
    22e8:	e3033b3c 	movw	r3, #15164	; 0x3b3c
    22ec:	e3403005 	movt	r3, #5
    22f0:	e3a02001 	mov	r2, #1
    22f4:	e5c3200c 	strb	r2, [r3, #12]
                OPTIONS_INDEX = 0;
    22f8:	e3033bd4 	movw	r3, #15316	; 0x3bd4
    22fc:	e3403005 	movt	r3, #5
    2300:	e3a02000 	mov	r2, #0
    2304:	e5832000 	str	r2, [r3]
    2308:	ea00009b 	b	257c <on_key_press+0x31c>
            }
        } else if (SETTINGS.INPUT_TYPE == KEYS && GAME_STATE.MODE == GAME && SETTINGS.CONTROL_SCHEME == DISCRETE)
    230c:	e3033b20 	movw	r3, #15136	; 0x3b20
    2310:	e3403005 	movt	r3, #5
    2314:	e5d33015 	ldrb	r3, [r3, #21]
    2318:	e3530000 	cmp	r3, #0
    231c:	1a00000d 	bne	2358 <on_key_press+0xf8>
    2320:	e3033b3c 	movw	r3, #15164	; 0x3b3c
    2324:	e3403005 	movt	r3, #5
    2328:	e5d3300c 	ldrb	r3, [r3, #12]
    232c:	e3530002 	cmp	r3, #2
    2330:	1a000008 	bne	2358 <on_key_press+0xf8>
    2334:	e3033b20 	movw	r3, #15136	; 0x3b20
    2338:	e3403005 	movt	r3, #5
    233c:	e5d33016 	ldrb	r3, [r3, #22]
    2340:	e3530000 	cmp	r3, #0
    2344:	1a000003 	bne	2358 <on_key_press+0xf8>
            movePlayerRight(&PLAYER);
    2348:	e3030e70 	movw	r0, #15984	; 0x3e70
    234c:	e3400005 	movt	r0, #5
    2350:	eb0001fe 	bl	2b50 <movePlayerRight>
    2354:	ea000088 	b	257c <on_key_press+0x31c>
        else if (GAME_STATE.MODE == OPTIONS)
    2358:	e3033b3c 	movw	r3, #15164	; 0x3b3c
    235c:	e3403005 	movt	r3, #5
    2360:	e5d3300c 	ldrb	r3, [r3, #12]
    2364:	e3530001 	cmp	r3, #1
    2368:	1a000083 	bne	257c <on_key_press+0x31c>
            cycleOptionRight();
    236c:	ebffff2d 	bl	2028 <cycleOptionRight>
    2370:	ea000081 	b	257c <on_key_press+0x31c>
    } else if (edge == KEY1) {
    2374:	e59d3004 	ldr	r3, [sp, #4]
    2378:	e3530002 	cmp	r3, #2
    237c:	1a000028 	bne	2424 <on_key_press+0x1c4>
        // Key 1 Press
        if (GAME_STATE.MODE == TITLE)
    2380:	e3033b3c 	movw	r3, #15164	; 0x3b3c
    2384:	e3403005 	movt	r3, #5
    2388:	e5d3300c 	ldrb	r3, [r3, #12]
    238c:	e3530000 	cmp	r3, #0
    2390:	1a000009 	bne	23bc <on_key_press+0x15c>
            TITLE_INDEX = (TITLE_INDEX + 1) % TITLE_SIZE;
    2394:	e3034bc8 	movw	r4, #15304	; 0x3bc8
    2398:	e3404005 	movt	r4, #5
    239c:	e5940000 	ldr	r0, [r4]
    23a0:	e3033bc4 	movw	r3, #15300	; 0x3bc4
    23a4:	e3403005 	movt	r3, #5
    23a8:	e2800001 	add	r0, r0, #1
    23ac:	e5931000 	ldr	r1, [r3]
    23b0:	eb000d0a 	bl	57e0 <__aeabi_idivmod>
    23b4:	e5841000 	str	r1, [r4]
    23b8:	ea00006f 	b	257c <on_key_press+0x31c>
        else if (SETTINGS.INPUT_TYPE == KEYS && GAME_STATE.MODE == GAME && SETTINGS.CONTROL_SCHEME == DISCRETE)
    23bc:	e3033b20 	movw	r3, #15136	; 0x3b20
    23c0:	e3403005 	movt	r3, #5
    23c4:	e5d33015 	ldrb	r3, [r3, #21]
    23c8:	e3530000 	cmp	r3, #0
    23cc:	1a00000d 	bne	2408 <on_key_press+0x1a8>
    23d0:	e3033b3c 	movw	r3, #15164	; 0x3b3c
    23d4:	e3403005 	movt	r3, #5
    23d8:	e5d3300c 	ldrb	r3, [r3, #12]
    23dc:	e3530002 	cmp	r3, #2
    23e0:	1a000008 	bne	2408 <on_key_press+0x1a8>
    23e4:	e3033b20 	movw	r3, #15136	; 0x3b20
    23e8:	e3403005 	movt	r3, #5
    23ec:	e5d33016 	ldrb	r3, [r3, #22]
    23f0:	e3530000 	cmp	r3, #0
    23f4:	1a000003 	bne	2408 <on_key_press+0x1a8>
            movePlayerLeft(&PLAYER);
    23f8:	e3030e70 	movw	r0, #15984	; 0x3e70
    23fc:	e3400005 	movt	r0, #5
    2400:	eb0001f8 	bl	2be8 <movePlayerLeft>
    2404:	ea00005c 	b	257c <on_key_press+0x31c>
        else if (GAME_STATE.MODE == OPTIONS)
    2408:	e3033b3c 	movw	r3, #15164	; 0x3b3c
    240c:	e3403005 	movt	r3, #5
    2410:	e5d3300c 	ldrb	r3, [r3, #12]
    2414:	e3530001 	cmp	r3, #1
    2418:	1a000057 	bne	257c <on_key_press+0x31c>
            chooseNextOption();
    241c:	ebfffeea 	bl	1fcc <chooseNextOption>
    2420:	ea000055 	b	257c <on_key_press+0x31c>
    } else if (edge == KEY2) {
    2424:	e59d3004 	ldr	r3, [sp, #4]
    2428:	e3530004 	cmp	r3, #4
    242c:	1a000035 	bne	2508 <on_key_press+0x2a8>
        // Key 2 Press
        if (GAME_STATE.MODE == TITLE)
    2430:	e3033b3c 	movw	r3, #15164	; 0x3b3c
    2434:	e3403005 	movt	r3, #5
    2438:	e5d3300c 	ldrb	r3, [r3, #12]
    243c:	e3530000 	cmp	r3, #0
    2440:	1a00000a 	bne	2470 <on_key_press+0x210>
            TITLE_INDEX = (TITLE_SIZE + TITLE_INDEX - 1) % TITLE_SIZE;
    2444:	e3033bc4 	movw	r3, #15300	; 0x3bc4
    2448:	e3403005 	movt	r3, #5
    244c:	e5931000 	ldr	r1, [r3]
    2450:	e3034bc8 	movw	r4, #15304	; 0x3bc8
    2454:	e3404005 	movt	r4, #5
    2458:	e5940000 	ldr	r0, [r4]
    245c:	e0810000 	add	r0, r1, r0
    2460:	e2400001 	sub	r0, r0, #1
    2464:	eb000cdd 	bl	57e0 <__aeabi_idivmod>
    2468:	e5841000 	str	r1, [r4]
    246c:	ea000042 	b	257c <on_key_press+0x31c>
        else if (GAME_STATE.MODE == GAME && SETTINGS.DIFFICULTY == DEBUG) {
    2470:	e3033b3c 	movw	r3, #15164	; 0x3b3c
    2474:	e3403005 	movt	r3, #5
    2478:	e5d3300c 	ldrb	r3, [r3, #12]
    247c:	e3530002 	cmp	r3, #2
    2480:	1a000019 	bne	24ec <on_key_press+0x28c>
    2484:	e3033b20 	movw	r3, #15136	; 0x3b20
    2488:	e3403005 	movt	r3, #5
    248c:	e5d33002 	ldrb	r3, [r3, #2]
    2490:	e3530000 	cmp	r3, #0
    2494:	1a000014 	bne	24ec <on_key_press+0x28c>
    2498:	e3035c6c 	movw	r5, #15468	; 0x3c6c
    249c:	e3405005 	movt	r5, #5
    24a0:	e3a04000 	mov	r4, #0
            int i;
            for (i = 0; i < SIZE; ++i) {
                int speed = (HEXAGONS[i].speed + 1) % 4;
                if (speed == 0)
                    speed = 1;
                set_hexagon_speed(&HEXAGONS[i], speed);
    24a4:	e3a070ac 	mov	r7, #172	; 0xac
    24a8:	e1a06005 	mov	r6, r5
        if (GAME_STATE.MODE == TITLE)
            TITLE_INDEX = (TITLE_SIZE + TITLE_INDEX - 1) % TITLE_SIZE;
        else if (GAME_STATE.MODE == GAME && SETTINGS.DIFFICULTY == DEBUG) {
            int i;
            for (i = 0; i < SIZE; ++i) {
                int speed = (HEXAGONS[i].speed + 1) % 4;
    24ac:	e595109c 	ldr	r1, [r5, #156]	; 0x9c
    24b0:	e2811001 	add	r1, r1, #1
    24b4:	e1a03fc1 	asr	r3, r1, #31
    24b8:	e1a03f23 	lsr	r3, r3, #30
    24bc:	e0811003 	add	r1, r1, r3
    24c0:	e2011003 	and	r1, r1, #3
                if (speed == 0)
    24c4:	e0631001 	rsb	r1, r3, r1
                    speed = 1;
                set_hexagon_speed(&HEXAGONS[i], speed);
    24c8:	e0206497 	mla	r0, r7, r4, r6
    24cc:	e3510000 	cmp	r1, #0
    24d0:	03a01001 	moveq	r1, #1
    24d4:	ebfffd36 	bl	19b4 <set_hexagon_speed>
        // Key 2 Press
        if (GAME_STATE.MODE == TITLE)
            TITLE_INDEX = (TITLE_SIZE + TITLE_INDEX - 1) % TITLE_SIZE;
        else if (GAME_STATE.MODE == GAME && SETTINGS.DIFFICULTY == DEBUG) {
            int i;
            for (i = 0; i < SIZE; ++i) {
    24d8:	e2844001 	add	r4, r4, #1
    24dc:	e28550ac 	add	r5, r5, #172	; 0xac
    24e0:	e3540003 	cmp	r4, #3
    24e4:	1afffff0 	bne	24ac <on_key_press+0x24c>
    24e8:	ea000023 	b	257c <on_key_press+0x31c>
                int speed = (HEXAGONS[i].speed + 1) % 4;
                if (speed == 0)
                    speed = 1;
                set_hexagon_speed(&HEXAGONS[i], speed);
            }
        } else if (GAME_STATE.MODE == OPTIONS)
    24ec:	e3033b3c 	movw	r3, #15164	; 0x3b3c
    24f0:	e3403005 	movt	r3, #5
    24f4:	e5d3300c 	ldrb	r3, [r3, #12]
    24f8:	e3530001 	cmp	r3, #1
    24fc:	1a00001e 	bne	257c <on_key_press+0x31c>
            choosePreviousOption();
    2500:	ebfffebc 	bl	1ff8 <choosePreviousOption>
    2504:	ea00001c 	b	257c <on_key_press+0x31c>
    } else if (edge == KEY3) {
    2508:	e59d3004 	ldr	r3, [sp, #4]
    250c:	e3530008 	cmp	r3, #8
    2510:	1a000019 	bne	257c <on_key_press+0x31c>
        // Key 3 Press
        if (GAME_STATE.MODE == GAME) {
    2514:	e3033b3c 	movw	r3, #15164	; 0x3b3c
    2518:	e3403005 	movt	r3, #5
    251c:	e5d3300c 	ldrb	r3, [r3, #12]
    2520:	e3530002 	cmp	r3, #2
    2524:	1a000007 	bne	2548 <on_key_press+0x2e8>
            //GAME_STATE.RUN = !GAME_STATE.RUN;
            //setLED(0, GAME_STATE.RUN);
            GAME_STATE.MODE = TITLE;
    2528:	e3033b3c 	movw	r3, #15164	; 0x3b3c
    252c:	e3403005 	movt	r3, #5
    2530:	e3a02000 	mov	r2, #0
    2534:	e5c3200c 	strb	r2, [r3, #12]
            TITLE_INDEX = 0;
    2538:	e3033bc8 	movw	r3, #15304	; 0x3bc8
    253c:	e3403005 	movt	r3, #5
    2540:	e5832000 	str	r2, [r3]
    2544:	ea00000c 	b	257c <on_key_press+0x31c>
        } else if (GAME_STATE.MODE == OPTIONS) {
    2548:	e3033b3c 	movw	r3, #15164	; 0x3b3c
    254c:	e3403005 	movt	r3, #5
    2550:	e5d3300c 	ldrb	r3, [r3, #12]
    2554:	e3530001 	cmp	r3, #1
    2558:	1a000007 	bne	257c <on_key_press+0x31c>
            GAME_STATE.MODE = TITLE;
    255c:	e3033b3c 	movw	r3, #15164	; 0x3b3c
    2560:	e3403005 	movt	r3, #5
    2564:	e3a02000 	mov	r2, #0
    2568:	e5c3200c 	strb	r2, [r3, #12]
            TITLE_INDEX = 1;
    256c:	e3033bc8 	movw	r3, #15304	; 0x3bc8
    2570:	e3403005 	movt	r3, #5
    2574:	e3a02001 	mov	r2, #1
    2578:	e5832000 	str	r2, [r3]
        }
    }

    // Reset edge
    *(key_base + 3) = edge;
    257c:	e59d2004 	ldr	r2, [sp, #4]
    2580:	e3a03000 	mov	r3, #0
    2584:	e34f3f20 	movt	r3, #65312	; 0xff20
    2588:	e583205c 	str	r2, [r3, #92]	; 0x5c
}
    258c:	e28dd00c 	add	sp, sp, #12
    2590:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00002594 <on_priv_timer_tick>:

// Called on priv timer tick
void on_priv_timer_tick() {
    2594:	e92d4008 	push	{r3, lr}
    volatile int * priv_timer_base = (int *) MPCORE_PRIV_TIMER;

    // Update timer events if playing
    if (GAME_STATE.MODE == GAME && GAME_STATE.RUN) {
    2598:	e3033b3c 	movw	r3, #15164	; 0x3b3c
    259c:	e3403005 	movt	r3, #5
    25a0:	e5d3300c 	ldrb	r3, [r3, #12]
    25a4:	e3530002 	cmp	r3, #2
    25a8:	1a000033 	bne	267c <on_priv_timer_tick+0xe8>
    25ac:	e3033b3c 	movw	r3, #15164	; 0x3b3c
    25b0:	e3403005 	movt	r3, #5
    25b4:	e5d33000 	ldrb	r3, [r3]
    25b8:	e3530000 	cmp	r3, #0
    25bc:	0a00002e 	beq	267c <on_priv_timer_tick+0xe8>
        // Add 1ms to game time
        GAME_STATE.GAME_TIME++;
    25c0:	e3033b3c 	movw	r3, #15164	; 0x3b3c
    25c4:	e3403005 	movt	r3, #5
    25c8:	e5932004 	ldr	r2, [r3, #4]
    25cc:	e2822001 	add	r2, r2, #1
    25d0:	e5832004 	str	r2, [r3, #4]

        // Timer Events:

        // Check if time to change screen rotation direction
        if (!SETTINGS.DEBUG && SETTINGS.SCREEN_ROTATE) {
    25d4:	e3033b20 	movw	r3, #15136	; 0x3b20
    25d8:	e3403005 	movt	r3, #5
    25dc:	e5d33000 	ldrb	r3, [r3]
    25e0:	e3530000 	cmp	r3, #0
    25e4:	1a000024 	bne	267c <on_priv_timer_tick+0xe8>
    25e8:	e3033b20 	movw	r3, #15136	; 0x3b20
    25ec:	e3403005 	movt	r3, #5
    25f0:	e5d33004 	ldrb	r3, [r3, #4]
    25f4:	e3530000 	cmp	r3, #0
    25f8:	0a00001f 	beq	267c <on_priv_timer_tick+0xe8>
            SCREEN_ROTATION_CHANGE_TIMER--;
    25fc:	e3033bd8 	movw	r3, #15320	; 0x3bd8
    2600:	e3403005 	movt	r3, #5
    2604:	e5932000 	ldr	r2, [r3]
    2608:	e2422001 	sub	r2, r2, #1
    260c:	e5832000 	str	r2, [r3]
            if (SCREEN_ROTATION_CHANGE_TIMER == 0) {
    2610:	e5933000 	ldr	r3, [r3]
    2614:	e3530000 	cmp	r3, #0
    2618:	1a000017 	bne	267c <on_priv_timer_tick+0xe8>
                // Change screen rotation direction
                if (SETTINGS.SCREEN_ROTATION_DIRECTION == CLOCKWISE)
    261c:	e3033b20 	movw	r3, #15136	; 0x3b20
    2620:	e3403005 	movt	r3, #5
    2624:	e5d33005 	ldrb	r3, [r3, #5]
    2628:	e3530000 	cmp	r3, #0
                    SETTINGS.SCREEN_ROTATION_DIRECTION = COUNTER_CLOCKWISE;
    262c:	e3033b20 	movw	r3, #15136	; 0x3b20
    2630:	e3403005 	movt	r3, #5
    2634:	03a02001 	moveq	r2, #1
                else
                    SETTINGS.SCREEN_ROTATION_DIRECTION = CLOCKWISE;
    2638:	13a02000 	movne	r2, #0
    263c:	e5c32005 	strb	r2, [r3, #5]

                // Reset time to change direction
                SCREEN_ROTATION_CHANGE_TIMER = 100 * (7 + rand() % 7);
    2640:	eb001195 	bl	6c9c <rand>
    2644:	e3023493 	movw	r3, #9363	; 0x2493
    2648:	e3493249 	movt	r3, #37449	; 0x9249
    264c:	e0c32093 	smull	r2, r3, r3, r0
    2650:	e0833000 	add	r3, r3, r0
    2654:	e1a02fc0 	asr	r2, r0, #31
    2658:	e0623143 	rsb	r3, r2, r3, asr #2
    265c:	e0633183 	rsb	r3, r3, r3, lsl #3
    2660:	e0630000 	rsb	r0, r3, r0
    2664:	e3a02064 	mov	r2, #100	; 0x64
    2668:	e0020092 	mul	r2, r2, r0
    266c:	e2822faf 	add	r2, r2, #700	; 0x2bc
    2670:	e3033bd8 	movw	r3, #15320	; 0x3bd8
    2674:	e3403005 	movt	r3, #5
    2678:	e5832000 	str	r2, [r3]
                                    BACKGROUND_COLORS[1] : BACKGROUND_COLORS[0];
        }
    }*/

    // Reset Timer "F" Flag
    *(priv_timer_base + 3) = 1;
    267c:	e3a02001 	mov	r2, #1
    2680:	e3e03a13 	mvn	r3, #77824	; 0x13000
    2684:	e50329f3 	str	r2, [r3, #-2547]	; 0xfffff60d
    2688:	e8bd8008 	pop	{r3, pc}

0000268c <on_ps2_press>:
}

// Called on PS/2 interrupt
void on_ps2_press() {
    268c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2690:	e24dd014 	sub	sp, sp, #20
                    // Space Key
                    if (is_break && GAME_STATE.MODE == TITLE)
                        GAME_STATE.MODE = GAME;
                } else if (data == ESC) {
                    // Escape Key
                    if (is_break && GAME_STATE.MODE == GAME) {
    2694:	e3034b3c 	movw	r4, #15164	; 0x3b3c
    2698:	e3404005 	movt	r4, #5
                        GAME_STATE.MODE = TITLE;
                        TITLE_INDEX = 0;
                    } else if (is_break && GAME_STATE.MODE == OPTIONS) {
                        GAME_STATE.MODE = TITLE;
                        TITLE_INDEX = 1;
    269c:	e3035bc8 	movw	r5, #15304	; 0x3bc8
    26a0:	e3405005 	movt	r5, #5
                        if (TITLE_INDEX == 0) {
                            GAME_STATE.MODE = GAME;
                            INIT_GAME_REQUEST = true;
                        } else if (TITLE_INDEX == 1) {
                            GAME_STATE.MODE = OPTIONS;
                            OPTIONS_INDEX = 0;
    26a4:	e3039bd4 	movw	r9, #15316	; 0x3bd4
    26a8:	e3409005 	movt	r9, #5
                if (data == ENTER_KEY) {
                    // Enter Key
                    if (is_break && GAME_STATE.MODE == TITLE) {
                        if (TITLE_INDEX == 0) {
                            GAME_STATE.MODE = GAME;
                            INIT_GAME_REQUEST = true;
    26ac:	e303ab4c 	movw	r10, #15180	; 0x3b4c
    26b0:	e340a005 	movt	r10, #5
                    if (GAME_STATE.MODE == GAME) {
                        PLAYER.move_left = !is_break;
                        if (is_break && SETTINGS.CONTROL_SCHEME == DISCRETE && SETTINGS.INPUT_TYPE == KEYBOARD)
                            movePlayerLeft(&PLAYER);
                    } else if (GAME_STATE.MODE == TITLE) {
                        TITLE_INDEX = (TITLE_SIZE + TITLE_INDEX - 1) % TITLE_SIZE;
    26b4:	e3037bc4 	movw	r7, #15300	; 0x3bc4
    26b8:	e3407005 	movt	r7, #5
                        cycleOptionRight();
                    }
                } else if (data == LEFT_ARROW) {
                    // Left Arrow
                    if (GAME_STATE.MODE == GAME) {
                        PLAYER.move_left = !is_break;
    26bc:	e3038e70 	movw	r8, #15984	; 0x3e70
    26c0:	e3408005 	movt	r8, #5
    int RVALID;
    volatile char data;

    //RVALID = *ps2_base & 0x8000;
    //if (RVALID) {
        while (*(ps2_base+1) & 0b100000000) {
    26c4:	ea0000b4 	b	299c <on_ps2_press+0x310>
            data = *ps2_base & 0xFF;
    26c8:	e3a03000 	mov	r3, #0
    26cc:	e34f3f20 	movt	r3, #65312	; 0xff20
    26d0:	e5933100 	ldr	r3, [r3, #256]	; 0x100
    26d4:	e6ef3073 	uxtb	r3, r3
    26d8:	e5cd300f 	strb	r3, [sp, #15]
            if (data == EXTENDED_KEYS) {
    26dc:	e5dd300f 	ldrb	r3, [sp, #15]
    26e0:	e35300e0 	cmp	r3, #224	; 0xe0
    26e4:	1a00007a 	bne	28d4 <on_ps2_press+0x248>
                // Extended Key Press
                data = *ps2_base & 0xFF;
    26e8:	e3a03000 	mov	r3, #0
    26ec:	e34f3f20 	movt	r3, #65312	; 0xff20
    26f0:	e5933100 	ldr	r3, [r3, #256]	; 0x100
    26f4:	e6ef3073 	uxtb	r3, r3
    26f8:	e5cd300f 	strb	r3, [sp, #15]
                bool is_break = false;
                if (data == BREAK) {
    26fc:	e5dd300f 	ldrb	r3, [sp, #15]
    2700:	e35300f0 	cmp	r3, #240	; 0xf0
                    // Is Break
                    is_break = true;
                    data = *ps2_base & 0xFF;
    2704:	03a03000 	moveq	r3, #0
    2708:	034f3f20 	movteq	r3, #65312	; 0xff20
    270c:	05933100 	ldreq	r3, [r3, #256]	; 0x100
    2710:	06ef3073 	uxtbeq	r3, r3
    2714:	05cd300f 	strbeq	r3, [sp, #15]
                // Extended Key Press
                data = *ps2_base & 0xFF;
                bool is_break = false;
                if (data == BREAK) {
                    // Is Break
                    is_break = true;
    2718:	03a06001 	moveq	r6, #1
        while (*(ps2_base+1) & 0b100000000) {
            data = *ps2_base & 0xFF;
            if (data == EXTENDED_KEYS) {
                // Extended Key Press
                data = *ps2_base & 0xFF;
                bool is_break = false;
    271c:	13a06000 	movne	r6, #0
                if (data == BREAK) {
                    // Is Break
                    is_break = true;
                    data = *ps2_base & 0xFF;
                }
                if (data == RIGHT_ARROW) {
    2720:	e5dd300f 	ldrb	r3, [sp, #15]
    2724:	e3530074 	cmp	r3, #116	; 0x74
    2728:	1a000032 	bne	27f8 <on_ps2_press+0x16c>
                    // Right Arrow
                    if (GAME_STATE.MODE == GAME) {
    272c:	e5d4300c 	ldrb	r3, [r4, #12]
    2730:	e3530002 	cmp	r3, #2
    2734:	1a000021 	bne	27c0 <on_ps2_press+0x134>
                        PLAYER.move_right = !is_break;
    2738:	e2263001 	eor	r3, r6, #1
    273c:	e5c83014 	strb	r3, [r8, #20]
                        bool b1 = is_break;
                        bool b2 = SETTINGS.CONTROL_SCHEME == DISCRETE;
    2740:	e3033b20 	movw	r3, #15136	; 0x3b20
    2744:	e3403005 	movt	r3, #5
    2748:	e5d32016 	ldrb	r2, [r3, #22]
    274c:	e58d2004 	str	r2, [sp, #4]
                        bool b3 = SETTINGS.INPUT_TYPE == KEYBOARD;
    2750:	e5d3b015 	ldrb	r11, [r3, #21]
                        if (b1)
    2754:	e3560000 	cmp	r6, #0
    2758:	0a000001 	beq	2764 <on_ps2_press+0xd8>
                            turnOnLED(1);
    275c:	e3a00001 	mov	r0, #1
    2760:	ebfffaf0 	bl	1328 <turnOnLED>
                        if (b2)
    2764:	e59d3004 	ldr	r3, [sp, #4]
    2768:	e3530000 	cmp	r3, #0
    276c:	1a000001 	bne	2778 <on_ps2_press+0xec>
                            turnOnLED(2);
    2770:	e3a00002 	mov	r0, #2
    2774:	ebfffaeb 	bl	1328 <turnOnLED>
                        if (b3)
    2778:	e35b0001 	cmp	r11, #1
    277c:	1a000001 	bne	2788 <on_ps2_press+0xfc>
                            turnOnLED(3);
    2780:	e3a00003 	mov	r0, #3
    2784:	ebfffae7 	bl	1328 <turnOnLED>
                        if (is_break && SETTINGS.CONTROL_SCHEME == DISCRETE && SETTINGS.INPUT_TYPE == KEYBOARD) {
    2788:	e3560000 	cmp	r6, #0
    278c:	0a000082 	beq	299c <on_ps2_press+0x310>
    2790:	e3033b20 	movw	r3, #15136	; 0x3b20
    2794:	e3403005 	movt	r3, #5
    2798:	e5933014 	ldr	r3, [r3, #20]
    279c:	e3c334ff 	bic	r3, r3, #-16777216	; 0xff000000
    27a0:	e3c330ff 	bic	r3, r3, #255	; 0xff
    27a4:	e3530c01 	cmp	r3, #256	; 0x100
    27a8:	1a00007b 	bne	299c <on_ps2_press+0x310>
                            turnOnLED(4);
    27ac:	e3a00004 	mov	r0, #4
    27b0:	ebfffadc 	bl	1328 <turnOnLED>
                            movePlayerRight(&PLAYER);
    27b4:	e1a00008 	mov	r0, r8
    27b8:	eb0000e4 	bl	2b50 <movePlayerRight>
    27bc:	ea000076 	b	299c <on_ps2_press+0x310>
                        }
                    } else if (GAME_STATE.MODE == TITLE) {
    27c0:	e5d4300c 	ldrb	r3, [r4, #12]
    27c4:	e3530000 	cmp	r3, #0
    27c8:	1a000005 	bne	27e4 <on_ps2_press+0x158>
                        TITLE_INDEX = (TITLE_INDEX + 1) % TITLE_SIZE;
    27cc:	e5950000 	ldr	r0, [r5]
    27d0:	e2800001 	add	r0, r0, #1
    27d4:	e5971000 	ldr	r1, [r7]
    27d8:	eb000c00 	bl	57e0 <__aeabi_idivmod>
    27dc:	e5851000 	str	r1, [r5]
    27e0:	ea00006d 	b	299c <on_ps2_press+0x310>
                    } else if (GAME_STATE.MODE == OPTIONS) {
    27e4:	e5d4300c 	ldrb	r3, [r4, #12]
    27e8:	e3530001 	cmp	r3, #1
    27ec:	1a00006a 	bne	299c <on_ps2_press+0x310>
                        cycleOptionRight();
    27f0:	ebfffe0c 	bl	2028 <cycleOptionRight>
    27f4:	ea000068 	b	299c <on_ps2_press+0x310>
                    }
                } else if (data == LEFT_ARROW) {
    27f8:	e5dd300f 	ldrb	r3, [sp, #15]
    27fc:	e353006b 	cmp	r3, #107	; 0x6b
    2800:	1a00001f 	bne	2884 <on_ps2_press+0x1f8>
                    // Left Arrow
                    if (GAME_STATE.MODE == GAME) {
    2804:	e5d4300c 	ldrb	r3, [r4, #12]
    2808:	e3530002 	cmp	r3, #2
    280c:	1a00000d 	bne	2848 <on_ps2_press+0x1bc>
                        PLAYER.move_left = !is_break;
    2810:	e2263001 	eor	r3, r6, #1
    2814:	e5c83015 	strb	r3, [r8, #21]
                        if (is_break && SETTINGS.CONTROL_SCHEME == DISCRETE && SETTINGS.INPUT_TYPE == KEYBOARD)
    2818:	e3560000 	cmp	r6, #0
    281c:	0a00005e 	beq	299c <on_ps2_press+0x310>
    2820:	e3033b20 	movw	r3, #15136	; 0x3b20
    2824:	e3403005 	movt	r3, #5
    2828:	e5933014 	ldr	r3, [r3, #20]
    282c:	e3c334ff 	bic	r3, r3, #-16777216	; 0xff000000
    2830:	e3c330ff 	bic	r3, r3, #255	; 0xff
    2834:	e3530c01 	cmp	r3, #256	; 0x100
    2838:	1a000057 	bne	299c <on_ps2_press+0x310>
                            movePlayerLeft(&PLAYER);
    283c:	e1a00008 	mov	r0, r8
    2840:	eb0000e8 	bl	2be8 <movePlayerLeft>
    2844:	ea000054 	b	299c <on_ps2_press+0x310>
                    } else if (GAME_STATE.MODE == TITLE) {
    2848:	e5d4300c 	ldrb	r3, [r4, #12]
    284c:	e3530000 	cmp	r3, #0
    2850:	1a000006 	bne	2870 <on_ps2_press+0x1e4>
                        TITLE_INDEX = (TITLE_SIZE + TITLE_INDEX - 1) % TITLE_SIZE;
    2854:	e5971000 	ldr	r1, [r7]
    2858:	e5950000 	ldr	r0, [r5]
    285c:	e0810000 	add	r0, r1, r0
    2860:	e2400001 	sub	r0, r0, #1
    2864:	eb000bdd 	bl	57e0 <__aeabi_idivmod>
    2868:	e5851000 	str	r1, [r5]
    286c:	ea00004a 	b	299c <on_ps2_press+0x310>
                    } else if (GAME_STATE.MODE == OPTIONS) {
    2870:	e5d4300c 	ldrb	r3, [r4, #12]
    2874:	e3530001 	cmp	r3, #1
    2878:	1a000047 	bne	299c <on_ps2_press+0x310>
                        cycleOptionLeft();
    287c:	ebfffe1e 	bl	20fc <cycleOptionLeft>
    2880:	ea000045 	b	299c <on_ps2_press+0x310>
                    }
                } else if (data == UP_ARROW) {
    2884:	e5dd300f 	ldrb	r3, [sp, #15]
    2888:	e3530075 	cmp	r3, #117	; 0x75
    288c:	1a000006 	bne	28ac <on_ps2_press+0x220>
                    // Up Arrow
                    if (is_break && GAME_STATE.MODE == OPTIONS) {
    2890:	e3560000 	cmp	r6, #0
    2894:	0a000040 	beq	299c <on_ps2_press+0x310>
    2898:	e5d4300c 	ldrb	r3, [r4, #12]
    289c:	e3530001 	cmp	r3, #1
    28a0:	1a00003d 	bne	299c <on_ps2_press+0x310>
                        choosePreviousOption();
    28a4:	ebfffdd3 	bl	1ff8 <choosePreviousOption>
    28a8:	ea00003b 	b	299c <on_ps2_press+0x310>
                    }
                } else if (data == DOWN_ARROW) {
    28ac:	e5dd300f 	ldrb	r3, [sp, #15]
    28b0:	e3530072 	cmp	r3, #114	; 0x72
    28b4:	1a000038 	bne	299c <on_ps2_press+0x310>
                    // Down Arrow
                    if (is_break && GAME_STATE.MODE == OPTIONS) {
    28b8:	e3560000 	cmp	r6, #0
    28bc:	0a000036 	beq	299c <on_ps2_press+0x310>
    28c0:	e5d4300c 	ldrb	r3, [r4, #12]
    28c4:	e3530001 	cmp	r3, #1
    28c8:	1a000033 	bne	299c <on_ps2_press+0x310>
                        chooseNextOption();
    28cc:	ebfffdbe 	bl	1fcc <chooseNextOption>
    28d0:	ea000031 	b	299c <on_ps2_press+0x310>
                    }
                }
            } else {
                // Non Extended Key Press
                bool is_break = false;
                if (data == BREAK) {
    28d4:	e5dd300f 	ldrb	r3, [sp, #15]
    28d8:	e35300f0 	cmp	r3, #240	; 0xf0
    28dc:	1a000034 	bne	29b4 <on_ps2_press+0x328>
                    // Is Break
                    is_break = true;
                    data = *ps2_base & 0xFF;
    28e0:	e3a03000 	mov	r3, #0
    28e4:	e34f3f20 	movt	r3, #65312	; 0xff20
    28e8:	e5933100 	ldr	r3, [r3, #256]	; 0x100
    28ec:	e6ef3073 	uxtb	r3, r3
    28f0:	e5cd300f 	strb	r3, [sp, #15]
                }
                if (data == ENTER_KEY) {
    28f4:	e5dd300f 	ldrb	r3, [sp, #15]
    28f8:	e353005a 	cmp	r3, #90	; 0x5a
    28fc:	1a000030 	bne	29c4 <on_ps2_press+0x338>
                    // Enter Key
                    if (is_break && GAME_STATE.MODE == TITLE) {
    2900:	e5d4300c 	ldrb	r3, [r4, #12]
    2904:	e3530000 	cmp	r3, #0
    2908:	1a000023 	bne	299c <on_ps2_press+0x310>
                        if (TITLE_INDEX == 0) {
    290c:	e5953000 	ldr	r3, [r5]
    2910:	e3530000 	cmp	r3, #0
    2914:	1a000004 	bne	292c <on_ps2_press+0x2a0>
                            GAME_STATE.MODE = GAME;
    2918:	e3a03002 	mov	r3, #2
    291c:	e5c4300c 	strb	r3, [r4, #12]
                            INIT_GAME_REQUEST = true;
    2920:	e3a03001 	mov	r3, #1
    2924:	e5ca3000 	strb	r3, [r10]
    2928:	ea00001b 	b	299c <on_ps2_press+0x310>
                        } else if (TITLE_INDEX == 1) {
    292c:	e5953000 	ldr	r3, [r5]
    2930:	e3530001 	cmp	r3, #1
                            GAME_STATE.MODE = OPTIONS;
    2934:	05c4300c 	strbeq	r3, [r4, #12]
                            OPTIONS_INDEX = 0;
    2938:	03a03000 	moveq	r3, #0
    293c:	05893000 	streq	r3, [r9]
    2940:	ea000015 	b	299c <on_ps2_press+0x310>
                        }
                    }
                } else if (data == SPACE_KEY) {
                    // Space Key
                    if (is_break && GAME_STATE.MODE == TITLE)
    2944:	e5d4300c 	ldrb	r3, [r4, #12]
    2948:	e3530000 	cmp	r3, #0
                        GAME_STATE.MODE = GAME;
    294c:	03a03002 	moveq	r3, #2
    2950:	05c4300c 	strbeq	r3, [r4, #12]
    2954:	ea000010 	b	299c <on_ps2_press+0x310>
                } else if (data == ESC) {
    2958:	e5dd300f 	ldrb	r3, [sp, #15]
    295c:	e3530076 	cmp	r3, #118	; 0x76
    2960:	1a00000d 	bne	299c <on_ps2_press+0x310>
                    // Escape Key
                    if (is_break && GAME_STATE.MODE == GAME) {
    2964:	e3520000 	cmp	r2, #0
    2968:	0a00000b 	beq	299c <on_ps2_press+0x310>
    296c:	e5d4300c 	ldrb	r3, [r4, #12]
    2970:	e3530002 	cmp	r3, #2
                        GAME_STATE.MODE = TITLE;
    2974:	03a03000 	moveq	r3, #0
    2978:	05c4300c 	strbeq	r3, [r4, #12]
                        TITLE_INDEX = 0;
    297c:	05853000 	streq	r3, [r5]
                    // Space Key
                    if (is_break && GAME_STATE.MODE == TITLE)
                        GAME_STATE.MODE = GAME;
                } else if (data == ESC) {
                    // Escape Key
                    if (is_break && GAME_STATE.MODE == GAME) {
    2980:	0a000005 	beq	299c <on_ps2_press+0x310>
                        GAME_STATE.MODE = TITLE;
                        TITLE_INDEX = 0;
                    } else if (is_break && GAME_STATE.MODE == OPTIONS) {
    2984:	e5d4300c 	ldrb	r3, [r4, #12]
    2988:	e3530001 	cmp	r3, #1
                        GAME_STATE.MODE = TITLE;
    298c:	03a03000 	moveq	r3, #0
    2990:	05c4300c 	strbeq	r3, [r4, #12]
                        TITLE_INDEX = 1;
    2994:	03a03001 	moveq	r3, #1
    2998:	05853000 	streq	r3, [r5]
    int RVALID;
    volatile char data;

    //RVALID = *ps2_base & 0x8000;
    //if (RVALID) {
        while (*(ps2_base+1) & 0b100000000) {
    299c:	e3a03000 	mov	r3, #0
    29a0:	e34f3f20 	movt	r3, #65312	; 0xff20
    29a4:	e5933104 	ldr	r3, [r3, #260]	; 0x104
    29a8:	e3130c01 	tst	r3, #256	; 0x100
    29ac:	1affff45 	bne	26c8 <on_ps2_press+0x3c>
    29b0:	ea00000d 	b	29ec <on_ps2_press+0x360>
                if (data == BREAK) {
                    // Is Break
                    is_break = true;
                    data = *ps2_base & 0xFF;
                }
                if (data == ENTER_KEY) {
    29b4:	e5dd300f 	ldrb	r3, [sp, #15]
    29b8:	e353005a 	cmp	r3, #90	; 0x5a
    29bc:	1a000005 	bne	29d8 <on_ps2_press+0x34c>
    29c0:	eafffff5 	b	299c <on_ps2_press+0x310>
                        } else if (TITLE_INDEX == 1) {
                            GAME_STATE.MODE = OPTIONS;
                            OPTIONS_INDEX = 0;
                        }
                    }
                } else if (data == SPACE_KEY) {
    29c4:	e5dd300f 	ldrb	r3, [sp, #15]
    29c8:	e3530029 	cmp	r3, #41	; 0x29
            } else {
                // Non Extended Key Press
                bool is_break = false;
                if (data == BREAK) {
                    // Is Break
                    is_break = true;
    29cc:	13a02001 	movne	r2, #1
                        } else if (TITLE_INDEX == 1) {
                            GAME_STATE.MODE = OPTIONS;
                            OPTIONS_INDEX = 0;
                        }
                    }
                } else if (data == SPACE_KEY) {
    29d0:	1affffe0 	bne	2958 <on_ps2_press+0x2cc>
    29d4:	eaffffda 	b	2944 <on_ps2_press+0x2b8>
    29d8:	e5dd300f 	ldrb	r3, [sp, #15]
    29dc:	e3530029 	cmp	r3, #41	; 0x29
                        chooseNextOption();
                    }
                }
            } else {
                // Non Extended Key Press
                bool is_break = false;
    29e0:	13a02000 	movne	r2, #0
                        } else if (TITLE_INDEX == 1) {
                            GAME_STATE.MODE = OPTIONS;
                            OPTIONS_INDEX = 0;
                        }
                    }
                } else if (data == SPACE_KEY) {
    29e4:	1affffdb 	bne	2958 <on_ps2_press+0x2cc>
    29e8:	eaffffeb 	b	299c <on_ps2_press+0x310>
                    }
                }
            }
        }
    //}
    29ec:	e28dd014 	add	sp, sp, #20
    29f0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

000029f4 <__cs3_isr_irq>:
void __attribute__((interrupt)) __cs3_isr_fiq() {
    while (true);
}

// IRQ Interrupt Handler
void __attribute__((interrupt)) __cs3_isr_irq() {
    29f4:	e24ee004 	sub	lr, lr, #4
    29f8:	e92d500f 	push	{r0, r1, r2, r3, r12, lr}
    29fc:	e24dd008 	sub	sp, sp, #8
    volatile unsigned int *base = (unsigned int *) MPCORE_GIC_CPUIF;
    volatile unsigned int interrupt_id = *(base + 3);
    2a00:	e3e03a13 	mvn	r3, #77824	; 0x13000
    2a04:	e5133ef3 	ldr	r3, [r3, #-3827]	; 0xfffff10d
    2a08:	e58d3004 	str	r3, [sp, #4]

    // Find interrupt
    if (interrupt_id == KEYS_IRQ) {
    2a0c:	e59d3004 	ldr	r3, [sp, #4]
    2a10:	e3530049 	cmp	r3, #73	; 0x49
    2a14:	1a000001 	bne	2a20 <__cs3_isr_irq+0x2c>
        // Key Interrupt
        on_key_press();
    2a18:	ebfffe10 	bl	2260 <on_key_press>
    2a1c:	ea000008 	b	2a44 <__cs3_isr_irq+0x50>
    } else if (interrupt_id == MPCORE_PRIV_TIMER_IRQ) {
    2a20:	e59d3004 	ldr	r3, [sp, #4]
    2a24:	e353001d 	cmp	r3, #29
    2a28:	1a000001 	bne	2a34 <__cs3_isr_irq+0x40>
        // 200MHz Timer Interrupt
        on_priv_timer_tick();
    2a2c:	ebfffed8 	bl	2594 <on_priv_timer_tick>
    2a30:	ea000003 	b	2a44 <__cs3_isr_irq+0x50>
    } else if (interrupt_id == PS2_IRQ) {
    2a34:	e59d3004 	ldr	r3, [sp, #4]
    2a38:	e353004f 	cmp	r3, #79	; 0x4f
    2a3c:	1a000000 	bne	2a44 <__cs3_isr_irq+0x50>
        // PS2 Interrupt
        on_ps2_press();
    2a40:	ebffff11 	bl	268c <on_ps2_press>
    }

    // Clear the interrupt
    *(base+4) = interrupt_id;
    2a44:	e59d2004 	ldr	r2, [sp, #4]
    2a48:	e3e03a13 	mvn	r3, #77824	; 0x13000
    2a4c:	e5032eef 	str	r2, [r3, #-3823]	; 0xfffff111
}
    2a50:	e28dd008 	add	sp, sp, #8
    2a54:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, r12, pc}^

00002a58 <enable_interrupt>:

    volatile unsigned int * dist_base = (unsigned int *) MPCORE_GIC_DIST;
    *dist_base = 1;
}

void enable_interrupt(int interrupt_id) {
    2a58:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    2a5c:	e24dd024 	sub	sp, sp, #36	; 0x24
    // ICDISER Config
    volatile int reg_offset = (interrupt_id / 32) * 4;
    2a60:	e280301f 	add	r3, r0, #31
    2a64:	e3500000 	cmp	r0, #0
    2a68:	a1a03000 	movge	r3, r0
    2a6c:	e1a032c3 	asr	r3, r3, #5
    2a70:	e1a03103 	lsl	r3, r3, #2
    2a74:	e58d301c 	str	r3, [sp, #28]
    volatile unsigned int dist_addr = MPCORE_GIC_DIST;
    2a78:	e3a03a0d 	mov	r3, #53248	; 0xd000
    2a7c:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    2a80:	e58d3018 	str	r3, [sp, #24]
    volatile unsigned int icdiser = dist_addr + ICDISER;
    2a84:	e59d3018 	ldr	r3, [sp, #24]
    2a88:	e2833c01 	add	r3, r3, #256	; 0x100
    2a8c:	e58d3014 	str	r3, [sp, #20]
    volatile unsigned int * addr = (unsigned int *) (icdiser + reg_offset);
    2a90:	e59d2014 	ldr	r2, [sp, #20]
    2a94:	e59d101c 	ldr	r1, [sp, #28]

    volatile unsigned int value = interrupt_id & 0x1F;
    2a98:	e200301f 	and	r3, r0, #31
    2a9c:	e58d3010 	str	r3, [sp, #16]
    value = 1 << value;
    2aa0:	e59dc010 	ldr	r12, [sp, #16]
    2aa4:	e3a03001 	mov	r3, #1
    2aa8:	e1a0cc13 	lsl	r12, r3, r12
    2aac:	e58dc010 	str	r12, [sp, #16]

    volatile unsigned int reg_value = *addr;
    2ab0:	e791c002 	ldr	r12, [r1, r2]
    2ab4:	e58dc00c 	str	r12, [sp, #12]
    reg_value = reg_value | value;
    2ab8:	e59dc00c 	ldr	r12, [sp, #12]
    2abc:	e59d4010 	ldr	r4, [sp, #16]
    2ac0:	e184c00c 	orr	r12, r4, r12
    2ac4:	e58dc00c 	str	r12, [sp, #12]
    *addr = reg_value;
    2ac8:	e59dc00c 	ldr	r12, [sp, #12]
    2acc:	e781c002 	str	r12, [r1, r2]

    // ICDIPTR Config
    reg_offset = (interrupt_id/4) * 4;
    2ad0:	e2802003 	add	r2, r0, #3
    2ad4:	a1a02000 	movge	r2, r0
    2ad8:	e3c22003 	bic	r2, r2, #3
    2adc:	e58d201c 	str	r2, [sp, #28]
    volatile unsigned int icdiptr = dist_addr + ICDIPTR;
    2ae0:	e59d2018 	ldr	r2, [sp, #24]
    2ae4:	e2822b02 	add	r2, r2, #2048	; 0x800
    2ae8:	e58d2008 	str	r2, [sp, #8]
    volatile char * addr2 = (char *) (icdiptr + reg_offset);
    2aec:	e59d2008 	ldr	r2, [sp, #8]
    2af0:	e59d101c 	ldr	r1, [sp, #28]
    2af4:	e0811002 	add	r1, r1, r2
    volatile unsigned int index = interrupt_id & 0x3;
    2af8:	e2000003 	and	r0, r0, #3
    2afc:	e58d0004 	str	r0, [sp, #4]
    char value2 = CPU0;
    addr2 += index;
    2b00:	e59d2004 	ldr	r2, [sp, #4]
    //value = value << (4 * index);
    //value = (*addr) | value;
    *addr2 = value2;
    2b04:	e7c13002 	strb	r3, [r1, r2]

    2b08:	e28dd024 	add	sp, sp, #36	; 0x24
    2b0c:	e8bd0010 	ldmfd	sp!, {r4}
    2b10:	e12fff1e 	bx	lr

00002b14 <config_gic>:
#include "config_gic.h"
#include "interrupt_ids.h"

void config_gic() {
    2b14:	e92d4008 	push	{r3, lr}
    enable_interrupt(KEYS_IRQ);
    2b18:	e3a00049 	mov	r0, #73	; 0x49
    2b1c:	ebffffcd 	bl	2a58 <enable_interrupt>
    enable_interrupt(MPCORE_PRIV_TIMER_IRQ);
    2b20:	e3a0001d 	mov	r0, #29
    2b24:	ebffffcb 	bl	2a58 <enable_interrupt>
    enable_interrupt(PS2_IRQ);
    2b28:	e3a0004f 	mov	r0, #79	; 0x4f
    2b2c:	ebffffc9 	bl	2a58 <enable_interrupt>

    volatile unsigned int * cpu_base = (unsigned int *) MPCORE_GIC_CPUIF;
    *(cpu_base + 1) = 0xFFFF;
    2b30:	e3e02a13 	mvn	r2, #77824	; 0x13000
    2b34:	e30f3fff 	movw	r3, #65535	; 0xffff
    2b38:	e5023efb 	str	r3, [r2, #-3835]	; 0xfffff105
    *cpu_base = 1;
    2b3c:	e3a03001 	mov	r3, #1
    2b40:	e5023eff 	str	r3, [r2, #-3839]	; 0xfffff101

    volatile unsigned int * dist_base = (unsigned int *) MPCORE_GIC_DIST;
    *dist_base = 1;
    2b44:	e3e02a12 	mvn	r2, #73728	; 0x12000
    2b48:	e5023fff 	str	r3, [r2, #-4095]	; 0xfffff001
    2b4c:	e8bd8008 	pop	{r3, pc}

00002b50 <movePlayerRight>:
        if (player->move_right)
            movePlayerRight(player);
    }
}

void movePlayerRight(Player* player) {
    2b50:	e92d4038 	push	{r3, r4, r5, lr}
    2b54:	e1a04000 	mov	r4, r0
    if (!GAME_STATE.RUN)
    2b58:	e3033b3c 	movw	r3, #15164	; 0x3b3c
    2b5c:	e3403005 	movt	r3, #5
    2b60:	e5d33000 	ldrb	r3, [r3]
    2b64:	e3530000 	cmp	r3, #0
    2b68:	08bd8038 	popeq	{r3, r4, r5, pc}
        return;
    if (SETTINGS.CONTROL_SCHEME == DISCRETE)
    2b6c:	e3033b20 	movw	r3, #15136	; 0x3b20
    2b70:	e3403005 	movt	r3, #5
    2b74:	e5d33016 	ldrb	r3, [r3, #22]
    2b78:	e3530000 	cmp	r3, #0
    2b7c:	1a000009 	bne	2ba8 <movePlayerRight+0x58>
        player->section = (player->section + 1) % 6;
    2b80:	e5903000 	ldr	r3, [r0]
    2b84:	e2833001 	add	r3, r3, #1
    2b88:	e30a2aab 	movw	r2, #43691	; 0xaaab
    2b8c:	e3422aaa 	movt	r2, #10922	; 0x2aaa
    2b90:	e0c21392 	smull	r1, r2, r2, r3
    2b94:	e0422fc3 	sub	r2, r2, r3, asr #31
    2b98:	e0822082 	add	r2, r2, r2, lsl #1
    2b9c:	e0433082 	sub	r3, r3, r2, lsl #1
    2ba0:	e5803000 	str	r3, [r0]
    2ba4:	e8bd8038 	pop	{r3, r4, r5, pc}
    else {
        player->rotation += player->speed;
    2ba8:	e590000c 	ldr	r0, [r0, #12]
    2bac:	e5941010 	ldr	r1, [r4, #16]
    2bb0:	eb000dd4 	bl	6308 <__addsf3>
    2bb4:	e1a05000 	mov	r5, r0
        if (player->rotation >= 360)
    2bb8:	e3a01000 	mov	r1, #0
    2bbc:	e34413b4 	movt	r1, #17332	; 0x43b4
    2bc0:	eb000f6f 	bl	6984 <__aeabi_fcmpge>
    2bc4:	e3500000 	cmp	r0, #0
    if (!GAME_STATE.RUN)
        return;
    if (SETTINGS.CONTROL_SCHEME == DISCRETE)
        player->section = (player->section + 1) % 6;
    else {
        player->rotation += player->speed;
    2bc8:	0584500c 	streq	r5, [r4, #12]
        if (player->rotation >= 360)
    2bcc:	08bd8038 	popeq	{r3, r4, r5, pc}
            player->rotation -= 360;
    2bd0:	e1a00005 	mov	r0, r5
    2bd4:	e3a01000 	mov	r1, #0
    2bd8:	e34413b4 	movt	r1, #17332	; 0x43b4
    2bdc:	eb000dc8 	bl	6304 <__aeabi_fsub>
    2be0:	e584000c 	str	r0, [r4, #12]
    2be4:	e8bd8038 	pop	{r3, r4, r5, pc}

00002be8 <movePlayerLeft>:
    }
}

void movePlayerLeft(Player* player) {
    2be8:	e92d4038 	push	{r3, r4, r5, lr}
    2bec:	e1a04000 	mov	r4, r0
    if (!GAME_STATE.RUN)
    2bf0:	e3033b3c 	movw	r3, #15164	; 0x3b3c
    2bf4:	e3403005 	movt	r3, #5
    2bf8:	e5d33000 	ldrb	r3, [r3]
    2bfc:	e3530000 	cmp	r3, #0
    2c00:	08bd8038 	popeq	{r3, r4, r5, pc}
        return;
    if (SETTINGS.CONTROL_SCHEME == DISCRETE) {
    2c04:	e3033b20 	movw	r3, #15136	; 0x3b20
    2c08:	e3403005 	movt	r3, #5
    2c0c:	e5d33016 	ldrb	r3, [r3, #22]
    2c10:	e3530000 	cmp	r3, #0
    2c14:	1a000005 	bne	2c30 <movePlayerLeft+0x48>
        if (player->section == 0)
    2c18:	e5903000 	ldr	r3, [r0]
    2c1c:	e3530000 	cmp	r3, #0
            player->section = 5;
    2c20:	03a03005 	moveq	r3, #5
        else
            player->section--;
    2c24:	12433001 	subne	r3, r3, #1
    2c28:	e5803000 	str	r3, [r0]
    2c2c:	e8bd8038 	pop	{r3, r4, r5, pc}
    } else {
        player->rotation -= player->speed;
    2c30:	e590000c 	ldr	r0, [r0, #12]
    2c34:	e5941010 	ldr	r1, [r4, #16]
    2c38:	eb000db1 	bl	6304 <__aeabi_fsub>
    2c3c:	e1a05000 	mov	r5, r0
        if (player->rotation < 0)
    2c40:	e3a01000 	mov	r1, #0
    2c44:	eb000f42 	bl	6954 <__aeabi_fcmplt>
    2c48:	e3500000 	cmp	r0, #0
        if (player->section == 0)
            player->section = 5;
        else
            player->section--;
    } else {
        player->rotation -= player->speed;
    2c4c:	0584500c 	streq	r5, [r4, #12]
        if (player->rotation < 0)
    2c50:	08bd8038 	popeq	{r3, r4, r5, pc}
            player->rotation += 360;
    2c54:	e1a00005 	mov	r0, r5
    2c58:	e3a01000 	mov	r1, #0
    2c5c:	e34413b4 	movt	r1, #17332	; 0x43b4
    2c60:	eb000da8 	bl	6308 <__addsf3>
    2c64:	e584000c 	str	r0, [r4, #12]
    2c68:	e8bd8038 	pop	{r3, r4, r5, pc}

00002c6c <updatePlayer>:
#include "utils.h"
#include "globals.h"
#include "address_map_arm.h"
#include "defines.h"

void updatePlayer(Player* player) {
    2c6c:	e92d4010 	push	{r4, lr}
    2c70:	e1a04000 	mov	r4, r0
    // Continuous Control Scheme Only
    if (SETTINGS.CONTROL_SCHEME != CONTINUOUS) {
    2c74:	e3033b20 	movw	r3, #15136	; 0x3b20
    2c78:	e3403005 	movt	r3, #5
    2c7c:	e5d33016 	ldrb	r3, [r3, #22]
    2c80:	e3530001 	cmp	r3, #1
    2c84:	18bd8010 	popne	{r4, pc}
        //printf("!!! NOT CONTINUOUS !!!");
        //printf("ControlSheme: %d", (int) SETTINGS.CONTROL_SCHEME);
        //printf("Address: %d", (int) &SETTINGS.CONTROL_SCHEME);
        return;
    }
    if (SETTINGS.INPUT_TYPE == KEYS) {
    2c88:	e3033b20 	movw	r3, #15136	; 0x3b20
    2c8c:	e3403005 	movt	r3, #5
    2c90:	e5d33015 	ldrb	r3, [r3, #21]
    2c94:	e3530000 	cmp	r3, #0
    2c98:	1a00000c 	bne	2cd0 <updatePlayer+0x64>
        volatile int *keys = (int *) KEY_BASE;
        if (*keys & KEY0) {
    2c9c:	e34f3f20 	movt	r3, #65312	; 0xff20
    2ca0:	e5933050 	ldr	r3, [r3, #80]	; 0x50
    2ca4:	e3130001 	tst	r3, #1
    2ca8:	0a000001 	beq	2cb4 <updatePlayer+0x48>
            // Key 0 held
            movePlayerRight(player);
    2cac:	ebffffa7 	bl	2b50 <movePlayerRight>
    2cb0:	e8bd8010 	pop	{r4, pc}
        } else if (*keys & KEY1) {
    2cb4:	e3a03000 	mov	r3, #0
    2cb8:	e34f3f20 	movt	r3, #65312	; 0xff20
    2cbc:	e5933050 	ldr	r3, [r3, #80]	; 0x50
    2cc0:	e3130002 	tst	r3, #2
    2cc4:	08bd8010 	popeq	{r4, pc}
            // Key 1 held
            movePlayerLeft(player);
    2cc8:	ebffffc6 	bl	2be8 <movePlayerLeft>
    2ccc:	e8bd8010 	pop	{r4, pc}
        }
    } else if (SETTINGS.INPUT_TYPE == KEYBOARD) {
    2cd0:	e3530001 	cmp	r3, #1
    2cd4:	18bd8010 	popne	{r4, pc}
        if (player->move_right && player->move_left)
    2cd8:	e5d03014 	ldrb	r3, [r0, #20]
    2cdc:	e3530000 	cmp	r3, #0
    2ce0:	0a000003 	beq	2cf4 <updatePlayer+0x88>
    2ce4:	e5d03015 	ldrb	r3, [r0, #21]
    2ce8:	e3530000 	cmp	r3, #0
    2cec:	18bd8010 	popne	{r4, pc}
    2cf0:	ea000006 	b	2d10 <updatePlayer+0xa4>
            return;
        if (player->move_left)
    2cf4:	e5d03015 	ldrb	r3, [r0, #21]
    2cf8:	e3530000 	cmp	r3, #0
    2cfc:	08bd8010 	popeq	{r4, pc}
            movePlayerLeft(player);
    2d00:	ebffffb8 	bl	2be8 <movePlayerLeft>
        if (player->move_right)
    2d04:	e5d43014 	ldrb	r3, [r4, #20]
    2d08:	e3530000 	cmp	r3, #0
    2d0c:	08bd8010 	popeq	{r4, pc}
            movePlayerRight(player);
    2d10:	e1a00004 	mov	r0, r4
    2d14:	ebffff8d 	bl	2b50 <movePlayerRight>
    2d18:	e8bd8010 	pop	{r4, pc}

00002d1c <isPlayerHit>:
            return true;
    }
    return false;
}

bool isPlayerHit(Player player, Hexagon hex) {
    2d1c:	e24dd010 	sub	sp, sp, #16
    2d20:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    2d24:	e28dc014 	add	r12, sp, #20
    2d28:	e98c000f 	stmib	r12, {r0, r1, r2, r3}
    2d2c:	e59d00c0 	ldr	r0, [sp, #192]	; 0xc0
    if (SETTINGS.CONTROL_SCHEME == DISCRETE && player.section == hex.missing_segment)
    2d30:	e3033b20 	movw	r3, #15136	; 0x3b20
    2d34:	e3403005 	movt	r3, #5
    2d38:	e5d32016 	ldrb	r2, [r3, #22]
    2d3c:	e3520000 	cmp	r2, #0
    2d40:	1a000003 	bne	2d54 <isPlayerHit+0x38>
    2d44:	e59d3018 	ldr	r3, [sp, #24]
    2d48:	e1530000 	cmp	r3, r0
        return false;
    2d4c:	03a00000 	moveq	r0, #0
    }
    return false;
}

bool isPlayerHit(Player player, Hexagon hex) {
    if (SETTINGS.CONTROL_SCHEME == DISCRETE && player.section == hex.missing_segment)
    2d50:	0a00006e 	beq	2f10 <isPlayerHit+0x1f4>
        return false;

    int playerBottom = ORIGIN_PADDING + PLAYER_PADDING;
    int playerTop = playerBottom + player.height;

    int hexTop = hex.y;
    2d54:	e59d30c4 	ldr	r3, [sp, #196]	; 0xc4
bool isPlayerHit(Player player, Hexagon hex) {
    if (SETTINGS.CONTROL_SCHEME == DISCRETE && player.section == hex.missing_segment)
        return false;

    int playerBottom = ORIGIN_PADDING + PLAYER_PADDING;
    int playerTop = playerBottom + player.height;
    2d58:	e59dc01c 	ldr	r12, [sp, #28]
    2d5c:	e28cc00f 	add	r12, r12, #15

    int hexTop = hex.y;
    int hexBottom = 1 + hexTop - hex.height;
    2d60:	e2834001 	add	r4, r3, #1
    2d64:	e59d10c8 	ldr	r1, [sp, #200]	; 0xc8
    2d68:	e0611004 	rsb	r1, r1, r4

    if (hexBottom >= playerTop)
    2d6c:	e15c0001 	cmp	r12, r1
        return false;
    2d70:	d3a00000 	movle	r0, #0
    int playerTop = playerBottom + player.height;

    int hexTop = hex.y;
    int hexBottom = 1 + hexTop - hex.height;

    if (hexBottom >= playerTop)
    2d74:	da000065 	ble	2f10 <isPlayerHit+0x1f4>
        return false;
    if (hexTop <= playerBottom)
    2d78:	e353000f 	cmp	r3, #15
        return false;
    2d7c:	d3a00000 	movle	r0, #0
    int hexTop = hex.y;
    int hexBottom = 1 + hexTop - hex.height;

    if (hexBottom >= playerTop)
        return false;
    if (hexTop <= playerBottom)
    2d80:	da000062 	ble	2f10 <isPlayerHit+0x1f4>
        return false;

    if (SETTINGS.CONTROL_SCHEME == DISCRETE)
    2d84:	e3520000 	cmp	r2, #0
        return true;
    2d88:	03a00001 	moveq	r0, #1
    if (hexBottom >= playerTop)
        return false;
    if (hexTop <= playerBottom)
        return false;

    if (SETTINGS.CONTROL_SCHEME == DISCRETE)
    2d8c:	0a00005f 	beq	2f10 <isPlayerHit+0x1f4>
        return true;

    float seg_x = (ROTATION_ANGLE * hex.missing_segment + hex.rotation);
    2d90:	e0600200 	rsb	r0, r0, r0, lsl #4
    2d94:	e1a00100 	lsl	r0, r0, #2
    2d98:	eb000dcb 	bl	64cc <__aeabi_i2f>
    2d9c:	e59d10d0 	ldr	r1, [sp, #208]	; 0xd0
    2da0:	eb000d58 	bl	6308 <__addsf3>
    2da4:	e1a04000 	mov	r4, r0
    if (seg_x >= 360)
    2da8:	e3a01000 	mov	r1, #0
    2dac:	e34413b4 	movt	r1, #17332	; 0x43b4
    2db0:	eb000ef3 	bl	6984 <__aeabi_fcmpge>
    2db4:	e3500000 	cmp	r0, #0
    2db8:	0a000004 	beq	2dd0 <isPlayerHit+0xb4>
        seg_x -= 360;
    2dbc:	e1a00004 	mov	r0, r4
    2dc0:	e3a01000 	mov	r1, #0
    2dc4:	e34413b4 	movt	r1, #17332	; 0x43b4
    2dc8:	eb000d4d 	bl	6304 <__aeabi_fsub>
    2dcc:	e1a04000 	mov	r4, r0
    float seg_width = (ROTATION_ANGLE / 2) - 5;

    float seg_left = seg_x - seg_width;
    2dd0:	e1a00004 	mov	r0, r4
    2dd4:	e3a01000 	mov	r1, #0
    2dd8:	e34411c8 	movt	r1, #16840	; 0x41c8
    2ddc:	eb000d48 	bl	6304 <__aeabi_fsub>
    2de0:	e1a06000 	mov	r6, r0
    bool is_seg_broken = false;
    if (seg_left < 0) {
    2de4:	e3a01000 	mov	r1, #0
    2de8:	eb000ed9 	bl	6954 <__aeabi_fcmplt>
    2dec:	e3500000 	cmp	r0, #0
    if (seg_x >= 360)
        seg_x -= 360;
    float seg_width = (ROTATION_ANGLE / 2) - 5;

    float seg_left = seg_x - seg_width;
    bool is_seg_broken = false;
    2df0:	03a07000 	moveq	r7, #0
    if (seg_left < 0) {
    2df4:	0a000006 	beq	2e14 <isPlayerHit+0xf8>
        seg_left += 360;
    2df8:	e1a00006 	mov	r0, r6
    2dfc:	e3a01000 	mov	r1, #0
    2e00:	e34413b4 	movt	r1, #17332	; 0x43b4
    2e04:	eb000d3f 	bl	6308 <__addsf3>
    2e08:	e1a06000 	mov	r6, r0
        is_seg_broken = true;
    2e0c:	e3a07001 	mov	r7, #1
    2e10:	eaffffff 	b	2e14 <isPlayerHit+0xf8>
    }
    float seg_right = seg_x + seg_width;
    2e14:	e1a00004 	mov	r0, r4
    2e18:	e3a01000 	mov	r1, #0
    2e1c:	e34411c8 	movt	r1, #16840	; 0x41c8
    2e20:	eb000d38 	bl	6308 <__addsf3>
    2e24:	e1a05000 	mov	r5, r0
    if (seg_right >= 360) {
    2e28:	e3a01000 	mov	r1, #0
    2e2c:	e34413b4 	movt	r1, #17332	; 0x43b4
    2e30:	eb000ed3 	bl	6984 <__aeabi_fcmpge>
    2e34:	e3500000 	cmp	r0, #0
    2e38:	0a000006 	beq	2e58 <isPlayerHit+0x13c>
        seg_right -= 360;
    2e3c:	e1a00005 	mov	r0, r5
    2e40:	e3a01000 	mov	r1, #0
    2e44:	e34413b4 	movt	r1, #17332	; 0x43b4
    2e48:	eb000d2d 	bl	6304 <__aeabi_fsub>
    2e4c:	e1a05000 	mov	r5, r0
        is_seg_broken = true;
    }

    float player_x = player.rotation;
    2e50:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
    2e54:	ea000002 	b	2e64 <isPlayerHit+0x148>
    2e58:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
    if (is_seg_broken) {
    2e5c:	e3570000 	cmp	r7, #0
    2e60:	0a000019 	beq	2ecc <isPlayerHit+0x1b0>
        if (player_x > seg_left && player_x < 360)
    2e64:	e1a00006 	mov	r0, r6
    2e68:	e1a01004 	mov	r1, r4
    2e6c:	eb000eb8 	bl	6954 <__aeabi_fcmplt>
    2e70:	e3500000 	cmp	r0, #0
    2e74:	0a000006 	beq	2e94 <isPlayerHit+0x178>
    2e78:	e1a00004 	mov	r0, r4
    2e7c:	e3a01000 	mov	r1, #0
    2e80:	e34413b4 	movt	r1, #17332	; 0x43b4
    2e84:	eb000eb2 	bl	6954 <__aeabi_fcmplt>
    2e88:	e3500000 	cmp	r0, #0
            return false;
    2e8c:	13a00000 	movne	r0, #0
        is_seg_broken = true;
    }

    float player_x = player.rotation;
    if (is_seg_broken) {
        if (player_x > seg_left && player_x < 360)
    2e90:	1a00001e 	bne	2f10 <isPlayerHit+0x1f4>
            return false;
        if (player_x >= 0 && player_x < seg_right)
    2e94:	e1a00004 	mov	r0, r4
    2e98:	e3a01000 	mov	r1, #0
    2e9c:	eb000eb8 	bl	6984 <__aeabi_fcmpge>
    2ea0:	e3500000 	cmp	r0, #0
    2ea4:	0a000017 	beq	2f08 <isPlayerHit+0x1ec>
    2ea8:	e3a06001 	mov	r6, #1
    2eac:	e1a00005 	mov	r0, r5
    2eb0:	e1a01004 	mov	r1, r4
    2eb4:	eb000eb8 	bl	699c <__aeabi_fcmpgt>
    2eb8:	e3500000 	cmp	r0, #0
    2ebc:	03a06000 	moveq	r6, #0
    2ec0:	e2260001 	eor	r0, r6, #1
    2ec4:	e6ef0070 	uxtb	r0, r0
    2ec8:	ea000010 	b	2f10 <isPlayerHit+0x1f4>
            return false;
        return true;
    }
    if (player_x > seg_left && player_x < seg_right)
    2ecc:	e1a00006 	mov	r0, r6
    2ed0:	e1a01004 	mov	r1, r4
    2ed4:	eb000e9e 	bl	6954 <__aeabi_fcmplt>
    2ed8:	e3500000 	cmp	r0, #0
        return false;
    return true;
    2edc:	03a00001 	moveq	r0, #1
            return false;
        if (player_x >= 0 && player_x < seg_right)
            return false;
        return true;
    }
    if (player_x > seg_left && player_x < seg_right)
    2ee0:	0a00000a 	beq	2f10 <isPlayerHit+0x1f4>
    2ee4:	e3a06001 	mov	r6, #1
    2ee8:	e1a00005 	mov	r0, r5
    2eec:	e1a01004 	mov	r1, r4
    2ef0:	eb000ea9 	bl	699c <__aeabi_fcmpgt>
    2ef4:	e3500000 	cmp	r0, #0
    2ef8:	03a06000 	moveq	r6, #0
    2efc:	e2260001 	eor	r0, r6, #1
    2f00:	e6ef0070 	uxtb	r0, r0
    2f04:	ea000001 	b	2f10 <isPlayerHit+0x1f4>
    if (is_seg_broken) {
        if (player_x > seg_left && player_x < 360)
            return false;
        if (player_x >= 0 && player_x < seg_right)
            return false;
        return true;
    2f08:	e3a00001 	mov	r0, #1
    2f0c:	eaffffff 	b	2f10 <isPlayerHit+0x1f4>
    }
    if (player_x > seg_left && player_x < seg_right)
        return false;
    return true;
}
    2f10:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    2f14:	e28dd010 	add	sp, sp, #16
    2f18:	e12fff1e 	bx	lr

00002f1c <checkPlayerHit>:
    }

}


bool checkPlayerHit(Player player) {
    2f1c:	e24dd010 	sub	sp, sp, #16
    2f20:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    2f24:	e24dd0bc 	sub	sp, sp, #188	; 0xbc
    2f28:	e28dc0cc 	add	r12, sp, #204	; 0xcc
    2f2c:	e98c000f 	stmib	r12, {r0, r1, r2, r3}
    if (!SETTINGS.HIT_DETECT)
    2f30:	e3033b20 	movw	r3, #15136	; 0x3b20
    2f34:	e3403005 	movt	r3, #5
    2f38:	e5d33001 	ldrb	r3, [r3, #1]
    2f3c:	e3530000 	cmp	r3, #0
        return false;
    2f40:	03a00000 	moveq	r0, #0

}


bool checkPlayerHit(Player player) {
    if (!SETTINGS.HIT_DETECT)
    2f44:	0a000015 	beq	2fa0 <checkPlayerHit+0x84>
    2f48:	e3a04000 	mov	r4, #0
        return false;
    int i;
    for (i = 0; i < SIZE; ++i) {
        if (isPlayerHit(player, HEXAGONS[i]))
    2f4c:	e3036c6c 	movw	r6, #15468	; 0x3c6c
    2f50:	e3406005 	movt	r6, #5
    2f54:	e3a050ac 	mov	r5, #172	; 0xac
    2f58:	e28d7008 	add	r7, sp, #8
    2f5c:	e1a00007 	mov	r0, r7
    2f60:	e0216495 	mla	r1, r5, r4, r6
    2f64:	e1a02005 	mov	r2, r5
    2f68:	eb000ec1 	bl	6a74 <memcpy>
    2f6c:	e28d30e0 	add	r3, sp, #224	; 0xe0
    2f70:	e8930003 	ldm	r3, {r0, r1}
    2f74:	e88d0003 	stm	sp, {r0, r1}
    2f78:	e28dc0cc 	add	r12, sp, #204	; 0xcc
    2f7c:	e99c000f 	ldmib	r12, {r0, r1, r2, r3}
    2f80:	ebffff65 	bl	2d1c <isPlayerHit>
    2f84:	e3500000 	cmp	r0, #0
    2f88:	1a000003 	bne	2f9c <checkPlayerHit+0x80>

bool checkPlayerHit(Player player) {
    if (!SETTINGS.HIT_DETECT)
        return false;
    int i;
    for (i = 0; i < SIZE; ++i) {
    2f8c:	e2844001 	add	r4, r4, #1
    2f90:	e3540003 	cmp	r4, #3
    2f94:	1afffff0 	bne	2f5c <checkPlayerHit+0x40>
    2f98:	ea000000 	b	2fa0 <checkPlayerHit+0x84>
        if (isPlayerHit(player, HEXAGONS[i]))
            return true;
    2f9c:	e3a00001 	mov	r0, #1
    }
    return false;
}
    2fa0:	e28dd0bc 	add	sp, sp, #188	; 0xbc
    2fa4:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
    2fa8:	e28dd010 	add	sp, sp, #16
    2fac:	e12fff1e 	bx	lr

00002fb0 <draw_player>:
        return false;
    return true;
}


void draw_player(Player player) {
    2fb0:	e24dd010 	sub	sp, sp, #16
    2fb4:	e92d45f0 	push	{r4, r5, r6, r7, r8, r10, lr}
    2fb8:	e24dd01c 	sub	sp, sp, #28
    2fbc:	e28dc034 	add	r12, sp, #52	; 0x34
    2fc0:	e98c000f 	stmib	r12, {r0, r1, r2, r3}
    2fc4:	e59d6038 	ldr	r6, [sp, #56]	; 0x38
    int h = player.height;
    2fc8:	e59d703c 	ldr	r7, [sp, #60]	; 0x3c
    int x = ORIGIN_X;
    int y = 1 + ORIGIN_Y - ORIGIN_PADDING - PLAYER_PADDING - h;
    2fcc:	e2678069 	rsb	r8, r7, #105	; 0x69
    short int color = player.color;
    2fd0:	e1dda4b0 	ldrh	r10, [sp, #64]	; 0x40
    float rotation = GAME_STATE.SCREEN_ROTATION_ANGLE;
    2fd4:	e3033b3c 	movw	r3, #15164	; 0x3b3c
    2fd8:	e3403005 	movt	r3, #5
    2fdc:	e5935008 	ldr	r5, [r3, #8]
    if (SETTINGS.CONTROL_SCHEME == CONTINUOUS)
    2fe0:	e3033b20 	movw	r3, #15136	; 0x3b20
    2fe4:	e3403005 	movt	r3, #5
    2fe8:	e5d33016 	ldrb	r3, [r3, #22]
    2fec:	e3530001 	cmp	r3, #1
    2ff0:	1a000003 	bne	3004 <draw_player+0x54>
        rotation += player.rotation;
    2ff4:	e1a00005 	mov	r0, r5
    2ff8:	e59d1044 	ldr	r1, [sp, #68]	; 0x44
    2ffc:	eb000cc1 	bl	6308 <__addsf3>
    3000:	e1a05000 	mov	r5, r0
    int i,w;
    for (i=0, w=0; i<h; ++i, w += 2) {
    3004:	e3570000 	cmp	r7, #0
    3008:	da000022 	ble	3098 <draw_player+0xe8>
    300c:	e3a04000 	mov	r4, #0
        rotate(&x0, &y0, player.section);
        rotate(&x1, &y1, player.section);
        rotate2(&x0, &y0, rotation);
        rotate2(&x1, &y1, rotation);

        draw_line(x0, y0, x1, y1, color);
    3010:	e6bfa07a 	sxth	r10, r10
        return false;
    return true;
}


void draw_player(Player player) {
    3014:	e0883004 	add	r3, r8, r4
    float rotation = GAME_STATE.SCREEN_ROTATION_ANGLE;
    if (SETTINGS.CONTROL_SCHEME == CONTINUOUS)
        rotation += player.rotation;
    int i,w;
    for (i=0, w=0; i<h; ++i, w += 2) {
        int y0 = y + i, y1 = y0;
    3018:	e58d3008 	str	r3, [sp, #8]
    301c:	e58d300c 	str	r3, [sp, #12]
        int x0 = x - w/2, x1 = x + w/2;
    3020:	e7be3054 	sbfx	r3, r4, #0, #31
    3024:	e263209f 	rsb	r2, r3, #159	; 0x9f
    3028:	e58d2010 	str	r2, [sp, #16]
    302c:	e283309f 	add	r3, r3, #159	; 0x9f
    3030:	e58d3014 	str	r3, [sp, #20]

        rotate(&x0, &y0, player.section);
    3034:	e28d0010 	add	r0, sp, #16
    3038:	e28d1008 	add	r1, sp, #8
    303c:	e1a02006 	mov	r2, r6
    3040:	ebfff833 	bl	1114 <rotate>
        rotate(&x1, &y1, player.section);
    3044:	e28d0014 	add	r0, sp, #20
    3048:	e28d100c 	add	r1, sp, #12
    304c:	e1a02006 	mov	r2, r6
    3050:	ebfff82f 	bl	1114 <rotate>
        rotate2(&x0, &y0, rotation);
    3054:	e28d0010 	add	r0, sp, #16
    3058:	e28d1008 	add	r1, sp, #8
    305c:	e1a02005 	mov	r2, r5
    3060:	ebfff868 	bl	1208 <rotate2>
        rotate2(&x1, &y1, rotation);
    3064:	e28d0014 	add	r0, sp, #20
    3068:	e28d100c 	add	r1, sp, #12
    306c:	e1a02005 	mov	r2, r5
    3070:	ebfff864 	bl	1208 <rotate2>

        draw_line(x0, y0, x1, y1, color);
    3074:	e58da000 	str	r10, [sp]
    3078:	e59d0010 	ldr	r0, [sp, #16]
    307c:	e59d1008 	ldr	r1, [sp, #8]
    3080:	e59d2014 	ldr	r2, [sp, #20]
    3084:	e59d300c 	ldr	r3, [sp, #12]
    3088:	ebfff8da 	bl	13f8 <draw_line>
    short int color = player.color;
    float rotation = GAME_STATE.SCREEN_ROTATION_ANGLE;
    if (SETTINGS.CONTROL_SCHEME == CONTINUOUS)
        rotation += player.rotation;
    int i,w;
    for (i=0, w=0; i<h; ++i, w += 2) {
    308c:	e2844001 	add	r4, r4, #1
    3090:	e1540007 	cmp	r4, r7
    3094:	1affffde 	bne	3014 <draw_player+0x64>
        rotate2(&x0, &y0, rotation);
        rotate2(&x1, &y1, rotation);

        draw_line(x0, y0, x1, y1, color);
    }
    3098:	e28dd01c 	add	sp, sp, #28
    309c:	e8bd45f0 	pop	{r4, r5, r6, r7, r8, r10, lr}
    30a0:	e28dd010 	add	sp, sp, #16
    30a4:	e12fff1e 	bx	lr

000030a8 <cos>:
    30a8:	e92d4030 	push	{r4, r5, lr}
    30ac:	e59fe0e0 	ldr	lr, [pc, #224]	; 3194 <cos+0xec>
    30b0:	e3c1c102 	bic	r12, r1, #-2147483648	; 0x80000000
    30b4:	e15c000e 	cmp	r12, lr
    30b8:	e24dd01c 	sub	sp, sp, #28
    30bc:	e1a02000 	mov	r2, r0
    30c0:	e1a03001 	mov	r3, r1
    30c4:	e1a04000 	mov	r4, r0
    30c8:	e1a05001 	mov	r5, r1
    30cc:	da000015 	ble	3128 <cos+0x80>
    30d0:	e59fe0c0 	ldr	lr, [pc, #192]	; 3198 <cos+0xf0>
    30d4:	e15c000e 	cmp	r12, lr
    30d8:	da000003 	ble	30ec <cos+0x44>
    30dc:	eb0009ca 	bl	580c <__aeabi_dsub>
    30e0:	e28dd01c 	add	sp, sp, #28
    30e4:	e8bd4030 	pop	{r4, r5, lr}
    30e8:	e12fff1e 	bx	lr
    30ec:	e28d2008 	add	r2, sp, #8
    30f0:	eb000132 	bl	35c0 <__ieee754_rem_pio2>
    30f4:	e2000003 	and	r0, r0, #3
    30f8:	e3500001 	cmp	r0, #1
    30fc:	0a000014 	beq	3154 <cos+0xac>
    3100:	e3500002 	cmp	r0, #2
    3104:	0a00000b 	beq	3138 <cos+0x90>
    3108:	e3500000 	cmp	r0, #0
    310c:	1a000018 	bne	3174 <cos+0xcc>
    3110:	e28d1008 	add	r1, sp, #8
    3114:	e8910003 	ldm	r1, {r0, r1}
    3118:	e28d3010 	add	r3, sp, #16
    311c:	e893000c 	ldm	r3, {r2, r3}
    3120:	eb0002bc 	bl	3c18 <__kernel_cos>
    3124:	eaffffed 	b	30e0 <cos+0x38>
    3128:	e3a02000 	mov	r2, #0
    312c:	e3a03000 	mov	r3, #0
    3130:	eb0002b8 	bl	3c18 <__kernel_cos>
    3134:	eaffffe9 	b	30e0 <cos+0x38>
    3138:	e28d1008 	add	r1, sp, #8
    313c:	e8910003 	ldm	r1, {r0, r1}
    3140:	e28d3010 	add	r3, sp, #16
    3144:	e893000c 	ldm	r3, {r2, r3}
    3148:	eb0002b2 	bl	3c18 <__kernel_cos>
    314c:	e2811102 	add	r1, r1, #-2147483648	; 0x80000000
    3150:	eaffffe2 	b	30e0 <cos+0x38>
    3154:	e58d0000 	str	r0, [sp]
    3158:	e28d3010 	add	r3, sp, #16
    315c:	e893000c 	ldm	r3, {r2, r3}
    3160:	e28d1008 	add	r1, sp, #8
    3164:	e8910003 	ldm	r1, {r0, r1}
    3168:	eb000662 	bl	4af8 <__kernel_sin>
    316c:	e2811102 	add	r1, r1, #-2147483648	; 0x80000000
    3170:	eaffffda 	b	30e0 <cos+0x38>
    3174:	e3a03001 	mov	r3, #1
    3178:	e58d3000 	str	r3, [sp]
    317c:	e28d1008 	add	r1, sp, #8
    3180:	e8910003 	ldm	r1, {r0, r1}
    3184:	e28d3010 	add	r3, sp, #16
    3188:	e893000c 	ldm	r3, {r2, r3}
    318c:	eb000659 	bl	4af8 <__kernel_sin>
    3190:	eaffffd2 	b	30e0 <cos+0x38>
    3194:	3fe921fb 	.word	0x3fe921fb
    3198:	7fefffff 	.word	0x7fefffff

0000319c <sin>:
    319c:	e92d4030 	push	{r4, r5, lr}
    31a0:	e59fe0ec 	ldr	lr, [pc, #236]	; 3294 <sin+0xf8>
    31a4:	e3c1c102 	bic	r12, r1, #-2147483648	; 0x80000000
    31a8:	e15c000e 	cmp	r12, lr
    31ac:	e24dd01c 	sub	sp, sp, #28
    31b0:	e1a02000 	mov	r2, r0
    31b4:	e1a03001 	mov	r3, r1
    31b8:	e1a04000 	mov	r4, r0
    31bc:	e1a05001 	mov	r5, r1
    31c0:	da000017 	ble	3224 <sin+0x88>
    31c4:	e59fe0cc 	ldr	lr, [pc, #204]	; 3298 <sin+0xfc>
    31c8:	e15c000e 	cmp	r12, lr
    31cc:	da000003 	ble	31e0 <sin+0x44>
    31d0:	eb00098d 	bl	580c <__aeabi_dsub>
    31d4:	e28dd01c 	add	sp, sp, #28
    31d8:	e8bd4030 	pop	{r4, r5, lr}
    31dc:	e12fff1e 	bx	lr
    31e0:	e28d2008 	add	r2, sp, #8
    31e4:	eb0000f5 	bl	35c0 <__ieee754_rem_pio2>
    31e8:	e2000003 	and	r0, r0, #3
    31ec:	e3500001 	cmp	r0, #1
    31f0:	0a00001a 	beq	3260 <sin+0xc4>
    31f4:	e3500002 	cmp	r0, #2
    31f8:	0a00000f 	beq	323c <sin+0xa0>
    31fc:	e3500000 	cmp	r0, #0
    3200:	1a00001c 	bne	3278 <sin+0xdc>
    3204:	e3a03001 	mov	r3, #1
    3208:	e58d3000 	str	r3, [sp]
    320c:	e28d1008 	add	r1, sp, #8
    3210:	e8910003 	ldm	r1, {r0, r1}
    3214:	e28d3010 	add	r3, sp, #16
    3218:	e893000c 	ldm	r3, {r2, r3}
    321c:	eb000635 	bl	4af8 <__kernel_sin>
    3220:	eaffffeb 	b	31d4 <sin+0x38>
    3224:	e3a03000 	mov	r3, #0
    3228:	e58d3000 	str	r3, [sp]
    322c:	e3a02000 	mov	r2, #0
    3230:	e3a03000 	mov	r3, #0
    3234:	eb00062f 	bl	4af8 <__kernel_sin>
    3238:	eaffffe5 	b	31d4 <sin+0x38>
    323c:	e3a03001 	mov	r3, #1
    3240:	e58d3000 	str	r3, [sp]
    3244:	e28d1008 	add	r1, sp, #8
    3248:	e8910003 	ldm	r1, {r0, r1}
    324c:	e28d3010 	add	r3, sp, #16
    3250:	e893000c 	ldm	r3, {r2, r3}
    3254:	eb000627 	bl	4af8 <__kernel_sin>
    3258:	e2811102 	add	r1, r1, #-2147483648	; 0x80000000
    325c:	eaffffdc 	b	31d4 <sin+0x38>
    3260:	e28d1008 	add	r1, sp, #8
    3264:	e8910003 	ldm	r1, {r0, r1}
    3268:	e28d3010 	add	r3, sp, #16
    326c:	e893000c 	ldm	r3, {r2, r3}
    3270:	eb000268 	bl	3c18 <__kernel_cos>
    3274:	eaffffd6 	b	31d4 <sin+0x38>
    3278:	e28d1008 	add	r1, sp, #8
    327c:	e8910003 	ldm	r1, {r0, r1}
    3280:	e28d3010 	add	r3, sp, #16
    3284:	e893000c 	ldm	r3, {r2, r3}
    3288:	eb000262 	bl	3c18 <__kernel_cos>
    328c:	e2811102 	add	r1, r1, #-2147483648	; 0x80000000
    3290:	eaffffcf 	b	31d4 <sin+0x38>
    3294:	3fe921fb 	.word	0x3fe921fb
    3298:	7fefffff 	.word	0x7fefffff

0000329c <log10>:
    329c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    32a0:	e24dd028 	sub	sp, sp, #40	; 0x28
    32a4:	e1a04000 	mov	r4, r0
    32a8:	e1a05001 	mov	r5, r1
    32ac:	eb000059 	bl	3418 <__ieee754_log10>
    32b0:	e59f814c 	ldr	r8, [pc, #332]	; 3404 <log10+0x168>
    32b4:	e1d830d0 	ldrsb	r3, [r8]
    32b8:	e3730001 	cmn	r3, #1
    32bc:	e1a06000 	mov	r6, r0
    32c0:	e1a07001 	mov	r7, r1
    32c4:	0a00000b 	beq	32f8 <log10+0x5c>
    32c8:	e1a00004 	mov	r0, r4
    32cc:	e1a01005 	mov	r1, r5
    32d0:	eb0006f8 	bl	4eb8 <__fpclassifyd>
    32d4:	e3500000 	cmp	r0, #0
    32d8:	0a000006 	beq	32f8 <log10+0x5c>
    32dc:	e1a00004 	mov	r0, r4
    32e0:	e1a01005 	mov	r1, r5
    32e4:	e3a02000 	mov	r2, #0
    32e8:	e3a03000 	mov	r3, #0
    32ec:	eb000bb1 	bl	61b8 <__aeabi_dcmple>
    32f0:	e3500000 	cmp	r0, #0
    32f4:	1a000004 	bne	330c <log10+0x70>
    32f8:	e1a00006 	mov	r0, r6
    32fc:	e1a01007 	mov	r1, r7
    3300:	e28dd028 	add	sp, sp, #40	; 0x28
    3304:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    3308:	e12fff1e 	bx	lr
    330c:	e59f30f4 	ldr	r3, [pc, #244]	; 3408 <log10+0x16c>
    3310:	e5d86000 	ldrb	r6, [r8]
    3314:	e58d3004 	str	r3, [sp, #4]
    3318:	e3560000 	cmp	r6, #0
    331c:	e3a03000 	mov	r3, #0
    3320:	e58d3020 	str	r3, [sp, #32]
    3324:	059f30e0 	ldreq	r3, [pc, #224]	; 340c <log10+0x170>
    3328:	159f30e0 	ldrne	r3, [pc, #224]	; 3410 <log10+0x174>
    332c:	03a0220e 	moveq	r2, #-536870912	; 0xe0000000
    3330:	13a02000 	movne	r2, #0
    3334:	e58d2018 	str	r2, [sp, #24]
    3338:	e58d301c 	str	r3, [sp, #28]
    333c:	e1a00004 	mov	r0, r4
    3340:	e1a01005 	mov	r1, r5
    3344:	e3a02000 	mov	r2, #0
    3348:	e3a03000 	mov	r3, #0
    334c:	e58d4008 	str	r4, [sp, #8]
    3350:	e58d500c 	str	r5, [sp, #12]
    3354:	e58d4010 	str	r4, [sp, #16]
    3358:	e58d5014 	str	r5, [sp, #20]
    335c:	eb000b89 	bl	6188 <__aeabi_dcmpeq>
    3360:	e3500000 	cmp	r0, #0
    3364:	0a00000d 	beq	33a0 <log10+0x104>
    3368:	e3a03002 	mov	r3, #2
    336c:	e3560002 	cmp	r6, #2
    3370:	e58d3000 	str	r3, [sp]
    3374:	0a00001a 	beq	33e4 <log10+0x148>
    3378:	e1a0000d 	mov	r0, sp
    337c:	eb0006e8 	bl	4f24 <matherr>
    3380:	e3500000 	cmp	r0, #0
    3384:	0a000016 	beq	33e4 <log10+0x148>
    3388:	e59d3020 	ldr	r3, [sp, #32]
    338c:	e3530000 	cmp	r3, #0
    3390:	1a000017 	bne	33f4 <log10+0x158>
    3394:	e28d7018 	add	r7, sp, #24
    3398:	e89700c0 	ldm	r7, {r6, r7}
    339c:	eaffffd5 	b	32f8 <log10+0x5c>
    33a0:	e3a03001 	mov	r3, #1
    33a4:	e3560002 	cmp	r6, #2
    33a8:	e58d3000 	str	r3, [sp]
    33ac:	0a000008 	beq	33d4 <log10+0x138>
    33b0:	e1a0000d 	mov	r0, sp
    33b4:	eb0006da 	bl	4f24 <matherr>
    33b8:	e3500000 	cmp	r0, #0
    33bc:	0a000004 	beq	33d4 <log10+0x138>
    33c0:	e59f004c 	ldr	r0, [pc, #76]	; 3414 <log10+0x178>
    33c4:	eb0006d8 	bl	4f2c <nan>
    33c8:	e58d0018 	str	r0, [sp, #24]
    33cc:	e58d101c 	str	r1, [sp, #28]
    33d0:	eaffffec 	b	3388 <log10+0xec>
    33d4:	eb000d95 	bl	6a30 <__errno>
    33d8:	e3a03021 	mov	r3, #33	; 0x21
    33dc:	e5803000 	str	r3, [r0]
    33e0:	eafffff6 	b	33c0 <log10+0x124>
    33e4:	eb000d91 	bl	6a30 <__errno>
    33e8:	e3a03022 	mov	r3, #34	; 0x22
    33ec:	e5803000 	str	r3, [r0]
    33f0:	eaffffe4 	b	3388 <log10+0xec>
    33f4:	eb000d8d 	bl	6a30 <__errno>
    33f8:	e59d3020 	ldr	r3, [sp, #32]
    33fc:	e5803000 	str	r3, [r0]
    3400:	eaffffe3 	b	3394 <log10+0xf8>
    3404:	000532b4 	.word	0x000532b4
    3408:	0000803c 	.word	0x0000803c
    340c:	c7efffff 	.word	0xc7efffff
    3410:	fff00000 	.word	0xfff00000
    3414:	00008044 	.word	0x00008044

00003418 <__ieee754_log10>:
    3418:	e3510601 	cmp	r1, #1048576	; 0x100000
    341c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, r10, lr}
    3420:	e1a02001 	mov	r2, r1
    3424:	e1a06000 	mov	r6, r0
    3428:	e1a07001 	mov	r7, r1
    342c:	e1a04000 	mov	r4, r0
    3430:	e1a05001 	mov	r5, r1
    3434:	aa000015 	bge	3490 <__ieee754_log10+0x78>
    3438:	e3c12102 	bic	r2, r1, #-2147483648	; 0x80000000
    343c:	e1922000 	orrs	r2, r2, r0
    3440:	0a000047 	beq	3564 <__ieee754_log10+0x14c>
    3444:	e3510000 	cmp	r1, #0
    3448:	ba00004b 	blt	357c <__ieee754_log10+0x164>
    344c:	e3a02000 	mov	r2, #0
    3450:	e59f3158 	ldr	r3, [pc, #344]	; 35b0 <__ieee754_log10+0x198>
    3454:	eb0009f1 	bl	5c20 <__aeabi_dmul>
    3458:	e59f3154 	ldr	r3, [pc, #340]	; 35b4 <__ieee754_log10+0x19c>
    345c:	e1a02001 	mov	r2, r1
    3460:	e1520003 	cmp	r2, r3
    3464:	e1a07001 	mov	r7, r1
    3468:	e1a06000 	mov	r6, r0
    346c:	e3e01035 	mvn	r1, #53	; 0x35
    3470:	da00000a 	ble	34a0 <__ieee754_log10+0x88>
    3474:	e1a00006 	mov	r0, r6
    3478:	e1a01007 	mov	r1, r7
    347c:	e1a02006 	mov	r2, r6
    3480:	e1a03007 	mov	r3, r7
    3484:	eb0008e1 	bl	5810 <__adddf3>
    3488:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, r10, lr}
    348c:	e12fff1e 	bx	lr
    3490:	e59f311c 	ldr	r3, [pc, #284]	; 35b4 <__ieee754_log10+0x19c>
    3494:	e1520003 	cmp	r2, r3
    3498:	e3a01000 	mov	r1, #0
    349c:	cafffff4 	bgt	3474 <__ieee754_log10+0x5c>
    34a0:	e1a03a42 	asr	r3, r2, #20
    34a4:	e2433fff 	sub	r3, r3, #1020	; 0x3fc
    34a8:	e2433003 	sub	r3, r3, #3
    34ac:	e0830001 	add	r0, r3, r1
    34b0:	e1a08fa0 	lsr	r8, r0, #31
    34b4:	e3c224ff 	bic	r2, r2, #-16777216	; 0xff000000
    34b8:	e0800008 	add	r0, r0, r8
    34bc:	e3c2a60f 	bic	r10, r2, #15728640	; 0xf00000
    34c0:	eb00099f 	bl	5b44 <__aeabi_i2d>
    34c4:	e2688fff 	rsb	r8, r8, #1020	; 0x3fc
    34c8:	e2888003 	add	r8, r8, #3
    34cc:	e18a7a08 	orr	r7, r10, r8, lsl #20
    34d0:	e1a04000 	mov	r4, r0
    34d4:	e1a05001 	mov	r5, r1
    34d8:	e1a00006 	mov	r0, r6
    34dc:	e1a01007 	mov	r1, r7
    34e0:	eb0006fc 	bl	50d8 <__ieee754_log>
    34e4:	e28f30ac 	add	r3, pc, #172	; 0xac
    34e8:	e893000c 	ldm	r3, {r2, r3}
    34ec:	e1a08000 	mov	r8, r0
    34f0:	e1a09001 	mov	r9, r1
    34f4:	e1a00004 	mov	r0, r4
    34f8:	e1a01005 	mov	r1, r5
    34fc:	eb0009c7 	bl	5c20 <__aeabi_dmul>
    3500:	e28f3098 	add	r3, pc, #152	; 0x98
    3504:	e893000c 	ldm	r3, {r2, r3}
    3508:	e1a06000 	mov	r6, r0
    350c:	e1a07001 	mov	r7, r1
    3510:	e1a00004 	mov	r0, r4
    3514:	e1a01005 	mov	r1, r5
    3518:	eb0009c0 	bl	5c20 <__aeabi_dmul>
    351c:	e28f3084 	add	r3, pc, #132	; 0x84
    3520:	e893000c 	ldm	r3, {r2, r3}
    3524:	e1a04000 	mov	r4, r0
    3528:	e1a05001 	mov	r5, r1
    352c:	e1a00008 	mov	r0, r8
    3530:	e1a01009 	mov	r1, r9
    3534:	eb0009b9 	bl	5c20 <__aeabi_dmul>
    3538:	e1a02000 	mov	r2, r0
    353c:	e1a03001 	mov	r3, r1
    3540:	e1a00004 	mov	r0, r4
    3544:	e1a01005 	mov	r1, r5
    3548:	eb0008b0 	bl	5810 <__adddf3>
    354c:	e1a02000 	mov	r2, r0
    3550:	e1a03001 	mov	r3, r1
    3554:	e1a00006 	mov	r0, r6
    3558:	e1a01007 	mov	r1, r7
    355c:	eb0008ab 	bl	5810 <__adddf3>
    3560:	eaffffc8 	b	3488 <__ieee754_log10+0x70>
    3564:	e3a02000 	mov	r2, #0
    3568:	e3a03000 	mov	r3, #0
    356c:	e3a00000 	mov	r0, #0
    3570:	e59f1040 	ldr	r1, [pc, #64]	; 35b8 <__ieee754_log10+0x1a0>
    3574:	eb000a4d 	bl	5eb0 <__aeabi_ddiv>
    3578:	eaffffc2 	b	3488 <__ieee754_log10+0x70>
    357c:	e1a02000 	mov	r2, r0
    3580:	e1a03001 	mov	r3, r1
    3584:	eb0008a0 	bl	580c <__aeabi_dsub>
    3588:	e3a02000 	mov	r2, #0
    358c:	e3a03000 	mov	r3, #0
    3590:	eb000a46 	bl	5eb0 <__aeabi_ddiv>
    3594:	eaffffbb 	b	3488 <__ieee754_log10+0x70>
    3598:	509f6000 	.word	0x509f6000
    359c:	3fd34413 	.word	0x3fd34413
    35a0:	11f12b36 	.word	0x11f12b36
    35a4:	3d59fef3 	.word	0x3d59fef3
    35a8:	1526e50e 	.word	0x1526e50e
    35ac:	3fdbcb7b 	.word	0x3fdbcb7b
    35b0:	43500000 	.word	0x43500000
    35b4:	7fefffff 	.word	0x7fefffff
    35b8:	c3500000 	.word	0xc3500000
    35bc:	e1a00000 	nop			; (mov r0, r0)

000035c0 <__ieee754_rem_pio2>:
    35c0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    35c4:	e59fc3bc 	ldr	r12, [pc, #956]	; 3988 <__ieee754_rem_pio2+0x3c8>
    35c8:	e3c17102 	bic	r7, r1, #-2147483648	; 0x80000000
    35cc:	e157000c 	cmp	r7, r12
    35d0:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    35d4:	e1a04000 	mov	r4, r0
    35d8:	e1a05001 	mov	r5, r1
    35dc:	e1a0a000 	mov	r10, r0
    35e0:	e1a0b001 	mov	r11, r1
    35e4:	e1a08002 	mov	r8, r2
    35e8:	da00005b 	ble	375c <__ieee754_rem_pio2+0x19c>
    35ec:	e59f2398 	ldr	r2, [pc, #920]	; 398c <__ieee754_rem_pio2+0x3cc>
    35f0:	e1570002 	cmp	r7, r2
    35f4:	e1a09001 	mov	r9, r1
    35f8:	ca000019 	bgt	3664 <__ieee754_rem_pio2+0xa4>
    35fc:	e3510000 	cmp	r1, #0
    3600:	e28f3fd6 	add	r3, pc, #856	; 0x358
    3604:	e893000c 	ldm	r3, {r2, r3}
    3608:	da000149 	ble	3b34 <__ieee754_rem_pio2+0x574>
    360c:	eb00087e 	bl	580c <__aeabi_dsub>
    3610:	e59f3378 	ldr	r3, [pc, #888]	; 3990 <__ieee754_rem_pio2+0x3d0>
    3614:	e1570003 	cmp	r7, r3
    3618:	e1a0a000 	mov	r10, r0
    361c:	e1a0b001 	mov	r11, r1
    3620:	0a00005f 	beq	37a4 <__ieee754_rem_pio2+0x1e4>
    3624:	e28f3fcf 	add	r3, pc, #828	; 0x33c
    3628:	e893000c 	ldm	r3, {r2, r3}
    362c:	eb000876 	bl	580c <__aeabi_dsub>
    3630:	e1a02000 	mov	r2, r0
    3634:	e1a03001 	mov	r3, r1
    3638:	e8880003 	stm	r8, {r0, r1}
    363c:	e1a0000a 	mov	r0, r10
    3640:	e1a0100b 	mov	r1, r11
    3644:	eb000870 	bl	580c <__aeabi_dsub>
    3648:	e28f3fc6 	add	r3, pc, #792	; 0x318
    364c:	e893000c 	ldm	r3, {r2, r3}
    3650:	eb00086d 	bl	580c <__aeabi_dsub>
    3654:	e3a06001 	mov	r6, #1
    3658:	e5880008 	str	r0, [r8, #8]
    365c:	e588100c 	str	r1, [r8, #12]
    3660:	ea000043 	b	3774 <__ieee754_rem_pio2+0x1b4>
    3664:	e59f3328 	ldr	r3, [pc, #808]	; 3994 <__ieee754_rem_pio2+0x3d4>
    3668:	e1570003 	cmp	r7, r3
    366c:	da000075 	ble	3848 <__ieee754_rem_pio2+0x288>
    3670:	e59f3320 	ldr	r3, [pc, #800]	; 3998 <__ieee754_rem_pio2+0x3d8>
    3674:	e1570003 	cmp	r7, r3
    3678:	ca000041 	bgt	3784 <__ieee754_rem_pio2+0x1c4>
    367c:	e1a0aa47 	asr	r10, r7, #20
    3680:	e24aae41 	sub	r10, r10, #1040	; 0x410
    3684:	e24aa006 	sub	r10, r10, #6
    3688:	e0475a0a 	sub	r5, r7, r10, lsl #20
    368c:	e1a01005 	mov	r1, r5
    3690:	e1a04000 	mov	r4, r0
    3694:	eb000ad9 	bl	6200 <__aeabi_d2iz>
    3698:	eb000929 	bl	5b44 <__aeabi_i2d>
    369c:	e1a06000 	mov	r6, r0
    36a0:	e1a07001 	mov	r7, r1
    36a4:	e1a02000 	mov	r2, r0
    36a8:	e1a03001 	mov	r3, r1
    36ac:	e1a00004 	mov	r0, r4
    36b0:	e1a01005 	mov	r1, r5
    36b4:	e58d6020 	str	r6, [sp, #32]
    36b8:	e58d7024 	str	r7, [sp, #36]	; 0x24
    36bc:	eb000852 	bl	580c <__aeabi_dsub>
    36c0:	e3a02000 	mov	r2, #0
    36c4:	e59f32d0 	ldr	r3, [pc, #720]	; 399c <__ieee754_rem_pio2+0x3dc>
    36c8:	eb000954 	bl	5c20 <__aeabi_dmul>
    36cc:	e1a06000 	mov	r6, r0
    36d0:	e1a07001 	mov	r7, r1
    36d4:	eb000ac9 	bl	6200 <__aeabi_d2iz>
    36d8:	eb000919 	bl	5b44 <__aeabi_i2d>
    36dc:	e1a02000 	mov	r2, r0
    36e0:	e1a03001 	mov	r3, r1
    36e4:	e1a04000 	mov	r4, r0
    36e8:	e1a05001 	mov	r5, r1
    36ec:	e1a00006 	mov	r0, r6
    36f0:	e1a01007 	mov	r1, r7
    36f4:	e58d4028 	str	r4, [sp, #40]	; 0x28
    36f8:	e58d502c 	str	r5, [sp, #44]	; 0x2c
    36fc:	eb000842 	bl	580c <__aeabi_dsub>
    3700:	e3a02000 	mov	r2, #0
    3704:	e59f3290 	ldr	r3, [pc, #656]	; 399c <__ieee754_rem_pio2+0x3dc>
    3708:	eb000944 	bl	5c20 <__aeabi_dmul>
    370c:	e3a02000 	mov	r2, #0
    3710:	e3a03000 	mov	r3, #0
    3714:	e58d0030 	str	r0, [sp, #48]	; 0x30
    3718:	e58d1034 	str	r1, [sp, #52]	; 0x34
    371c:	eb000a99 	bl	6188 <__aeabi_dcmpeq>
    3720:	e3500000 	cmp	r0, #0
    3724:	03a06003 	moveq	r6, #3
    3728:	0a000032 	beq	37f8 <__ieee754_rem_pio2+0x238>
    372c:	e28d7028 	add	r7, sp, #40	; 0x28
    3730:	e3a06003 	mov	r6, #3
    3734:	e1a00004 	mov	r0, r4
    3738:	e1a01005 	mov	r1, r5
    373c:	e3a02000 	mov	r2, #0
    3740:	e3a03000 	mov	r3, #0
    3744:	eb000a8f 	bl	6188 <__aeabi_dcmpeq>
    3748:	e3500000 	cmp	r0, #0
    374c:	e2466001 	sub	r6, r6, #1
    3750:	0a000028 	beq	37f8 <__ieee754_rem_pio2+0x238>
    3754:	e9370003 	ldmdb	r7!, {r0, r1}
    3758:	eafffff7 	b	373c <__ieee754_rem_pio2+0x17c>
    375c:	e8820030 	stm	r2, {r4, r5}
    3760:	e3a03000 	mov	r3, #0
    3764:	e3a02000 	mov	r2, #0
    3768:	e5882008 	str	r2, [r8, #8]
    376c:	e588300c 	str	r3, [r8, #12]
    3770:	e3a06000 	mov	r6, #0
    3774:	e1a00006 	mov	r0, r6
    3778:	e28dd03c 	add	sp, sp, #60	; 0x3c
    377c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    3780:	e12fff1e 	bx	lr
    3784:	e1a02000 	mov	r2, r0
    3788:	e1a03001 	mov	r3, r1
    378c:	eb00081e 	bl	580c <__aeabi_dsub>
    3790:	e3a06000 	mov	r6, #0
    3794:	e5880008 	str	r0, [r8, #8]
    3798:	e588100c 	str	r1, [r8, #12]
    379c:	e8880003 	stm	r8, {r0, r1}
    37a0:	eafffff3 	b	3774 <__ieee754_rem_pio2+0x1b4>
    37a4:	e28f3f71 	add	r3, pc, #452	; 0x1c4
    37a8:	e893000c 	ldm	r3, {r2, r3}
    37ac:	eb000816 	bl	580c <__aeabi_dsub>
    37b0:	e28f3d07 	add	r3, pc, #448	; 0x1c0
    37b4:	e893000c 	ldm	r3, {r2, r3}
    37b8:	e1a06000 	mov	r6, r0
    37bc:	e1a07001 	mov	r7, r1
    37c0:	eb000811 	bl	580c <__aeabi_dsub>
    37c4:	e1a02000 	mov	r2, r0
    37c8:	e1a03001 	mov	r3, r1
    37cc:	e8880003 	stm	r8, {r0, r1}
    37d0:	e1a00006 	mov	r0, r6
    37d4:	e1a01007 	mov	r1, r7
    37d8:	eb00080b 	bl	580c <__aeabi_dsub>
    37dc:	e28f3f65 	add	r3, pc, #404	; 0x194
    37e0:	e893000c 	ldm	r3, {r2, r3}
    37e4:	eb000808 	bl	580c <__aeabi_dsub>
    37e8:	e3a06001 	mov	r6, #1
    37ec:	e5880008 	str	r0, [r8, #8]
    37f0:	e588100c 	str	r1, [r8, #12]
    37f4:	eaffffde 	b	3774 <__ieee754_rem_pio2+0x1b4>
    37f8:	e3a03002 	mov	r3, #2
    37fc:	e58d3000 	str	r3, [sp]
    3800:	e59f3198 	ldr	r3, [pc, #408]	; 39a0 <__ieee754_rem_pio2+0x3e0>
    3804:	e28d0020 	add	r0, sp, #32
    3808:	e58d3004 	str	r3, [sp, #4]
    380c:	e1a01008 	mov	r1, r8
    3810:	e1a03006 	mov	r3, r6
    3814:	e1a0200a 	mov	r2, r10
    3818:	eb0001d0 	bl	3f60 <__kernel_rem_pio2>
    381c:	e3590000 	cmp	r9, #0
    3820:	e1a06000 	mov	r6, r0
    3824:	aaffffd2 	bge	3774 <__ieee754_rem_pio2+0x1b4>
    3828:	e5982004 	ldr	r2, [r8, #4]
    382c:	e598300c 	ldr	r3, [r8, #12]
    3830:	e2822102 	add	r2, r2, #-2147483648	; 0x80000000
    3834:	e2833102 	add	r3, r3, #-2147483648	; 0x80000000
    3838:	e5882004 	str	r2, [r8, #4]
    383c:	e588300c 	str	r3, [r8, #12]
    3840:	e2606000 	rsb	r6, r0, #0
    3844:	eaffffca 	b	3774 <__ieee754_rem_pio2+0x1b4>
    3848:	eb000532 	bl	4d18 <fabs>
    384c:	e28f3f4b 	add	r3, pc, #300	; 0x12c
    3850:	e893000c 	ldm	r3, {r2, r3}
    3854:	e1a04000 	mov	r4, r0
    3858:	e1a05001 	mov	r5, r1
    385c:	eb0008ef 	bl	5c20 <__aeabi_dmul>
    3860:	e3a02000 	mov	r2, #0
    3864:	e59f3138 	ldr	r3, [pc, #312]	; 39a4 <__ieee754_rem_pio2+0x3e4>
    3868:	eb0007e8 	bl	5810 <__adddf3>
    386c:	eb000a63 	bl	6200 <__aeabi_d2iz>
    3870:	e1a06000 	mov	r6, r0
    3874:	eb0008b2 	bl	5b44 <__aeabi_i2d>
    3878:	e28f30e0 	add	r3, pc, #224	; 0xe0
    387c:	e893000c 	ldm	r3, {r2, r3}
    3880:	e58d0010 	str	r0, [sp, #16]
    3884:	e58d1014 	str	r1, [sp, #20]
    3888:	eb0008e4 	bl	5c20 <__aeabi_dmul>
    388c:	e1a02000 	mov	r2, r0
    3890:	e1a03001 	mov	r3, r1
    3894:	e1a00004 	mov	r0, r4
    3898:	e1a01005 	mov	r1, r5
    389c:	eb0007da 	bl	580c <__aeabi_dsub>
    38a0:	e28f30c0 	add	r3, pc, #192	; 0xc0
    38a4:	e893000c 	ldm	r3, {r2, r3}
    38a8:	e1a0a000 	mov	r10, r0
    38ac:	e1a0b001 	mov	r11, r1
    38b0:	e28d1010 	add	r1, sp, #16
    38b4:	e8910003 	ldm	r1, {r0, r1}
    38b8:	eb0008d8 	bl	5c20 <__aeabi_dmul>
    38bc:	e356001f 	cmp	r6, #31
    38c0:	e58d0008 	str	r0, [sp, #8]
    38c4:	e58d100c 	str	r1, [sp, #12]
    38c8:	e1a0000a 	mov	r0, r10
    38cc:	e1a0100b 	mov	r1, r11
    38d0:	ca000035 	bgt	39ac <__ieee754_rem_pio2+0x3ec>
    38d4:	e59f30cc 	ldr	r3, [pc, #204]	; 39a8 <__ieee754_rem_pio2+0x3e8>
    38d8:	e2462001 	sub	r2, r6, #1
    38dc:	e7933102 	ldr	r3, [r3, r2, lsl #2]
    38e0:	e1530007 	cmp	r3, r7
    38e4:	0a000030 	beq	39ac <__ieee754_rem_pio2+0x3ec>
    38e8:	e28d3008 	add	r3, sp, #8
    38ec:	e893000c 	ldm	r3, {r2, r3}
    38f0:	eb0007c5 	bl	580c <__aeabi_dsub>
    38f4:	e1a02000 	mov	r2, r0
    38f8:	e1a03001 	mov	r3, r1
    38fc:	e888000c 	stm	r8, {r2, r3}
    3900:	e1a05000 	mov	r5, r0
    3904:	e1a04001 	mov	r4, r1
    3908:	e1a02005 	mov	r2, r5
    390c:	e1a03004 	mov	r3, r4
    3910:	e1a0000a 	mov	r0, r10
    3914:	e1a0100b 	mov	r1, r11
    3918:	eb0007bb 	bl	580c <__aeabi_dsub>
    391c:	e28d3008 	add	r3, sp, #8
    3920:	e893000c 	ldm	r3, {r2, r3}
    3924:	eb0007b8 	bl	580c <__aeabi_dsub>
    3928:	e3590000 	cmp	r9, #0
    392c:	e1a02000 	mov	r2, r0
    3930:	e1a03001 	mov	r3, r1
    3934:	e5882008 	str	r2, [r8, #8]
    3938:	e588300c 	str	r3, [r8, #12]
    393c:	aaffff8c 	bge	3774 <__ieee754_rem_pio2+0x1b4>
    3940:	e2844102 	add	r4, r4, #-2147483648	; 0x80000000
    3944:	e2811102 	add	r1, r1, #-2147483648	; 0x80000000
    3948:	e5885000 	str	r5, [r8]
    394c:	e5884004 	str	r4, [r8, #4]
    3950:	e5880008 	str	r0, [r8, #8]
    3954:	e588100c 	str	r1, [r8, #12]
    3958:	e2666000 	rsb	r6, r6, #0
    395c:	eaffff84 	b	3774 <__ieee754_rem_pio2+0x1b4>
    3960:	54400000 	.word	0x54400000
    3964:	3ff921fb 	.word	0x3ff921fb
    3968:	1a626331 	.word	0x1a626331
    396c:	3dd0b461 	.word	0x3dd0b461
    3970:	1a600000 	.word	0x1a600000
    3974:	3dd0b461 	.word	0x3dd0b461
    3978:	2e037073 	.word	0x2e037073
    397c:	3ba3198a 	.word	0x3ba3198a
    3980:	6dc9c883 	.word	0x6dc9c883
    3984:	3fe45f30 	.word	0x3fe45f30
    3988:	3fe921fb 	.word	0x3fe921fb
    398c:	4002d97b 	.word	0x4002d97b
    3990:	3ff921fb 	.word	0x3ff921fb
    3994:	413921fb 	.word	0x413921fb
    3998:	7fefffff 	.word	0x7fefffff
    399c:	41700000 	.word	0x41700000
    39a0:	000080c8 	.word	0x000080c8
    39a4:	3fe00000 	.word	0x3fe00000
    39a8:	00008048 	.word	0x00008048
    39ac:	e28d3008 	add	r3, sp, #8
    39b0:	e893000c 	ldm	r3, {r2, r3}
    39b4:	eb000794 	bl	580c <__aeabi_dsub>
    39b8:	e1a07a47 	asr	r7, r7, #20
    39bc:	e1a04001 	mov	r4, r1
    39c0:	e1a01081 	lsl	r1, r1, #1
    39c4:	e1a05000 	mov	r5, r0
    39c8:	e0471aa1 	sub	r1, r7, r1, lsr #21
    39cc:	e1a02005 	mov	r2, r5
    39d0:	e1a03004 	mov	r3, r4
    39d4:	e3510010 	cmp	r1, #16
    39d8:	e888000c 	stm	r8, {r2, r3}
    39dc:	daffffc9 	ble	3908 <__ieee754_rem_pio2+0x348>
    39e0:	e28f3f82 	add	r3, pc, #520	; 0x208
    39e4:	e893000c 	ldm	r3, {r2, r3}
    39e8:	e28d1010 	add	r1, sp, #16
    39ec:	e8910003 	ldm	r1, {r0, r1}
    39f0:	eb00088a 	bl	5c20 <__aeabi_dmul>
    39f4:	e1a04000 	mov	r4, r0
    39f8:	e1a05001 	mov	r5, r1
    39fc:	e1a02004 	mov	r2, r4
    3a00:	e1a03005 	mov	r3, r5
    3a04:	e1a0000a 	mov	r0, r10
    3a08:	e1a0100b 	mov	r1, r11
    3a0c:	eb00077e 	bl	580c <__aeabi_dsub>
    3a10:	e58d0018 	str	r0, [sp, #24]
    3a14:	e58d101c 	str	r1, [sp, #28]
    3a18:	e28d3018 	add	r3, sp, #24
    3a1c:	e893000c 	ldm	r3, {r2, r3}
    3a20:	e1a0000a 	mov	r0, r10
    3a24:	e1a0100b 	mov	r1, r11
    3a28:	eb000777 	bl	580c <__aeabi_dsub>
    3a2c:	e1a02004 	mov	r2, r4
    3a30:	e1a03005 	mov	r3, r5
    3a34:	eb000774 	bl	580c <__aeabi_dsub>
    3a38:	e28f3f6e 	add	r3, pc, #440	; 0x1b8
    3a3c:	e893000c 	ldm	r3, {r2, r3}
    3a40:	e1a04000 	mov	r4, r0
    3a44:	e1a05001 	mov	r5, r1
    3a48:	e28d1010 	add	r1, sp, #16
    3a4c:	e8910003 	ldm	r1, {r0, r1}
    3a50:	eb000872 	bl	5c20 <__aeabi_dmul>
    3a54:	e1a02004 	mov	r2, r4
    3a58:	e1a03005 	mov	r3, r5
    3a5c:	eb00076a 	bl	580c <__aeabi_dsub>
    3a60:	e58d0008 	str	r0, [sp, #8]
    3a64:	e58d100c 	str	r1, [sp, #12]
    3a68:	e28d3008 	add	r3, sp, #8
    3a6c:	e893000c 	ldm	r3, {r2, r3}
    3a70:	e28d1018 	add	r1, sp, #24
    3a74:	e8910003 	ldm	r1, {r0, r1}
    3a78:	eb000763 	bl	580c <__aeabi_dsub>
    3a7c:	e1a04001 	mov	r4, r1
    3a80:	e1a01081 	lsl	r1, r1, #1
    3a84:	e1a05000 	mov	r5, r0
    3a88:	e0477aa1 	sub	r7, r7, r1, lsr #21
    3a8c:	e1a02005 	mov	r2, r5
    3a90:	e1a03004 	mov	r3, r4
    3a94:	e3570031 	cmp	r7, #49	; 0x31
    3a98:	e888000c 	stm	r8, {r2, r3}
    3a9c:	da00004f 	ble	3be0 <__ieee754_rem_pio2+0x620>
    3aa0:	e3a0242e 	mov	r2, #771751936	; 0x2e000000
    3aa4:	e59f3164 	ldr	r3, [pc, #356]	; 3c10 <__ieee754_rem_pio2+0x650>
    3aa8:	e28d1010 	add	r1, sp, #16
    3aac:	e8910003 	ldm	r1, {r0, r1}
    3ab0:	eb00085a 	bl	5c20 <__aeabi_dmul>
    3ab4:	e1a04000 	mov	r4, r0
    3ab8:	e1a05001 	mov	r5, r1
    3abc:	e1a02004 	mov	r2, r4
    3ac0:	e1a03005 	mov	r3, r5
    3ac4:	e28d1018 	add	r1, sp, #24
    3ac8:	e8910003 	ldm	r1, {r0, r1}
    3acc:	eb00074e 	bl	580c <__aeabi_dsub>
    3ad0:	e1a0a000 	mov	r10, r0
    3ad4:	e1a0b001 	mov	r11, r1
    3ad8:	e1a0200a 	mov	r2, r10
    3adc:	e1a0300b 	mov	r3, r11
    3ae0:	e28d1018 	add	r1, sp, #24
    3ae4:	e8910003 	ldm	r1, {r0, r1}
    3ae8:	eb000747 	bl	580c <__aeabi_dsub>
    3aec:	e1a02004 	mov	r2, r4
    3af0:	e1a03005 	mov	r3, r5
    3af4:	eb000744 	bl	580c <__aeabi_dsub>
    3af8:	e28f3c01 	add	r3, pc, #256	; 0x100
    3afc:	e893000c 	ldm	r3, {r2, r3}
    3b00:	e1a04000 	mov	r4, r0
    3b04:	e1a05001 	mov	r5, r1
    3b08:	e28d1010 	add	r1, sp, #16
    3b0c:	e8910003 	ldm	r1, {r0, r1}
    3b10:	eb000842 	bl	5c20 <__aeabi_dmul>
    3b14:	e1a02004 	mov	r2, r4
    3b18:	e1a03005 	mov	r3, r5
    3b1c:	eb00073a 	bl	580c <__aeabi_dsub>
    3b20:	e58d0008 	str	r0, [sp, #8]
    3b24:	e58d100c 	str	r1, [sp, #12]
    3b28:	e1a0000a 	mov	r0, r10
    3b2c:	e1a0100b 	mov	r1, r11
    3b30:	eaffff6c 	b	38e8 <__ieee754_rem_pio2+0x328>
    3b34:	eb000735 	bl	5810 <__adddf3>
    3b38:	e59f30d4 	ldr	r3, [pc, #212]	; 3c14 <__ieee754_rem_pio2+0x654>
    3b3c:	e1570003 	cmp	r7, r3
    3b40:	e1a0a000 	mov	r10, r0
    3b44:	e1a0b001 	mov	r11, r1
    3b48:	0a00000f 	beq	3b8c <__ieee754_rem_pio2+0x5cc>
    3b4c:	e28f30b4 	add	r3, pc, #180	; 0xb4
    3b50:	e893000c 	ldm	r3, {r2, r3}
    3b54:	eb00072d 	bl	5810 <__adddf3>
    3b58:	e1a02000 	mov	r2, r0
    3b5c:	e1a03001 	mov	r3, r1
    3b60:	e8880003 	stm	r8, {r0, r1}
    3b64:	e1a0000a 	mov	r0, r10
    3b68:	e1a0100b 	mov	r1, r11
    3b6c:	eb000726 	bl	580c <__aeabi_dsub>
    3b70:	e28f3090 	add	r3, pc, #144	; 0x90
    3b74:	e893000c 	ldm	r3, {r2, r3}
    3b78:	eb000724 	bl	5810 <__adddf3>
    3b7c:	e3e06000 	mvn	r6, #0
    3b80:	e5880008 	str	r0, [r8, #8]
    3b84:	e588100c 	str	r1, [r8, #12]
    3b88:	eafffef9 	b	3774 <__ieee754_rem_pio2+0x1b4>
    3b8c:	e28f305c 	add	r3, pc, #92	; 0x5c
    3b90:	e893000c 	ldm	r3, {r2, r3}
    3b94:	eb00071d 	bl	5810 <__adddf3>
    3b98:	e28f3058 	add	r3, pc, #88	; 0x58
    3b9c:	e893000c 	ldm	r3, {r2, r3}
    3ba0:	e1a06000 	mov	r6, r0
    3ba4:	e1a07001 	mov	r7, r1
    3ba8:	eb000718 	bl	5810 <__adddf3>
    3bac:	e1a02000 	mov	r2, r0
    3bb0:	e1a03001 	mov	r3, r1
    3bb4:	e8880003 	stm	r8, {r0, r1}
    3bb8:	e1a00006 	mov	r0, r6
    3bbc:	e1a01007 	mov	r1, r7
    3bc0:	eb000711 	bl	580c <__aeabi_dsub>
    3bc4:	e28f302c 	add	r3, pc, #44	; 0x2c
    3bc8:	e893000c 	ldm	r3, {r2, r3}
    3bcc:	eb00070f 	bl	5810 <__adddf3>
    3bd0:	e3e06000 	mvn	r6, #0
    3bd4:	e5880008 	str	r0, [r8, #8]
    3bd8:	e588100c 	str	r1, [r8, #12]
    3bdc:	eafffee4 	b	3774 <__ieee754_rem_pio2+0x1b4>
    3be0:	e28db018 	add	r11, sp, #24
    3be4:	e89b0c00 	ldm	r11, {r10, r11}
    3be8:	eaffff46 	b	3908 <__ieee754_rem_pio2+0x348>
    3bec:	e1a00000 	nop			; (mov r0, r0)
    3bf0:	1a600000 	.word	0x1a600000
    3bf4:	3dd0b461 	.word	0x3dd0b461
    3bf8:	2e037073 	.word	0x2e037073
    3bfc:	3ba3198a 	.word	0x3ba3198a
    3c00:	252049c1 	.word	0x252049c1
    3c04:	397b839a 	.word	0x397b839a
    3c08:	1a626331 	.word	0x1a626331
    3c0c:	3dd0b461 	.word	0x3dd0b461
    3c10:	3ba3198a 	.word	0x3ba3198a
    3c14:	3ff921fb 	.word	0x3ff921fb

00003c18 <__kernel_cos>:
    3c18:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    3c1c:	e3c19102 	bic	r9, r1, #-2147483648	; 0x80000000
    3c20:	e35905f9 	cmp	r9, #1044381696	; 0x3e400000
    3c24:	e24dd014 	sub	sp, sp, #20
    3c28:	e1a06000 	mov	r6, r0
    3c2c:	e1a07001 	mov	r7, r1
    3c30:	e1a04000 	mov	r4, r0
    3c34:	e1a05001 	mov	r5, r1
    3c38:	e1a0a002 	mov	r10, r2
    3c3c:	e1a0b003 	mov	r11, r3
    3c40:	aa00004d 	bge	3d7c <__kernel_cos+0x164>
    3c44:	eb00096d 	bl	6200 <__aeabi_d2iz>
    3c48:	e3500000 	cmp	r0, #0
    3c4c:	0a0000ae 	beq	3f0c <__kernel_cos+0x2f4>
    3c50:	e1a02006 	mov	r2, r6
    3c54:	e1a03007 	mov	r3, r7
    3c58:	e1a00006 	mov	r0, r6
    3c5c:	e1a01007 	mov	r1, r7
    3c60:	eb0007ee 	bl	5c20 <__aeabi_dmul>
    3c64:	e28f3fab 	add	r3, pc, #684	; 0x2ac
    3c68:	e893000c 	ldm	r3, {r2, r3}
    3c6c:	e1a04000 	mov	r4, r0
    3c70:	e1a05001 	mov	r5, r1
    3c74:	eb0007e9 	bl	5c20 <__aeabi_dmul>
    3c78:	e28f3e2a 	add	r3, pc, #672	; 0x2a0
    3c7c:	e893000c 	ldm	r3, {r2, r3}
    3c80:	eb0006e2 	bl	5810 <__adddf3>
    3c84:	e1a02004 	mov	r2, r4
    3c88:	e1a03005 	mov	r3, r5
    3c8c:	eb0007e3 	bl	5c20 <__aeabi_dmul>
    3c90:	e28f3e29 	add	r3, pc, #656	; 0x290
    3c94:	e893000c 	ldm	r3, {r2, r3}
    3c98:	eb0006db 	bl	580c <__aeabi_dsub>
    3c9c:	e1a02004 	mov	r2, r4
    3ca0:	e1a03005 	mov	r3, r5
    3ca4:	eb0007dd 	bl	5c20 <__aeabi_dmul>
    3ca8:	e28f3d0a 	add	r3, pc, #640	; 0x280
    3cac:	e893000c 	ldm	r3, {r2, r3}
    3cb0:	eb0006d6 	bl	5810 <__adddf3>
    3cb4:	e1a02004 	mov	r2, r4
    3cb8:	e1a03005 	mov	r3, r5
    3cbc:	eb0007d7 	bl	5c20 <__aeabi_dmul>
    3cc0:	e28f3e27 	add	r3, pc, #624	; 0x270
    3cc4:	e893000c 	ldm	r3, {r2, r3}
    3cc8:	eb0006cf 	bl	580c <__aeabi_dsub>
    3ccc:	e1a02004 	mov	r2, r4
    3cd0:	e1a03005 	mov	r3, r5
    3cd4:	eb0007d1 	bl	5c20 <__aeabi_dmul>
    3cd8:	e28f3e26 	add	r3, pc, #608	; 0x260
    3cdc:	e893000c 	ldm	r3, {r2, r3}
    3ce0:	eb0006ca 	bl	5810 <__adddf3>
    3ce4:	e1a02004 	mov	r2, r4
    3ce8:	e1a03005 	mov	r3, r5
    3cec:	eb0007cb 	bl	5c20 <__aeabi_dmul>
    3cf0:	e88d0003 	stm	sp, {r0, r1}
    3cf4:	e1a00004 	mov	r0, r4
    3cf8:	e1a01005 	mov	r1, r5
    3cfc:	e3a02000 	mov	r2, #0
    3d00:	e59f3240 	ldr	r3, [pc, #576]	; 3f48 <__kernel_cos+0x330>
    3d04:	eb0007c5 	bl	5c20 <__aeabi_dmul>
    3d08:	e89d000c 	ldm	sp, {r2, r3}
    3d0c:	e1a08000 	mov	r8, r0
    3d10:	e1a09001 	mov	r9, r1
    3d14:	e1a00004 	mov	r0, r4
    3d18:	e1a01005 	mov	r1, r5
    3d1c:	eb0007bf 	bl	5c20 <__aeabi_dmul>
    3d20:	e1a0200a 	mov	r2, r10
    3d24:	e1a04000 	mov	r4, r0
    3d28:	e1a05001 	mov	r5, r1
    3d2c:	e1a0300b 	mov	r3, r11
    3d30:	e1a00006 	mov	r0, r6
    3d34:	e1a01007 	mov	r1, r7
    3d38:	eb0007b8 	bl	5c20 <__aeabi_dmul>
    3d3c:	e1a02000 	mov	r2, r0
    3d40:	e1a03001 	mov	r3, r1
    3d44:	e1a00004 	mov	r0, r4
    3d48:	e1a01005 	mov	r1, r5
    3d4c:	eb0006ae 	bl	580c <__aeabi_dsub>
    3d50:	e1a02000 	mov	r2, r0
    3d54:	e1a03001 	mov	r3, r1
    3d58:	e1a00008 	mov	r0, r8
    3d5c:	e1a01009 	mov	r1, r9
    3d60:	eb0006a9 	bl	580c <__aeabi_dsub>
    3d64:	e1a02000 	mov	r2, r0
    3d68:	e1a03001 	mov	r3, r1
    3d6c:	e3a00000 	mov	r0, #0
    3d70:	e59f11d4 	ldr	r1, [pc, #468]	; 3f4c <__kernel_cos+0x334>
    3d74:	eb0006a4 	bl	580c <__aeabi_dsub>
    3d78:	ea00005a 	b	3ee8 <__kernel_cos+0x2d0>
    3d7c:	e1a02000 	mov	r2, r0
    3d80:	e1a03001 	mov	r3, r1
    3d84:	eb0007a5 	bl	5c20 <__aeabi_dmul>
    3d88:	e28f3f62 	add	r3, pc, #392	; 0x188
    3d8c:	e893000c 	ldm	r3, {r2, r3}
    3d90:	e1a04000 	mov	r4, r0
    3d94:	e1a05001 	mov	r5, r1
    3d98:	eb0007a0 	bl	5c20 <__aeabi_dmul>
    3d9c:	e28f3f5f 	add	r3, pc, #380	; 0x17c
    3da0:	e893000c 	ldm	r3, {r2, r3}
    3da4:	eb000699 	bl	5810 <__adddf3>
    3da8:	e1a02004 	mov	r2, r4
    3dac:	e1a03005 	mov	r3, r5
    3db0:	eb00079a 	bl	5c20 <__aeabi_dmul>
    3db4:	e28f3f5b 	add	r3, pc, #364	; 0x16c
    3db8:	e893000c 	ldm	r3, {r2, r3}
    3dbc:	eb000692 	bl	580c <__aeabi_dsub>
    3dc0:	e1a02004 	mov	r2, r4
    3dc4:	e1a03005 	mov	r3, r5
    3dc8:	eb000794 	bl	5c20 <__aeabi_dmul>
    3dcc:	e28f3f57 	add	r3, pc, #348	; 0x15c
    3dd0:	e893000c 	ldm	r3, {r2, r3}
    3dd4:	eb00068d 	bl	5810 <__adddf3>
    3dd8:	e1a02004 	mov	r2, r4
    3ddc:	e1a03005 	mov	r3, r5
    3de0:	eb00078e 	bl	5c20 <__aeabi_dmul>
    3de4:	e28f3f53 	add	r3, pc, #332	; 0x14c
    3de8:	e893000c 	ldm	r3, {r2, r3}
    3dec:	eb000686 	bl	580c <__aeabi_dsub>
    3df0:	e1a02004 	mov	r2, r4
    3df4:	e1a03005 	mov	r3, r5
    3df8:	eb000788 	bl	5c20 <__aeabi_dmul>
    3dfc:	e28f3f4f 	add	r3, pc, #316	; 0x13c
    3e00:	e893000c 	ldm	r3, {r2, r3}
    3e04:	eb000681 	bl	5810 <__adddf3>
    3e08:	e1a03005 	mov	r3, r5
    3e0c:	e1a02004 	mov	r2, r4
    3e10:	eb000782 	bl	5c20 <__aeabi_dmul>
    3e14:	e59f3134 	ldr	r3, [pc, #308]	; 3f50 <__kernel_cos+0x338>
    3e18:	e1590003 	cmp	r9, r3
    3e1c:	e88d0003 	stm	sp, {r0, r1}
    3e20:	daffffb3 	ble	3cf4 <__kernel_cos+0xdc>
    3e24:	e59f3128 	ldr	r3, [pc, #296]	; 3f54 <__kernel_cos+0x33c>
    3e28:	e1590003 	cmp	r9, r3
    3e2c:	e3a02000 	mov	r2, #0
    3e30:	ca00002f 	bgt	3ef4 <__kernel_cos+0x2dc>
    3e34:	e2493602 	sub	r3, r9, #2097152	; 0x200000
    3e38:	e3a02000 	mov	r2, #0
    3e3c:	e3a00000 	mov	r0, #0
    3e40:	e59f1104 	ldr	r1, [pc, #260]	; 3f4c <__kernel_cos+0x334>
    3e44:	e1a08002 	mov	r8, r2
    3e48:	e1a09003 	mov	r9, r3
    3e4c:	eb00066e 	bl	580c <__aeabi_dsub>
    3e50:	e58d0008 	str	r0, [sp, #8]
    3e54:	e58d100c 	str	r1, [sp, #12]
    3e58:	e1a00004 	mov	r0, r4
    3e5c:	e1a01005 	mov	r1, r5
    3e60:	e3a02000 	mov	r2, #0
    3e64:	e59f30dc 	ldr	r3, [pc, #220]	; 3f48 <__kernel_cos+0x330>
    3e68:	eb00076c 	bl	5c20 <__aeabi_dmul>
    3e6c:	e1a02008 	mov	r2, r8
    3e70:	e1a03009 	mov	r3, r9
    3e74:	eb000664 	bl	580c <__aeabi_dsub>
    3e78:	e89d000c 	ldm	sp, {r2, r3}
    3e7c:	e1a08000 	mov	r8, r0
    3e80:	e1a09001 	mov	r9, r1
    3e84:	e1a00004 	mov	r0, r4
    3e88:	e1a01005 	mov	r1, r5
    3e8c:	eb000763 	bl	5c20 <__aeabi_dmul>
    3e90:	e1a0200a 	mov	r2, r10
    3e94:	e1a04000 	mov	r4, r0
    3e98:	e1a05001 	mov	r5, r1
    3e9c:	e1a0300b 	mov	r3, r11
    3ea0:	e1a00006 	mov	r0, r6
    3ea4:	e1a01007 	mov	r1, r7
    3ea8:	eb00075c 	bl	5c20 <__aeabi_dmul>
    3eac:	e1a02000 	mov	r2, r0
    3eb0:	e1a03001 	mov	r3, r1
    3eb4:	e1a00004 	mov	r0, r4
    3eb8:	e1a01005 	mov	r1, r5
    3ebc:	eb000652 	bl	580c <__aeabi_dsub>
    3ec0:	e1a02000 	mov	r2, r0
    3ec4:	e1a03001 	mov	r3, r1
    3ec8:	e1a00008 	mov	r0, r8
    3ecc:	e1a01009 	mov	r1, r9
    3ed0:	eb00064d 	bl	580c <__aeabi_dsub>
    3ed4:	e1a02000 	mov	r2, r0
    3ed8:	e1a03001 	mov	r3, r1
    3edc:	e28d1008 	add	r1, sp, #8
    3ee0:	e8910003 	ldm	r1, {r0, r1}
    3ee4:	eb000648 	bl	580c <__aeabi_dsub>
    3ee8:	e28dd014 	add	sp, sp, #20
    3eec:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    3ef0:	e12fff1e 	bx	lr
    3ef4:	e59f305c 	ldr	r3, [pc, #92]	; 3f58 <__kernel_cos+0x340>
    3ef8:	e3a08000 	mov	r8, #0
    3efc:	e58d2008 	str	r2, [sp, #8]
    3f00:	e58d300c 	str	r3, [sp, #12]
    3f04:	e59f9050 	ldr	r9, [pc, #80]	; 3f5c <__kernel_cos+0x344>
    3f08:	eaffffd2 	b	3e58 <__kernel_cos+0x240>
    3f0c:	e3a00000 	mov	r0, #0
    3f10:	e59f1034 	ldr	r1, [pc, #52]	; 3f4c <__kernel_cos+0x334>
    3f14:	eafffff3 	b	3ee8 <__kernel_cos+0x2d0>
    3f18:	be8838d4 	.word	0xbe8838d4
    3f1c:	bda8fae9 	.word	0xbda8fae9
    3f20:	bdb4b1c4 	.word	0xbdb4b1c4
    3f24:	3e21ee9e 	.word	0x3e21ee9e
    3f28:	809c52ad 	.word	0x809c52ad
    3f2c:	3e927e4f 	.word	0x3e927e4f
    3f30:	19cb1590 	.word	0x19cb1590
    3f34:	3efa01a0 	.word	0x3efa01a0
    3f38:	16c15177 	.word	0x16c15177
    3f3c:	3f56c16c 	.word	0x3f56c16c
    3f40:	5555554c 	.word	0x5555554c
    3f44:	3fa55555 	.word	0x3fa55555
    3f48:	3fe00000 	.word	0x3fe00000
    3f4c:	3ff00000 	.word	0x3ff00000
    3f50:	3fd33332 	.word	0x3fd33332
    3f54:	3fe90000 	.word	0x3fe90000
    3f58:	3fe70000 	.word	0x3fe70000
    3f5c:	3fd20000 	.word	0x3fd20000

00003f60 <__kernel_rem_pio2>:
    3f60:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    3f64:	e59feb6c 	ldr	lr, [pc, #2924]	; 4ad8 <__kernel_rem_pio2+0xb78>
    3f68:	e242c003 	sub	r12, r2, #3
    3f6c:	e0ce4e9c 	smull	r4, lr, r12, lr
    3f70:	e1a0cfcc 	asr	r12, r12, #31
    3f74:	e06cc14e 	rsb	r12, r12, lr, asr #2
    3f78:	e24ddf99 	sub	sp, sp, #612	; 0x264
    3f7c:	e1cccfcc 	bic	r12, r12, r12, asr #31
    3f80:	e58dc028 	str	r12, [sp, #40]	; 0x28
    3f84:	e1a0b003 	mov	r11, r3
    3f88:	e59dc288 	ldr	r12, [sp, #648]	; 0x288
    3f8c:	e59f3b48 	ldr	r3, [pc, #2888]	; 4adc <__kernel_rem_pio2+0xb7c>
    3f90:	e793310c 	ldr	r3, [r3, r12, lsl #2]
    3f94:	e59dc028 	ldr	r12, [sp, #40]	; 0x28
    3f98:	e58d3020 	str	r3, [sp, #32]
    3f9c:	e59de020 	ldr	lr, [sp, #32]
    3fa0:	e1e0300c 	mvn	r3, r12
    3fa4:	e24b4001 	sub	r4, r11, #1
    3fa8:	e0833083 	add	r3, r3, r3, lsl #1
    3fac:	e58d0010 	str	r0, [sp, #16]
    3fb0:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
    3fb4:	e0823183 	add	r3, r2, r3, lsl #3
    3fb8:	e094c00e 	adds	r12, r4, lr
    3fbc:	e58d400c 	str	r4, [sp, #12]
    3fc0:	e58d101c 	str	r1, [sp, #28]
    3fc4:	e58d3018 	str	r3, [sp, #24]
    3fc8:	e0646000 	rsb	r6, r4, r0
    3fcc:	4a000012 	bmi	401c <__kernel_rem_pio2+0xbc>
    3fd0:	e086c00c 	add	r12, r6, r12
    3fd4:	e28c4001 	add	r4, r12, #1
    3fd8:	e59dc28c 	ldr	r12, [sp, #652]	; 0x28c
    3fdc:	e28d8080 	add	r8, sp, #128	; 0x80
    3fe0:	e08c5106 	add	r5, r12, r6, lsl #2
    3fe4:	e3a07000 	mov	r7, #0
    3fe8:	ea000006 	b	4008 <__kernel_rem_pio2+0xa8>
    3fec:	e7950007 	ldr	r0, [r5, r7]
    3ff0:	eb0006d3 	bl	5b44 <__aeabi_i2d>
    3ff4:	e2866001 	add	r6, r6, #1
    3ff8:	e1560004 	cmp	r6, r4
    3ffc:	e8a80003 	stmia	r8!, {r0, r1}
    4000:	e2877004 	add	r7, r7, #4
    4004:	0a000004 	beq	401c <__kernel_rem_pio2+0xbc>
    4008:	e3560000 	cmp	r6, #0
    400c:	aafffff6 	bge	3fec <__kernel_rem_pio2+0x8c>
    4010:	e3a00000 	mov	r0, #0
    4014:	e3a01000 	mov	r1, #0
    4018:	eafffff5 	b	3ff4 <__kernel_rem_pio2+0x94>
    401c:	e59d4020 	ldr	r4, [sp, #32]
    4020:	e3540000 	cmp	r4, #0
    4024:	ba000020 	blt	40ac <__kernel_rem_pio2+0x14c>
    4028:	e59d4020 	ldr	r4, [sp, #32]
    402c:	e28dcf72 	add	r12, sp, #456	; 0x1c8
    4030:	e08cc184 	add	r12, r12, r4, lsl #3
    4034:	e58dc004 	str	r12, [sp, #4]
    4038:	e28dad07 	add	r10, sp, #448	; 0x1c0
    403c:	e1a0800b 	mov	r8, r11
    4040:	e59dc00c 	ldr	r12, [sp, #12]
    4044:	e35c0000 	cmp	r12, #0
    4048:	ba000130 	blt	4510 <__kernel_rem_pio2+0x5b0>
    404c:	e28de080 	add	lr, sp, #128	; 0x80
    4050:	e59d9010 	ldr	r9, [sp, #16]
    4054:	e08e7188 	add	r7, lr, r8, lsl #3
    4058:	e3a04000 	mov	r4, #0
    405c:	e3a05000 	mov	r5, #0
    4060:	e3a06000 	mov	r6, #0
    4064:	e937000c 	ldmdb	r7!, {r2, r3}
    4068:	e8b90003 	ldm	r9!, {r0, r1}
    406c:	eb0006eb 	bl	5c20 <__aeabi_dmul>
    4070:	e1a02000 	mov	r2, r0
    4074:	e1a03001 	mov	r3, r1
    4078:	e1a00004 	mov	r0, r4
    407c:	e1a01005 	mov	r1, r5
    4080:	eb0005e2 	bl	5810 <__adddf3>
    4084:	e2866001 	add	r6, r6, #1
    4088:	e156000b 	cmp	r6, r11
    408c:	e1a04000 	mov	r4, r0
    4090:	e1a05001 	mov	r5, r1
    4094:	1afffff2 	bne	4064 <__kernel_rem_pio2+0x104>
    4098:	e8aa0030 	stmia	r10!, {r4, r5}
    409c:	e59d4004 	ldr	r4, [sp, #4]
    40a0:	e15a0004 	cmp	r10, r4
    40a4:	e2888001 	add	r8, r8, #1
    40a8:	1affffe4 	bne	4040 <__kernel_rem_pio2+0xe0>
    40ac:	e59dc020 	ldr	r12, [sp, #32]
    40b0:	e28d4030 	add	r4, sp, #48	; 0x30
    40b4:	e084410c 	add	r4, r4, r12, lsl #2
    40b8:	e58d402c 	str	r4, [sp, #44]	; 0x2c
    40bc:	e58dc004 	str	r12, [sp, #4]
    40c0:	e59d4004 	ldr	r4, [sp, #4]
    40c4:	e28dce26 	add	r12, sp, #608	; 0x260
    40c8:	e1a0a184 	lsl	r10, r4, #3
    40cc:	e08c300a 	add	r3, r12, r10
    40d0:	e3540000 	cmp	r4, #0
    40d4:	e24350a0 	sub	r5, r3, #160	; 0xa0
    40d8:	e8950030 	ldm	r5, {r4, r5}
    40dc:	da00001f 	ble	4160 <__kernel_rem_pio2+0x200>
    40e0:	e59dc004 	ldr	r12, [sp, #4]
    40e4:	e28d802c 	add	r8, sp, #44	; 0x2c
    40e8:	e28ded07 	add	lr, sp, #448	; 0x1c0
    40ec:	e08ea00a 	add	r10, lr, r10
    40f0:	e088910c 	add	r9, r8, r12, lsl #2
    40f4:	e3a02000 	mov	r2, #0
    40f8:	e59f39e0 	ldr	r3, [pc, #2528]	; 4ae0 <__kernel_rem_pio2+0xb80>
    40fc:	e1a00004 	mov	r0, r4
    4100:	e1a01005 	mov	r1, r5
    4104:	eb0006c5 	bl	5c20 <__aeabi_dmul>
    4108:	eb00083c 	bl	6200 <__aeabi_d2iz>
    410c:	eb00068c 	bl	5b44 <__aeabi_i2d>
    4110:	e3a02000 	mov	r2, #0
    4114:	e59f39c8 	ldr	r3, [pc, #2504]	; 4ae4 <__kernel_rem_pio2+0xb84>
    4118:	e1a06000 	mov	r6, r0
    411c:	e1a07001 	mov	r7, r1
    4120:	eb0006be 	bl	5c20 <__aeabi_dmul>
    4124:	e1a02000 	mov	r2, r0
    4128:	e1a03001 	mov	r3, r1
    412c:	e1a00004 	mov	r0, r4
    4130:	e1a01005 	mov	r1, r5
    4134:	eb0005b4 	bl	580c <__aeabi_dsub>
    4138:	eb000830 	bl	6200 <__aeabi_d2iz>
    413c:	e1a02006 	mov	r2, r6
    4140:	e5a80004 	str	r0, [r8, #4]!
    4144:	e1a03007 	mov	r3, r7
    4148:	e93a0003 	ldmdb	r10!, {r0, r1}
    414c:	eb0005af 	bl	5810 <__adddf3>
    4150:	e1580009 	cmp	r8, r9
    4154:	e1a04000 	mov	r4, r0
    4158:	e1a05001 	mov	r5, r1
    415c:	1affffe4 	bne	40f4 <__kernel_rem_pio2+0x194>
    4160:	e59d2018 	ldr	r2, [sp, #24]
    4164:	e1a00004 	mov	r0, r4
    4168:	e1a01005 	mov	r1, r5
    416c:	eb000373 	bl	4f40 <scalbn>
    4170:	e3a02000 	mov	r2, #0
    4174:	e3a035ff 	mov	r3, #1069547520	; 0x3fc00000
    4178:	e1a04000 	mov	r4, r0
    417c:	e1a05001 	mov	r5, r1
    4180:	eb0006a6 	bl	5c20 <__aeabi_dmul>
    4184:	eb0002e5 	bl	4d20 <floor>
    4188:	e3a02000 	mov	r2, #0
    418c:	e59f3954 	ldr	r3, [pc, #2388]	; 4ae8 <__kernel_rem_pio2+0xb88>
    4190:	eb0006a2 	bl	5c20 <__aeabi_dmul>
    4194:	e1a02000 	mov	r2, r0
    4198:	e1a03001 	mov	r3, r1
    419c:	e1a00004 	mov	r0, r4
    41a0:	e1a01005 	mov	r1, r5
    41a4:	eb000598 	bl	580c <__aeabi_dsub>
    41a8:	e1a04000 	mov	r4, r0
    41ac:	e1a05001 	mov	r5, r1
    41b0:	eb000812 	bl	6200 <__aeabi_d2iz>
    41b4:	e1a08000 	mov	r8, r0
    41b8:	eb000661 	bl	5b44 <__aeabi_i2d>
    41bc:	e1a02000 	mov	r2, r0
    41c0:	e1a03001 	mov	r3, r1
    41c4:	e1a00004 	mov	r0, r4
    41c8:	e1a01005 	mov	r1, r5
    41cc:	eb00058e 	bl	580c <__aeabi_dsub>
    41d0:	e59d4018 	ldr	r4, [sp, #24]
    41d4:	e3540000 	cmp	r4, #0
    41d8:	e1a06000 	mov	r6, r0
    41dc:	e1a07001 	mov	r7, r1
    41e0:	da0000ad 	ble	449c <__kernel_rem_pio2+0x53c>
    41e4:	e59dc004 	ldr	r12, [sp, #4]
    41e8:	e28dee26 	add	lr, sp, #608	; 0x260
    41ec:	e24c2001 	sub	r2, r12, #1
    41f0:	e08e2102 	add	r2, lr, r2, lsl #2
    41f4:	e5120230 	ldr	r0, [r2, #-560]	; 0xfffffdd0
    41f8:	e2643018 	rsb	r3, r4, #24
    41fc:	e1a01350 	asr	r1, r0, r3
    4200:	e0403311 	sub	r3, r0, r1, lsl r3
    4204:	e2645017 	rsb	r5, r4, #23
    4208:	e1a05553 	asr	r5, r3, r5
    420c:	e5023230 	str	r3, [r2, #-560]	; 0xfffffdd0
    4210:	e0888001 	add	r8, r8, r1
    4214:	e3550000 	cmp	r5, #0
    4218:	da000027 	ble	42bc <__kernel_rem_pio2+0x35c>
    421c:	e59d4004 	ldr	r4, [sp, #4]
    4220:	e3540000 	cmp	r4, #0
    4224:	e2888001 	add	r8, r8, #1
    4228:	da0000b6 	ble	4508 <__kernel_rem_pio2+0x5a8>
    422c:	e28d3030 	add	r3, sp, #48	; 0x30
    4230:	e0830104 	add	r0, r3, r4, lsl #2
    4234:	e3a04000 	mov	r4, #0
    4238:	ea000005 	b	4254 <__kernel_rem_pio2+0x2f4>
    423c:	e3520000 	cmp	r2, #0
    4240:	12622401 	rsbne	r2, r2, #16777216	; 0x1000000
    4244:	15032004 	strne	r2, [r3, #-4]
    4248:	13a04001 	movne	r4, #1
    424c:	e1530000 	cmp	r3, r0
    4250:	0a000008 	beq	4278 <__kernel_rem_pio2+0x318>
    4254:	e3540000 	cmp	r4, #0
    4258:	e4932004 	ldr	r2, [r3], #4
    425c:	0afffff6 	beq	423c <__kernel_rem_pio2+0x2dc>
    4260:	e3e014ff 	mvn	r1, #-16777216	; 0xff000000
    4264:	e0621001 	rsb	r1, r2, r1
    4268:	e1530000 	cmp	r3, r0
    426c:	e5031004 	str	r1, [r3, #-4]
    4270:	e3a04001 	mov	r4, #1
    4274:	1afffff6 	bne	4254 <__kernel_rem_pio2+0x2f4>
    4278:	e59dc018 	ldr	r12, [sp, #24]
    427c:	e35c0000 	cmp	r12, #0
    4280:	da00000b 	ble	42b4 <__kernel_rem_pio2+0x354>
    4284:	e35c0001 	cmp	r12, #1
    4288:	0a00008a 	beq	44b8 <__kernel_rem_pio2+0x558>
    428c:	e35c0002 	cmp	r12, #2
    4290:	1a000007 	bne	42b4 <__kernel_rem_pio2+0x354>
    4294:	e59dc004 	ldr	r12, [sp, #4]
    4298:	e28dee26 	add	lr, sp, #608	; 0x260
    429c:	e24c3001 	sub	r3, r12, #1
    42a0:	e08e3103 	add	r3, lr, r3, lsl #2
    42a4:	e5132230 	ldr	r2, [r3, #-560]	; 0xfffffdd0
    42a8:	e3c224ff 	bic	r2, r2, #-16777216	; 0xff000000
    42ac:	e3c22503 	bic	r2, r2, #12582912	; 0xc00000
    42b0:	e5032230 	str	r2, [r3, #-560]	; 0xfffffdd0
    42b4:	e3550002 	cmp	r5, #2
    42b8:	0a000062 	beq	4448 <__kernel_rem_pio2+0x4e8>
    42bc:	e1a00006 	mov	r0, r6
    42c0:	e1a01007 	mov	r1, r7
    42c4:	e3a02000 	mov	r2, #0
    42c8:	e3a03000 	mov	r3, #0
    42cc:	eb0007ad 	bl	6188 <__aeabi_dcmpeq>
    42d0:	e3500000 	cmp	r0, #0
    42d4:	0a000090 	beq	451c <__kernel_rem_pio2+0x5bc>
    42d8:	e59d4004 	ldr	r4, [sp, #4]
    42dc:	e59dc020 	ldr	r12, [sp, #32]
    42e0:	e2440001 	sub	r0, r4, #1
    42e4:	e15c0000 	cmp	r12, r0
    42e8:	ca000009 	bgt	4314 <__kernel_rem_pio2+0x3b4>
    42ec:	e28de030 	add	lr, sp, #48	; 0x30
    42f0:	e59dc02c 	ldr	r12, [sp, #44]	; 0x2c
    42f4:	e08e3104 	add	r3, lr, r4, lsl #2
    42f8:	e3a02000 	mov	r2, #0
    42fc:	e5331004 	ldr	r1, [r3, #-4]!
    4300:	e153000c 	cmp	r3, r12
    4304:	e1822001 	orr	r2, r2, r1
    4308:	1afffffb 	bne	42fc <__kernel_rem_pio2+0x39c>
    430c:	e3520000 	cmp	r2, #0
    4310:	1a0001c9 	bne	4a3c <__kernel_rem_pio2+0xadc>
    4314:	e59d4020 	ldr	r4, [sp, #32]
    4318:	e2442001 	sub	r2, r4, #1
    431c:	e1a02102 	lsl	r2, r2, #2
    4320:	e28dce26 	add	r12, sp, #608	; 0x260
    4324:	e08c3002 	add	r3, r12, r2
    4328:	e5133230 	ldr	r3, [r3, #-560]	; 0xfffffdd0
    432c:	e3530000 	cmp	r3, #0
    4330:	1a0001d9 	bne	4a9c <__kernel_rem_pio2+0xb3c>
    4334:	e28de030 	add	lr, sp, #48	; 0x30
    4338:	e08e2002 	add	r2, lr, r2
    433c:	e3a03001 	mov	r3, #1
    4340:	e5321004 	ldr	r1, [r2, #-4]!
    4344:	e3510000 	cmp	r1, #0
    4348:	e2833001 	add	r3, r3, #1
    434c:	0afffffb 	beq	4340 <__kernel_rem_pio2+0x3e0>
    4350:	e59d4004 	ldr	r4, [sp, #4]
    4354:	e0843003 	add	r3, r4, r3
    4358:	e2848001 	add	r8, r4, #1
    435c:	e1580003 	cmp	r8, r3
    4360:	e58d3024 	str	r3, [sp, #36]	; 0x24
    4364:	ca000031 	bgt	4430 <__kernel_rem_pio2+0x4d0>
    4368:	e59d4004 	ldr	r4, [sp, #4]
    436c:	e59dc028 	ldr	r12, [sp, #40]	; 0x28
    4370:	e084300c 	add	r3, r4, r12
    4374:	e59dc28c 	ldr	r12, [sp, #652]	; 0x28c
    4378:	e59d400c 	ldr	r4, [sp, #12]
    437c:	e08c3103 	add	r3, r12, r3, lsl #2
    4380:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
    4384:	e0849008 	add	r9, r4, r8
    4388:	e28d4d07 	add	r4, sp, #448	; 0x1c0
    438c:	e0844188 	add	r4, r4, r8, lsl #3
    4390:	e28cc001 	add	r12, r12, #1
    4394:	e28de080 	add	lr, sp, #128	; 0x80
    4398:	e98d0018 	stmib	sp, {r3, r4}
    439c:	e58dc014 	str	r12, [sp, #20]
    43a0:	e08e9189 	add	r9, lr, r9, lsl #3
    43a4:	e59d4004 	ldr	r4, [sp, #4]
    43a8:	e5b40004 	ldr	r0, [r4, #4]!
    43ac:	e58d4004 	str	r4, [sp, #4]
    43b0:	eb0005e3 	bl	5b44 <__aeabi_i2d>
    43b4:	e59dc00c 	ldr	r12, [sp, #12]
    43b8:	e35c0000 	cmp	r12, #0
    43bc:	e8a90003 	stmia	r9!, {r0, r1}
    43c0:	ba00001d 	blt	443c <__kernel_rem_pio2+0x4dc>
    43c4:	e088700b 	add	r7, r8, r11
    43c8:	e28de080 	add	lr, sp, #128	; 0x80
    43cc:	e59da010 	ldr	r10, [sp, #16]
    43d0:	e08e7187 	add	r7, lr, r7, lsl #3
    43d4:	e3a04000 	mov	r4, #0
    43d8:	e3a05000 	mov	r5, #0
    43dc:	e3a06000 	mov	r6, #0
    43e0:	e937000c 	ldmdb	r7!, {r2, r3}
    43e4:	e8ba0003 	ldm	r10!, {r0, r1}
    43e8:	eb00060c 	bl	5c20 <__aeabi_dmul>
    43ec:	e1a02000 	mov	r2, r0
    43f0:	e1a03001 	mov	r3, r1
    43f4:	e1a00004 	mov	r0, r4
    43f8:	e1a01005 	mov	r1, r5
    43fc:	eb000503 	bl	5810 <__adddf3>
    4400:	e2866001 	add	r6, r6, #1
    4404:	e156000b 	cmp	r6, r11
    4408:	e1a04000 	mov	r4, r0
    440c:	e1a05001 	mov	r5, r1
    4410:	1afffff2 	bne	43e0 <__kernel_rem_pio2+0x480>
    4414:	e59dc014 	ldr	r12, [sp, #20]
    4418:	e2888001 	add	r8, r8, #1
    441c:	e158000c 	cmp	r8, r12
    4420:	e59dc008 	ldr	r12, [sp, #8]
    4424:	e8ac0030 	stmia	r12!, {r4, r5}
    4428:	e58dc008 	str	r12, [sp, #8]
    442c:	1affffdc 	bne	43a4 <__kernel_rem_pio2+0x444>
    4430:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
    4434:	e58dc004 	str	r12, [sp, #4]
    4438:	eaffff20 	b	40c0 <__kernel_rem_pio2+0x160>
    443c:	e3a04000 	mov	r4, #0
    4440:	e3a05000 	mov	r5, #0
    4444:	eafffff2 	b	4414 <__kernel_rem_pio2+0x4b4>
    4448:	e1a02006 	mov	r2, r6
    444c:	e1a03007 	mov	r3, r7
    4450:	e3a00000 	mov	r0, #0
    4454:	e59f1690 	ldr	r1, [pc, #1680]	; 4aec <__kernel_rem_pio2+0xb8c>
    4458:	eb0004eb 	bl	580c <__aeabi_dsub>
    445c:	e3540000 	cmp	r4, #0
    4460:	e1a06000 	mov	r6, r0
    4464:	e1a07001 	mov	r7, r1
    4468:	0affff93 	beq	42bc <__kernel_rem_pio2+0x35c>
    446c:	e59d2018 	ldr	r2, [sp, #24]
    4470:	e3a00000 	mov	r0, #0
    4474:	e59f1670 	ldr	r1, [pc, #1648]	; 4aec <__kernel_rem_pio2+0xb8c>
    4478:	eb0002b0 	bl	4f40 <scalbn>
    447c:	e1a02000 	mov	r2, r0
    4480:	e1a03001 	mov	r3, r1
    4484:	e1a00006 	mov	r0, r6
    4488:	e1a01007 	mov	r1, r7
    448c:	eb0004de 	bl	580c <__aeabi_dsub>
    4490:	e1a06000 	mov	r6, r0
    4494:	e1a07001 	mov	r7, r1
    4498:	eaffff87 	b	42bc <__kernel_rem_pio2+0x35c>
    449c:	1a00000e 	bne	44dc <__kernel_rem_pio2+0x57c>
    44a0:	e59d4004 	ldr	r4, [sp, #4]
    44a4:	e28dce26 	add	r12, sp, #608	; 0x260
    44a8:	e08c3104 	add	r3, r12, r4, lsl #2
    44ac:	e5135234 	ldr	r5, [r3, #-564]	; 0xfffffdcc
    44b0:	e1a05bc5 	asr	r5, r5, #23
    44b4:	eaffff56 	b	4214 <__kernel_rem_pio2+0x2b4>
    44b8:	e59dc004 	ldr	r12, [sp, #4]
    44bc:	e28dee26 	add	lr, sp, #608	; 0x260
    44c0:	e24c3001 	sub	r3, r12, #1
    44c4:	e08e3103 	add	r3, lr, r3, lsl #2
    44c8:	e5132230 	ldr	r2, [r3, #-560]	; 0xfffffdd0
    44cc:	e3c224ff 	bic	r2, r2, #-16777216	; 0xff000000
    44d0:	e3c22502 	bic	r2, r2, #8388608	; 0x800000
    44d4:	e5032230 	str	r2, [r3, #-560]	; 0xfffffdd0
    44d8:	eaffff75 	b	42b4 <__kernel_rem_pio2+0x354>
    44dc:	e3a02000 	mov	r2, #0
    44e0:	e59f3608 	ldr	r3, [pc, #1544]	; 4af0 <__kernel_rem_pio2+0xb90>
    44e4:	eb000739 	bl	61d0 <__aeabi_dcmpge>
    44e8:	e3500000 	cmp	r0, #0
    44ec:	03a05000 	moveq	r5, #0
    44f0:	0affff71 	beq	42bc <__kernel_rem_pio2+0x35c>
    44f4:	e59d4004 	ldr	r4, [sp, #4]
    44f8:	e3540000 	cmp	r4, #0
    44fc:	e3a05002 	mov	r5, #2
    4500:	e2888001 	add	r8, r8, #1
    4504:	caffff48 	bgt	422c <__kernel_rem_pio2+0x2cc>
    4508:	e3a04000 	mov	r4, #0
    450c:	eaffff59 	b	4278 <__kernel_rem_pio2+0x318>
    4510:	e3a04000 	mov	r4, #0
    4514:	e3a05000 	mov	r5, #0
    4518:	eafffede 	b	4098 <__kernel_rem_pio2+0x138>
    451c:	e59d4018 	ldr	r4, [sp, #24]
    4520:	e1a00006 	mov	r0, r6
    4524:	e2642000 	rsb	r2, r4, #0
    4528:	e1a01007 	mov	r1, r7
    452c:	e58d500c 	str	r5, [sp, #12]
    4530:	e58d8010 	str	r8, [sp, #16]
    4534:	eb000281 	bl	4f40 <scalbn>
    4538:	e3a02000 	mov	r2, #0
    453c:	e59f35a0 	ldr	r3, [pc, #1440]	; 4ae4 <__kernel_rem_pio2+0xb84>
    4540:	e1a04000 	mov	r4, r0
    4544:	e1a05001 	mov	r5, r1
    4548:	eb000720 	bl	61d0 <__aeabi_dcmpge>
    454c:	e3500000 	cmp	r0, #0
    4550:	0a000153 	beq	4aa4 <__kernel_rem_pio2+0xb44>
    4554:	e3a02000 	mov	r2, #0
    4558:	e59f3580 	ldr	r3, [pc, #1408]	; 4ae0 <__kernel_rem_pio2+0xb80>
    455c:	e1a00004 	mov	r0, r4
    4560:	e1a01005 	mov	r1, r5
    4564:	eb0005ad 	bl	5c20 <__aeabi_dmul>
    4568:	eb000724 	bl	6200 <__aeabi_d2iz>
    456c:	eb000574 	bl	5b44 <__aeabi_i2d>
    4570:	e3a02000 	mov	r2, #0
    4574:	e59f3568 	ldr	r3, [pc, #1384]	; 4ae4 <__kernel_rem_pio2+0xb84>
    4578:	e1a06000 	mov	r6, r0
    457c:	e1a07001 	mov	r7, r1
    4580:	eb0005a6 	bl	5c20 <__aeabi_dmul>
    4584:	e1a02000 	mov	r2, r0
    4588:	e1a03001 	mov	r3, r1
    458c:	e1a00004 	mov	r0, r4
    4590:	e1a01005 	mov	r1, r5
    4594:	eb00049c 	bl	580c <__aeabi_dsub>
    4598:	eb000718 	bl	6200 <__aeabi_d2iz>
    459c:	e59d4004 	ldr	r4, [sp, #4]
    45a0:	e28dce26 	add	r12, sp, #608	; 0x260
    45a4:	e08c3104 	add	r3, r12, r4, lsl #2
    45a8:	e5030230 	str	r0, [r3, #-560]	; 0xfffffdd0
    45ac:	e1a01007 	mov	r1, r7
    45b0:	e1a00006 	mov	r0, r6
    45b4:	eb000711 	bl	6200 <__aeabi_d2iz>
    45b8:	e2844001 	add	r4, r4, #1
    45bc:	e28dee26 	add	lr, sp, #608	; 0x260
    45c0:	e08e3104 	add	r3, lr, r4, lsl #2
    45c4:	e58d4004 	str	r4, [sp, #4]
    45c8:	e59d4018 	ldr	r4, [sp, #24]
    45cc:	e2844018 	add	r4, r4, #24
    45d0:	e58d4018 	str	r4, [sp, #24]
    45d4:	e5030230 	str	r0, [r3, #-560]	; 0xfffffdd0
    45d8:	e3a00000 	mov	r0, #0
    45dc:	e59f1508 	ldr	r1, [pc, #1288]	; 4aec <__kernel_rem_pio2+0xb8c>
    45e0:	e59d2018 	ldr	r2, [sp, #24]
    45e4:	eb000255 	bl	4f40 <scalbn>
    45e8:	e59dc004 	ldr	r12, [sp, #4]
    45ec:	e35c0000 	cmp	r12, #0
    45f0:	e1a04000 	mov	r4, r0
    45f4:	e1a05001 	mov	r5, r1
    45f8:	ba00003b 	blt	46ec <__kernel_rem_pio2+0x78c>
    45fc:	e28c6001 	add	r6, r12, #1
    4600:	e28d9d07 	add	r9, sp, #448	; 0x1c0
    4604:	e28de030 	add	lr, sp, #48	; 0x30
    4608:	e08e7106 	add	r7, lr, r6, lsl #2
    460c:	e0896186 	add	r6, r9, r6, lsl #3
    4610:	e5370004 	ldr	r0, [r7, #-4]!
    4614:	eb00054a 	bl	5b44 <__aeabi_i2d>
    4618:	e1a02004 	mov	r2, r4
    461c:	e1a03005 	mov	r3, r5
    4620:	eb00057e 	bl	5c20 <__aeabi_dmul>
    4624:	e3a02000 	mov	r2, #0
    4628:	e9260003 	stmdb	r6!, {r0, r1}
    462c:	e59f34ac 	ldr	r3, [pc, #1196]	; 4ae0 <__kernel_rem_pio2+0xb80>
    4630:	e1a00004 	mov	r0, r4
    4634:	e1a01005 	mov	r1, r5
    4638:	eb000578 	bl	5c20 <__aeabi_dmul>
    463c:	e1560009 	cmp	r6, r9
    4640:	e1a04000 	mov	r4, r0
    4644:	e1a05001 	mov	r5, r1
    4648:	1afffff0 	bne	4610 <__kernel_rem_pio2+0x6b0>
    464c:	e59da004 	ldr	r10, [sp, #4]
    4650:	e59db020 	ldr	r11, [sp, #32]
    4654:	e58da008 	str	r10, [sp, #8]
    4658:	e3a08000 	mov	r8, #0
    465c:	e35b0000 	cmp	r11, #0
    4660:	b3a04000 	movlt	r4, #0
    4664:	b3a05000 	movlt	r5, #0
    4668:	ba000015 	blt	46c4 <__kernel_rem_pio2+0x764>
    466c:	e59d4008 	ldr	r4, [sp, #8]
    4670:	e59fa47c 	ldr	r10, [pc, #1148]	; 4af4 <__kernel_rem_pio2+0xb94>
    4674:	e0897184 	add	r7, r9, r4, lsl #3
    4678:	e3a05000 	mov	r5, #0
    467c:	e3a04000 	mov	r4, #0
    4680:	e3a06000 	mov	r6, #0
    4684:	ea000001 	b	4690 <__kernel_rem_pio2+0x730>
    4688:	e1560008 	cmp	r6, r8
    468c:	ca00000c 	bgt	46c4 <__kernel_rem_pio2+0x764>
    4690:	e8b7000c 	ldm	r7!, {r2, r3}
    4694:	e8ba0003 	ldm	r10!, {r0, r1}
    4698:	eb000560 	bl	5c20 <__aeabi_dmul>
    469c:	e1a02000 	mov	r2, r0
    46a0:	e1a03001 	mov	r3, r1
    46a4:	e1a00004 	mov	r0, r4
    46a8:	e1a01005 	mov	r1, r5
    46ac:	eb000457 	bl	5810 <__adddf3>
    46b0:	e2866001 	add	r6, r6, #1
    46b4:	e15b0006 	cmp	r11, r6
    46b8:	e1a04000 	mov	r4, r0
    46bc:	e1a05001 	mov	r5, r1
    46c0:	aafffff0 	bge	4688 <__kernel_rem_pio2+0x728>
    46c4:	e59dc008 	ldr	r12, [sp, #8]
    46c8:	e28d0e26 	add	r0, sp, #608	; 0x260
    46cc:	e24cc001 	sub	r12, r12, #1
    46d0:	e0803188 	add	r3, r0, r8, lsl #3
    46d4:	e37c0001 	cmn	r12, #1
    46d8:	e58dc008 	str	r12, [sp, #8]
    46dc:	e5034140 	str	r4, [r3, #-320]	; 0xfffffec0
    46e0:	e503513c 	str	r5, [r3, #-316]	; 0xfffffec4
    46e4:	e2888001 	add	r8, r8, #1
    46e8:	1affffdb 	bne	465c <__kernel_rem_pio2+0x6fc>
    46ec:	e59dc288 	ldr	r12, [sp, #648]	; 0x288
    46f0:	e35c0003 	cmp	r12, #3
    46f4:	979ff10c 	ldrls	pc, [pc, r12, lsl #2]
    46f8:	ea000015 	b	4754 <__kernel_rem_pio2+0x7f4>
    46fc:	000049dc 	.word	0x000049dc
    4700:	000048f8 	.word	0x000048f8
    4704:	000048f8 	.word	0x000048f8
    4708:	00004768 	.word	0x00004768
    470c:	e59d000c 	ldr	r0, [sp, #12]
    4710:	e3a0c000 	mov	r12, #0
    4714:	e3500000 	cmp	r0, #0
    4718:	e1a0400c 	mov	r4, r12
    471c:	0a000068 	beq	48c4 <__kernel_rem_pio2+0x964>
    4720:	e59d2124 	ldr	r2, [sp, #292]	; 0x124
    4724:	e59d001c 	ldr	r0, [sp, #28]
    4728:	e59d1120 	ldr	r1, [sp, #288]	; 0x120
    472c:	e2822102 	add	r2, r2, #-2147483648	; 0x80000000
    4730:	e59d312c 	ldr	r3, [sp, #300]	; 0x12c
    4734:	e8800006 	stm	r0, {r1, r2}
    4738:	e59d2128 	ldr	r2, [sp, #296]	; 0x128
    473c:	e2833102 	add	r3, r3, #-2147483648	; 0x80000000
    4740:	e2844102 	add	r4, r4, #-2147483648	; 0x80000000
    4744:	e5802008 	str	r2, [r0, #8]
    4748:	e580300c 	str	r3, [r0, #12]
    474c:	e580c010 	str	r12, [r0, #16]
    4750:	e5804014 	str	r4, [r0, #20]
    4754:	e59d4010 	ldr	r4, [sp, #16]
    4758:	e2040007 	and	r0, r4, #7
    475c:	e28ddf99 	add	sp, sp, #612	; 0x264
    4760:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    4764:	e12fff1e 	bx	lr
    4768:	e59d4004 	ldr	r4, [sp, #4]
    476c:	e3540000 	cmp	r4, #0
    4770:	daffffe5 	ble	470c <__kernel_rem_pio2+0x7ac>
    4774:	e59d4004 	ldr	r4, [sp, #4]
    4778:	e28dbe12 	add	r11, sp, #288	; 0x120
    477c:	e08ba184 	add	r10, r11, r4, lsl #3
    4780:	e58da008 	str	r10, [sp, #8]
    4784:	e58da014 	str	r10, [sp, #20]
    4788:	e93a0300 	ldmdb	r10!, {r8, r9}
    478c:	e28a7008 	add	r7, r10, #8
    4790:	e89700c0 	ldm	r7, {r6, r7}
    4794:	e1a00008 	mov	r0, r8
    4798:	e1a02006 	mov	r2, r6
    479c:	e1a03007 	mov	r3, r7
    47a0:	e1a01009 	mov	r1, r9
    47a4:	eb000419 	bl	5810 <__adddf3>
    47a8:	e1a04000 	mov	r4, r0
    47ac:	e1a05001 	mov	r5, r1
    47b0:	e1a02004 	mov	r2, r4
    47b4:	e1a03005 	mov	r3, r5
    47b8:	e1a00008 	mov	r0, r8
    47bc:	e1a01009 	mov	r1, r9
    47c0:	eb000411 	bl	580c <__aeabi_dsub>
    47c4:	e1a02000 	mov	r2, r0
    47c8:	e1a03001 	mov	r3, r1
    47cc:	e1a00006 	mov	r0, r6
    47d0:	e1a01007 	mov	r1, r7
    47d4:	eb00040d 	bl	5810 <__adddf3>
    47d8:	e59dc008 	ldr	r12, [sp, #8]
    47dc:	e58a0008 	str	r0, [r10, #8]
    47e0:	e58a100c 	str	r1, [r10, #12]
    47e4:	e92c0030 	stmdb	r12!, {r4, r5}
    47e8:	e15a000b 	cmp	r10, r11
    47ec:	e58dc008 	str	r12, [sp, #8]
    47f0:	1affffe4 	bne	4788 <__kernel_rem_pio2+0x828>
    47f4:	e59d4004 	ldr	r4, [sp, #4]
    47f8:	e3540001 	cmp	r4, #1
    47fc:	e59da014 	ldr	r10, [sp, #20]
    4800:	daffffc1 	ble	470c <__kernel_rem_pio2+0x7ac>
    4804:	e28bc008 	add	r12, r11, #8
    4808:	e58dc008 	str	r12, [sp, #8]
    480c:	e1a0c00a 	mov	r12, r10
    4810:	e93a0300 	ldmdb	r10!, {r8, r9}
    4814:	e28a7008 	add	r7, r10, #8
    4818:	e89700c0 	ldm	r7, {r6, r7}
    481c:	e1a00008 	mov	r0, r8
    4820:	e1a02006 	mov	r2, r6
    4824:	e1a03007 	mov	r3, r7
    4828:	e1a01009 	mov	r1, r9
    482c:	e58dc000 	str	r12, [sp]
    4830:	eb0003f6 	bl	5810 <__adddf3>
    4834:	e1a04000 	mov	r4, r0
    4838:	e1a05001 	mov	r5, r1
    483c:	e1a02004 	mov	r2, r4
    4840:	e1a03005 	mov	r3, r5
    4844:	e1a00008 	mov	r0, r8
    4848:	e1a01009 	mov	r1, r9
    484c:	eb0003ee 	bl	580c <__aeabi_dsub>
    4850:	e1a02000 	mov	r2, r0
    4854:	e1a03001 	mov	r3, r1
    4858:	e1a00006 	mov	r0, r6
    485c:	e1a01007 	mov	r1, r7
    4860:	eb0003ea 	bl	5810 <__adddf3>
    4864:	e59de008 	ldr	lr, [sp, #8]
    4868:	e59dc000 	ldr	r12, [sp]
    486c:	e15a000e 	cmp	r10, lr
    4870:	e58a0008 	str	r0, [r10, #8]
    4874:	e58a100c 	str	r1, [r10, #12]
    4878:	e92c0030 	stmdb	r12!, {r4, r5}
    487c:	1affffe3 	bne	4810 <__kernel_rem_pio2+0x8b0>
    4880:	e59d4004 	ldr	r4, [sp, #4]
    4884:	e3a0c000 	mov	r12, #0
    4888:	e2845001 	add	r5, r4, #1
    488c:	e08b5185 	add	r5, r11, r5, lsl #3
    4890:	e1a0400c 	mov	r4, r12
    4894:	e28bb010 	add	r11, r11, #16
    4898:	e1a0000c 	mov	r0, r12
    489c:	e1a01004 	mov	r1, r4
    48a0:	e935000c 	ldmdb	r5!, {r2, r3}
    48a4:	eb0003d9 	bl	5810 <__adddf3>
    48a8:	e155000b 	cmp	r5, r11
    48ac:	e1a0c000 	mov	r12, r0
    48b0:	e1a04001 	mov	r4, r1
    48b4:	1afffff7 	bne	4898 <__kernel_rem_pio2+0x938>
    48b8:	e59d000c 	ldr	r0, [sp, #12]
    48bc:	e3500000 	cmp	r0, #0
    48c0:	1affff96 	bne	4720 <__kernel_rem_pio2+0x7c0>
    48c4:	e1a03004 	mov	r3, r4
    48c8:	e28d1e12 	add	r1, sp, #288	; 0x120
    48cc:	e8910003 	ldm	r1, {r0, r1}
    48d0:	e59d401c 	ldr	r4, [sp, #28]
    48d4:	e8840003 	stm	r4, {r0, r1}
    48d8:	e28d1f4a 	add	r1, sp, #296	; 0x128
    48dc:	e8910003 	ldm	r1, {r0, r1}
    48e0:	e1a0200c 	mov	r2, r12
    48e4:	e5840008 	str	r0, [r4, #8]
    48e8:	e584100c 	str	r1, [r4, #12]
    48ec:	e5842010 	str	r2, [r4, #16]
    48f0:	e5843014 	str	r3, [r4, #20]
    48f4:	eaffff96 	b	4754 <__kernel_rem_pio2+0x7f4>
    48f8:	e59dc004 	ldr	r12, [sp, #4]
    48fc:	e35c0000 	cmp	r12, #0
    4900:	b3a0e000 	movlt	lr, #0
    4904:	b1a0c00e 	movlt	r12, lr
    4908:	ba00000d 	blt	4944 <__kernel_rem_pio2+0x9e4>
    490c:	e59dc004 	ldr	r12, [sp, #4]
    4910:	e28d5e12 	add	r5, sp, #288	; 0x120
    4914:	e28c4001 	add	r4, r12, #1
    4918:	e3a0e000 	mov	lr, #0
    491c:	e0854184 	add	r4, r5, r4, lsl #3
    4920:	e1a0c00e 	mov	r12, lr
    4924:	e1a0000e 	mov	r0, lr
    4928:	e1a0100c 	mov	r1, r12
    492c:	e934000c 	ldmdb	r4!, {r2, r3}
    4930:	eb0003b6 	bl	5810 <__adddf3>
    4934:	e1540005 	cmp	r4, r5
    4938:	e1a0e000 	mov	lr, r0
    493c:	e1a0c001 	mov	r12, r1
    4940:	1afffff7 	bne	4924 <__kernel_rem_pio2+0x9c4>
    4944:	e59d400c 	ldr	r4, [sp, #12]
    4948:	e3540000 	cmp	r4, #0
    494c:	128c3102 	addne	r3, r12, #-2147483648	; 0x80000000
    4950:	01a0300c 	moveq	r3, r12
    4954:	e1a01003 	mov	r1, r3
    4958:	e1a0300c 	mov	r3, r12
    495c:	e59dc01c 	ldr	r12, [sp, #28]
    4960:	e1a0000e 	mov	r0, lr
    4964:	e88c0003 	stm	r12, {r0, r1}
    4968:	e1a0200e 	mov	r2, lr
    496c:	e28d1e12 	add	r1, sp, #288	; 0x120
    4970:	e8910003 	ldm	r1, {r0, r1}
    4974:	eb0003a4 	bl	580c <__aeabi_dsub>
    4978:	e59d4004 	ldr	r4, [sp, #4]
    497c:	e3540000 	cmp	r4, #0
    4980:	e1a05000 	mov	r5, r0
    4984:	e1a0c001 	mov	r12, r1
    4988:	da00000a 	ble	49b8 <__kernel_rem_pio2+0xa58>
    498c:	e59de004 	ldr	lr, [sp, #4]
    4990:	e28d4f4a 	add	r4, sp, #296	; 0x128
    4994:	e084618e 	add	r6, r4, lr, lsl #3
    4998:	e1a00005 	mov	r0, r5
    499c:	e1a0100c 	mov	r1, r12
    49a0:	e8b4000c 	ldm	r4!, {r2, r3}
    49a4:	eb000399 	bl	5810 <__adddf3>
    49a8:	e1540006 	cmp	r4, r6
    49ac:	e1a05000 	mov	r5, r0
    49b0:	e1a0c001 	mov	r12, r1
    49b4:	1afffff7 	bne	4998 <__kernel_rem_pio2+0xa38>
    49b8:	e59d400c 	ldr	r4, [sp, #12]
    49bc:	e3540000 	cmp	r4, #0
    49c0:	128cc102 	addne	r12, r12, #-2147483648	; 0x80000000
    49c4:	e1a0300c 	mov	r3, r12
    49c8:	e59dc01c 	ldr	r12, [sp, #28]
    49cc:	e1a02005 	mov	r2, r5
    49d0:	e58c2008 	str	r2, [r12, #8]
    49d4:	e58c300c 	str	r3, [r12, #12]
    49d8:	eaffff5d 	b	4754 <__kernel_rem_pio2+0x7f4>
    49dc:	e59d4004 	ldr	r4, [sp, #4]
    49e0:	e3540000 	cmp	r4, #0
    49e4:	ba000038 	blt	4acc <__kernel_rem_pio2+0xb6c>
    49e8:	e2846001 	add	r6, r4, #1
    49ec:	e28d5e12 	add	r5, sp, #288	; 0x120
    49f0:	e3a04000 	mov	r4, #0
    49f4:	e0856186 	add	r6, r5, r6, lsl #3
    49f8:	e1a0c004 	mov	r12, r4
    49fc:	e1a00004 	mov	r0, r4
    4a00:	e1a0100c 	mov	r1, r12
    4a04:	e936000c 	ldmdb	r6!, {r2, r3}
    4a08:	eb000380 	bl	5810 <__adddf3>
    4a0c:	e1560005 	cmp	r6, r5
    4a10:	e1a04000 	mov	r4, r0
    4a14:	e1a0c001 	mov	r12, r1
    4a18:	1afffff7 	bne	49fc <__kernel_rem_pio2+0xa9c>
    4a1c:	e59d000c 	ldr	r0, [sp, #12]
    4a20:	e3500000 	cmp	r0, #0
    4a24:	e1a02004 	mov	r2, r4
    4a28:	128cc102 	addne	r12, r12, #-2147483648	; 0x80000000
    4a2c:	e59d401c 	ldr	r4, [sp, #28]
    4a30:	e1a0300c 	mov	r3, r12
    4a34:	e884000c 	stm	r4, {r2, r3}
    4a38:	eaffff45 	b	4754 <__kernel_rem_pio2+0x7f4>
    4a3c:	e1a03100 	lsl	r3, r0, #2
    4a40:	e28dce26 	add	r12, sp, #608	; 0x260
    4a44:	e08c2003 	add	r2, r12, r3
    4a48:	e59d4018 	ldr	r4, [sp, #24]
    4a4c:	e5122230 	ldr	r2, [r2, #-560]	; 0xfffffdd0
    4a50:	e2444018 	sub	r4, r4, #24
    4a54:	e3520000 	cmp	r2, #0
    4a58:	e58d8010 	str	r8, [sp, #16]
    4a5c:	e58d500c 	str	r5, [sp, #12]
    4a60:	e58d4018 	str	r4, [sp, #24]
    4a64:	1a000016 	bne	4ac4 <__kernel_rem_pio2+0xb64>
    4a68:	e28dc030 	add	r12, sp, #48	; 0x30
    4a6c:	e58d0004 	str	r0, [sp, #4]
    4a70:	e08c3003 	add	r3, r12, r3
    4a74:	e1a02000 	mov	r2, r0
    4a78:	e1a01004 	mov	r1, r4
    4a7c:	e5330004 	ldr	r0, [r3, #-4]!
    4a80:	e3500000 	cmp	r0, #0
    4a84:	e2422001 	sub	r2, r2, #1
    4a88:	e2411018 	sub	r1, r1, #24
    4a8c:	0afffffa 	beq	4a7c <__kernel_rem_pio2+0xb1c>
    4a90:	e58d2004 	str	r2, [sp, #4]
    4a94:	e58d1018 	str	r1, [sp, #24]
    4a98:	eafffece 	b	45d8 <__kernel_rem_pio2+0x678>
    4a9c:	e3a03001 	mov	r3, #1
    4aa0:	eafffe2a 	b	4350 <__kernel_rem_pio2+0x3f0>
    4aa4:	e1a00004 	mov	r0, r4
    4aa8:	e1a01005 	mov	r1, r5
    4aac:	eb0005d3 	bl	6200 <__aeabi_d2iz>
    4ab0:	e59dc004 	ldr	r12, [sp, #4]
    4ab4:	e28dee26 	add	lr, sp, #608	; 0x260
    4ab8:	e08e310c 	add	r3, lr, r12, lsl #2
    4abc:	e5030230 	str	r0, [r3, #-560]	; 0xfffffdd0
    4ac0:	eafffec4 	b	45d8 <__kernel_rem_pio2+0x678>
    4ac4:	e58d0004 	str	r0, [sp, #4]
    4ac8:	eafffec2 	b	45d8 <__kernel_rem_pio2+0x678>
    4acc:	e3a04000 	mov	r4, #0
    4ad0:	e1a0c004 	mov	r12, r4
    4ad4:	eaffffd0 	b	4a1c <__kernel_rem_pio2+0xabc>
    4ad8:	2aaaaaab 	.word	0x2aaaaaab
    4adc:	000081d0 	.word	0x000081d0
    4ae0:	3e700000 	.word	0x3e700000
    4ae4:	41700000 	.word	0x41700000
    4ae8:	40200000 	.word	0x40200000
    4aec:	3ff00000 	.word	0x3ff00000
    4af0:	3fe00000 	.word	0x3fe00000
    4af4:	000081e0 	.word	0x000081e0

00004af8 <__kernel_sin>:
    4af8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    4afc:	e3c1c102 	bic	r12, r1, #-2147483648	; 0x80000000
    4b00:	e35c05f9 	cmp	r12, #1044381696	; 0x3e400000
    4b04:	e24dd014 	sub	sp, sp, #20
    4b08:	e1a04000 	mov	r4, r0
    4b0c:	e1a05001 	mov	r5, r1
    4b10:	e1a06000 	mov	r6, r0
    4b14:	e1a07001 	mov	r7, r1
    4b18:	e1a08002 	mov	r8, r2
    4b1c:	e1a09003 	mov	r9, r3
    4b20:	aa000002 	bge	4b30 <__kernel_sin+0x38>
    4b24:	eb0005b5 	bl	6200 <__aeabi_d2iz>
    4b28:	e3500000 	cmp	r0, #0
    4b2c:	0a000052 	beq	4c7c <__kernel_sin+0x184>
    4b30:	e1a02004 	mov	r2, r4
    4b34:	e1a03005 	mov	r3, r5
    4b38:	e1a00004 	mov	r0, r4
    4b3c:	e1a01005 	mov	r1, r5
    4b40:	eb000436 	bl	5c20 <__aeabi_dmul>
    4b44:	e1a02004 	mov	r2, r4
    4b48:	e1a03005 	mov	r3, r5
    4b4c:	e1a06000 	mov	r6, r0
    4b50:	e1a07001 	mov	r7, r1
    4b54:	eb000431 	bl	5c20 <__aeabi_dmul>
    4b58:	e28f3d06 	add	r3, pc, #384	; 0x180
    4b5c:	e893000c 	ldm	r3, {r2, r3}
    4b60:	e1a0a000 	mov	r10, r0
    4b64:	e1a0b001 	mov	r11, r1
    4b68:	e1a00006 	mov	r0, r6
    4b6c:	e1a01007 	mov	r1, r7
    4b70:	eb00042a 	bl	5c20 <__aeabi_dmul>
    4b74:	e28f3f5b 	add	r3, pc, #364	; 0x16c
    4b78:	e893000c 	ldm	r3, {r2, r3}
    4b7c:	eb000322 	bl	580c <__aeabi_dsub>
    4b80:	e1a02006 	mov	r2, r6
    4b84:	e1a03007 	mov	r3, r7
    4b88:	eb000424 	bl	5c20 <__aeabi_dmul>
    4b8c:	e28f3f57 	add	r3, pc, #348	; 0x15c
    4b90:	e893000c 	ldm	r3, {r2, r3}
    4b94:	eb00031d 	bl	5810 <__adddf3>
    4b98:	e1a02006 	mov	r2, r6
    4b9c:	e1a03007 	mov	r3, r7
    4ba0:	eb00041e 	bl	5c20 <__aeabi_dmul>
    4ba4:	e28f3f53 	add	r3, pc, #332	; 0x14c
    4ba8:	e893000c 	ldm	r3, {r2, r3}
    4bac:	eb000316 	bl	580c <__aeabi_dsub>
    4bb0:	e1a02006 	mov	r2, r6
    4bb4:	e1a03007 	mov	r3, r7
    4bb8:	eb000418 	bl	5c20 <__aeabi_dmul>
    4bbc:	e28f3f4f 	add	r3, pc, #316	; 0x13c
    4bc0:	e893000c 	ldm	r3, {r2, r3}
    4bc4:	eb000311 	bl	5810 <__adddf3>
    4bc8:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
    4bcc:	e3530000 	cmp	r3, #0
    4bd0:	e88d0003 	stm	sp, {r0, r1}
    4bd4:	0a00002d 	beq	4c90 <__kernel_sin+0x198>
    4bd8:	e3a02000 	mov	r2, #0
    4bdc:	e59f312c 	ldr	r3, [pc, #300]	; 4d10 <__kernel_sin+0x218>
    4be0:	e1a00008 	mov	r0, r8
    4be4:	e1a01009 	mov	r1, r9
    4be8:	eb00040c 	bl	5c20 <__aeabi_dmul>
    4bec:	e89d000c 	ldm	sp, {r2, r3}
    4bf0:	e58d0008 	str	r0, [sp, #8]
    4bf4:	e58d100c 	str	r1, [sp, #12]
    4bf8:	e1a0000a 	mov	r0, r10
    4bfc:	e1a0100b 	mov	r1, r11
    4c00:	eb000406 	bl	5c20 <__aeabi_dmul>
    4c04:	e1a02000 	mov	r2, r0
    4c08:	e1a03001 	mov	r3, r1
    4c0c:	e28d1008 	add	r1, sp, #8
    4c10:	e8910003 	ldm	r1, {r0, r1}
    4c14:	eb0002fc 	bl	580c <__aeabi_dsub>
    4c18:	e1a02006 	mov	r2, r6
    4c1c:	e1a03007 	mov	r3, r7
    4c20:	eb0003fe 	bl	5c20 <__aeabi_dmul>
    4c24:	e1a02008 	mov	r2, r8
    4c28:	e1a03009 	mov	r3, r9
    4c2c:	eb0002f6 	bl	580c <__aeabi_dsub>
    4c30:	e28f30d0 	add	r3, pc, #208	; 0xd0
    4c34:	e893000c 	ldm	r3, {r2, r3}
    4c38:	e1a06000 	mov	r6, r0
    4c3c:	e1a07001 	mov	r7, r1
    4c40:	e1a0000a 	mov	r0, r10
    4c44:	e1a0100b 	mov	r1, r11
    4c48:	eb0003f4 	bl	5c20 <__aeabi_dmul>
    4c4c:	e1a02000 	mov	r2, r0
    4c50:	e1a03001 	mov	r3, r1
    4c54:	e1a00006 	mov	r0, r6
    4c58:	e1a01007 	mov	r1, r7
    4c5c:	eb0002eb 	bl	5810 <__adddf3>
    4c60:	e1a02000 	mov	r2, r0
    4c64:	e1a03001 	mov	r3, r1
    4c68:	e1a00004 	mov	r0, r4
    4c6c:	e1a01005 	mov	r1, r5
    4c70:	eb0002e5 	bl	580c <__aeabi_dsub>
    4c74:	e1a04000 	mov	r4, r0
    4c78:	e1a05001 	mov	r5, r1
    4c7c:	e1a00004 	mov	r0, r4
    4c80:	e1a01005 	mov	r1, r5
    4c84:	e28dd014 	add	sp, sp, #20
    4c88:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    4c8c:	e12fff1e 	bx	lr
    4c90:	e1a02000 	mov	r2, r0
    4c94:	e1a03001 	mov	r3, r1
    4c98:	e1a00006 	mov	r0, r6
    4c9c:	e1a01007 	mov	r1, r7
    4ca0:	eb0003de 	bl	5c20 <__aeabi_dmul>
    4ca4:	e28f305c 	add	r3, pc, #92	; 0x5c
    4ca8:	e893000c 	ldm	r3, {r2, r3}
    4cac:	eb0002d6 	bl	580c <__aeabi_dsub>
    4cb0:	e1a0200a 	mov	r2, r10
    4cb4:	e1a0300b 	mov	r3, r11
    4cb8:	eb0003d8 	bl	5c20 <__aeabi_dmul>
    4cbc:	e1a02000 	mov	r2, r0
    4cc0:	e1a03001 	mov	r3, r1
    4cc4:	e1a00004 	mov	r0, r4
    4cc8:	e1a01005 	mov	r1, r5
    4ccc:	eb0002cf 	bl	5810 <__adddf3>
    4cd0:	e1a04000 	mov	r4, r0
    4cd4:	e1a05001 	mov	r5, r1
    4cd8:	eaffffe7 	b	4c7c <__kernel_sin+0x184>
    4cdc:	e1a00000 	nop			; (mov r0, r0)
    4ce0:	5acfd57c 	.word	0x5acfd57c
    4ce4:	3de5d93a 	.word	0x3de5d93a
    4ce8:	8a2b9ceb 	.word	0x8a2b9ceb
    4cec:	3e5ae5e6 	.word	0x3e5ae5e6
    4cf0:	57b1fe7d 	.word	0x57b1fe7d
    4cf4:	3ec71de3 	.word	0x3ec71de3
    4cf8:	19c161d5 	.word	0x19c161d5
    4cfc:	3f2a01a0 	.word	0x3f2a01a0
    4d00:	1110f8a6 	.word	0x1110f8a6
    4d04:	3f811111 	.word	0x3f811111
    4d08:	55555549 	.word	0x55555549
    4d0c:	3fc55555 	.word	0x3fc55555
    4d10:	3fe00000 	.word	0x3fe00000
    4d14:	e1a00000 	nop			; (mov r0, r0)

00004d18 <fabs>:
    4d18:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    4d1c:	e12fff1e 	bx	lr

00004d20 <floor>:
    4d20:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
    4d24:	e1a08081 	lsl	r8, r1, #1
    4d28:	e1a08aa8 	lsr	r8, r8, #21
    4d2c:	e2486fff 	sub	r6, r8, #1020	; 0x3fc
    4d30:	e2466003 	sub	r6, r6, #3
    4d34:	e3560013 	cmp	r6, #19
    4d38:	e1a02000 	mov	r2, r0
    4d3c:	e1a03001 	mov	r3, r1
    4d40:	e1a04000 	mov	r4, r0
    4d44:	e1a05001 	mov	r5, r1
    4d48:	e1a07001 	mov	r7, r1
    4d4c:	ca000019 	bgt	4db8 <floor+0x98>
    4d50:	e3560000 	cmp	r6, #0
    4d54:	ba000034 	blt	4e2c <floor+0x10c>
    4d58:	e59f8150 	ldr	r8, [pc, #336]	; 4eb0 <floor+0x190>
    4d5c:	e1a08658 	asr	r8, r8, r6
    4d60:	e008c001 	and	r12, r8, r1
    4d64:	e19cc000 	orrs	r12, r12, r0
    4d68:	0a00000e 	beq	4da8 <floor+0x88>
    4d6c:	e28f3f4d 	add	r3, pc, #308	; 0x134
    4d70:	e893000c 	ldm	r3, {r2, r3}
    4d74:	eb0002a5 	bl	5810 <__adddf3>
    4d78:	e3a02000 	mov	r2, #0
    4d7c:	e3a03000 	mov	r3, #0
    4d80:	eb000518 	bl	61e8 <__aeabi_dcmpgt>
    4d84:	e3500000 	cmp	r0, #0
    4d88:	0a000004 	beq	4da0 <floor+0x80>
    4d8c:	e3550000 	cmp	r5, #0
    4d90:	b3a03601 	movlt	r3, #1048576	; 0x100000
    4d94:	b0855653 	addlt	r5, r5, r3, asr r6
    4d98:	e3a04000 	mov	r4, #0
    4d9c:	e1c57008 	bic	r7, r5, r8
    4da0:	e1a03007 	mov	r3, r7
    4da4:	e1a02004 	mov	r2, r4
    4da8:	e1a00002 	mov	r0, r2
    4dac:	e1a01003 	mov	r1, r3
    4db0:	e8bd45f8 	pop	{r3, r4, r5, r6, r7, r8, r10, lr}
    4db4:	e12fff1e 	bx	lr
    4db8:	e3560033 	cmp	r6, #51	; 0x33
    4dbc:	da000005 	ble	4dd8 <floor+0xb8>
    4dc0:	e3560b01 	cmp	r6, #1024	; 0x400
    4dc4:	1afffff7 	bne	4da8 <floor+0x88>
    4dc8:	eb000290 	bl	5810 <__adddf3>
    4dcc:	e1a02000 	mov	r2, r0
    4dd0:	e1a03001 	mov	r3, r1
    4dd4:	eafffff3 	b	4da8 <floor+0x88>
    4dd8:	e248ae41 	sub	r10, r8, #1040	; 0x410
    4ddc:	e24aa003 	sub	r10, r10, #3
    4de0:	e3e0c000 	mvn	r12, #0
    4de4:	e1a0aa3c 	lsr	r10, r12, r10
    4de8:	e11a0000 	tst	r10, r0
    4dec:	0affffed 	beq	4da8 <floor+0x88>
    4df0:	e28f30b0 	add	r3, pc, #176	; 0xb0
    4df4:	e893000c 	ldm	r3, {r2, r3}
    4df8:	eb000284 	bl	5810 <__adddf3>
    4dfc:	e3a02000 	mov	r2, #0
    4e00:	e3a03000 	mov	r3, #0
    4e04:	eb0004f7 	bl	61e8 <__aeabi_dcmpgt>
    4e08:	e3500000 	cmp	r0, #0
    4e0c:	0affffe3 	beq	4da0 <floor+0x80>
    4e10:	e3550000 	cmp	r5, #0
    4e14:	ba000017 	blt	4e78 <floor+0x158>
    4e18:	e1c4400a 	bic	r4, r4, r10
    4e1c:	e1a07005 	mov	r7, r5
    4e20:	e1a03007 	mov	r3, r7
    4e24:	e1a02004 	mov	r2, r4
    4e28:	eaffffde 	b	4da8 <floor+0x88>
    4e2c:	e28f3074 	add	r3, pc, #116	; 0x74
    4e30:	e893000c 	ldm	r3, {r2, r3}
    4e34:	eb000275 	bl	5810 <__adddf3>
    4e38:	e3a02000 	mov	r2, #0
    4e3c:	e3a03000 	mov	r3, #0
    4e40:	eb0004e8 	bl	61e8 <__aeabi_dcmpgt>
    4e44:	e3500000 	cmp	r0, #0
    4e48:	0affffd4 	beq	4da0 <floor+0x80>
    4e4c:	e3550000 	cmp	r5, #0
    4e50:	a3a04000 	movge	r4, #0
    4e54:	a1a07004 	movge	r7, r4
    4e58:	aaffffd0 	bge	4da0 <floor+0x80>
    4e5c:	e3c73102 	bic	r3, r7, #-2147483648	; 0x80000000
    4e60:	e1833004 	orr	r3, r3, r4
    4e64:	e3530000 	cmp	r3, #0
    4e68:	e59f3044 	ldr	r3, [pc, #68]	; 4eb4 <floor+0x194>
    4e6c:	13a04000 	movne	r4, #0
    4e70:	11a07003 	movne	r7, r3
    4e74:	eaffffc9 	b	4da0 <floor+0x80>
    4e78:	e3560014 	cmp	r6, #20
    4e7c:	02855001 	addeq	r5, r5, #1
    4e80:	0affffe4 	beq	4e18 <floor+0xf8>
    4e84:	e2688e43 	rsb	r8, r8, #1072	; 0x430
    4e88:	e2888003 	add	r8, r8, #3
    4e8c:	e3a03001 	mov	r3, #1
    4e90:	e0843813 	add	r3, r4, r3, lsl r8
    4e94:	e1540003 	cmp	r4, r3
    4e98:	82855001 	addhi	r5, r5, #1
    4e9c:	e1a04003 	mov	r4, r3
    4ea0:	eaffffdc 	b	4e18 <floor+0xf8>
    4ea4:	e1a00000 	nop			; (mov r0, r0)
    4ea8:	8800759c 	.word	0x8800759c
    4eac:	7e37e43c 	.word	0x7e37e43c
    4eb0:	000fffff 	.word	0x000fffff
    4eb4:	bff00000 	.word	0xbff00000

00004eb8 <__fpclassifyd>:
    4eb8:	e1902001 	orrs	r2, r0, r1
    4ebc:	1a000001 	bne	4ec8 <__fpclassifyd+0x10>
    4ec0:	e3a00002 	mov	r0, #2
    4ec4:	e12fff1e 	bx	lr
    4ec8:	e2702001 	rsbs	r2, r0, #1
    4ecc:	33a02000 	movcc	r2, #0
    4ed0:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    4ed4:	03500000 	cmpeq	r0, #0
    4ed8:	0afffff8 	beq	4ec0 <__fpclassifyd+0x8>
    4edc:	e3c13102 	bic	r3, r1, #-2147483648	; 0x80000000
    4ee0:	e59f1034 	ldr	r1, [pc, #52]	; 4f1c <__fpclassifyd+0x64>
    4ee4:	e2430601 	sub	r0, r3, #1048576	; 0x100000
    4ee8:	e1500001 	cmp	r0, r1
    4eec:	8a000001 	bhi	4ef8 <__fpclassifyd+0x40>
    4ef0:	e3a00004 	mov	r0, #4
    4ef4:	e12fff1e 	bx	lr
    4ef8:	e3530601 	cmp	r3, #1048576	; 0x100000
    4efc:	2a000001 	bcs	4f08 <__fpclassifyd+0x50>
    4f00:	e3a00003 	mov	r0, #3
    4f04:	e12fff1e 	bx	lr
    4f08:	e59f0010 	ldr	r0, [pc, #16]	; 4f20 <__fpclassifyd+0x68>
    4f0c:	e1530000 	cmp	r3, r0
    4f10:	13a00000 	movne	r0, #0
    4f14:	02020001 	andeq	r0, r2, #1
    4f18:	e12fff1e 	bx	lr
    4f1c:	7fdfffff 	.word	0x7fdfffff
    4f20:	7ff00000 	.word	0x7ff00000

00004f24 <matherr>:
    4f24:	e3a00000 	mov	r0, #0
    4f28:	e12fff1e 	bx	lr

00004f2c <nan>:
    4f2c:	e3a00000 	mov	r0, #0
    4f30:	e59f1000 	ldr	r1, [pc]	; 4f38 <nan+0xc>
    4f34:	e12fff1e 	bx	lr
    4f38:	7ff80000 	.word	0x7ff80000
    4f3c:	00000000 	.word	0x00000000

00004f40 <scalbn>:
    4f40:	e59f3170 	ldr	r3, [pc, #368]	; 50b8 <scalbn+0x178>
    4f44:	e0013003 	and	r3, r1, r3
    4f48:	e1b03a43 	asrs	r3, r3, #20
    4f4c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    4f50:	e1a04000 	mov	r4, r0
    4f54:	e1a05001 	mov	r5, r1
    4f58:	e1a06000 	mov	r6, r0
    4f5c:	e1a07001 	mov	r7, r1
    4f60:	e1a08002 	mov	r8, r2
    4f64:	1a000011 	bne	4fb0 <scalbn+0x70>
    4f68:	e3c1c102 	bic	r12, r1, #-2147483648	; 0x80000000
    4f6c:	e19cc000 	orrs	r12, r12, r0
    4f70:	0a00001d 	beq	4fec <scalbn+0xac>
    4f74:	e59f3140 	ldr	r3, [pc, #320]	; 50bc <scalbn+0x17c>
    4f78:	e3a02000 	mov	r2, #0
    4f7c:	eb000327 	bl	5c20 <__aeabi_dmul>
    4f80:	e59f3138 	ldr	r3, [pc, #312]	; 50c0 <scalbn+0x180>
    4f84:	e1580003 	cmp	r8, r3
    4f88:	e1a04000 	mov	r4, r0
    4f8c:	e1a05001 	mov	r5, r1
    4f90:	e1a06000 	mov	r6, r0
    4f94:	e1a07001 	mov	r7, r1
    4f98:	ba000021 	blt	5024 <scalbn+0xe4>
    4f9c:	e59f3114 	ldr	r3, [pc, #276]	; 50b8 <scalbn+0x178>
    4fa0:	e0013003 	and	r3, r1, r3
    4fa4:	e1a03a43 	asr	r3, r3, #20
    4fa8:	e2433036 	sub	r3, r3, #54	; 0x36
    4fac:	ea000003 	b	4fc0 <scalbn+0x80>
    4fb0:	e59f210c 	ldr	r2, [pc, #268]	; 50c4 <scalbn+0x184>
    4fb4:	e1530002 	cmp	r3, r2
    4fb8:	11a01001 	movne	r1, r1
    4fbc:	0a000027 	beq	5060 <scalbn+0x120>
    4fc0:	e59f2100 	ldr	r2, [pc, #256]	; 50c8 <scalbn+0x188>
    4fc4:	e0833008 	add	r3, r3, r8
    4fc8:	e1530002 	cmp	r3, r2
    4fcc:	c1a02004 	movgt	r2, r4
    4fd0:	c1a03005 	movgt	r3, r5
    4fd4:	ca000018 	bgt	503c <scalbn+0xfc>
    4fd8:	e3530000 	cmp	r3, #0
    4fdc:	da000006 	ble	4ffc <scalbn+0xbc>
    4fe0:	e3c1147f 	bic	r1, r1, #2130706432	; 0x7f000000
    4fe4:	e3c1160f 	bic	r1, r1, #15728640	; 0xf00000
    4fe8:	e1815a03 	orr	r5, r1, r3, lsl #20
    4fec:	e1a00004 	mov	r0, r4
    4ff0:	e1a01005 	mov	r1, r5
    4ff4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    4ff8:	e12fff1e 	bx	lr
    4ffc:	e3730035 	cmn	r3, #53	; 0x35
    5000:	aa00001c 	bge	5078 <scalbn+0x138>
    5004:	e59f30c0 	ldr	r3, [pc, #192]	; 50cc <scalbn+0x18c>
    5008:	e1580003 	cmp	r8, r3
    500c:	e1a02004 	mov	r2, r4
    5010:	e1a03005 	mov	r3, r5
    5014:	ca000008 	bgt	503c <scalbn+0xfc>
    5018:	e28f1088 	add	r1, pc, #136	; 0x88
    501c:	e8910003 	ldm	r1, {r0, r1}
    5020:	eb00019c 	bl	5698 <copysign>
    5024:	e28f307c 	add	r3, pc, #124	; 0x7c
    5028:	e893000c 	ldm	r3, {r2, r3}
    502c:	eb0002fb 	bl	5c20 <__aeabi_dmul>
    5030:	e1a04000 	mov	r4, r0
    5034:	e1a05001 	mov	r5, r1
    5038:	eaffffeb 	b	4fec <scalbn+0xac>
    503c:	e28f106c 	add	r1, pc, #108	; 0x6c
    5040:	e8910003 	ldm	r1, {r0, r1}
    5044:	eb000193 	bl	5698 <copysign>
    5048:	e28f3060 	add	r3, pc, #96	; 0x60
    504c:	e893000c 	ldm	r3, {r2, r3}
    5050:	eb0002f2 	bl	5c20 <__aeabi_dmul>
    5054:	e1a04000 	mov	r4, r0
    5058:	e1a05001 	mov	r5, r1
    505c:	eaffffe2 	b	4fec <scalbn+0xac>
    5060:	e1a03005 	mov	r3, r5
    5064:	e1a02000 	mov	r2, r0
    5068:	eb0001e8 	bl	5810 <__adddf3>
    506c:	e1a04000 	mov	r4, r0
    5070:	e1a05001 	mov	r5, r1
    5074:	eaffffdc 	b	4fec <scalbn+0xac>
    5078:	e3c1147f 	bic	r1, r1, #2130706432	; 0x7f000000
    507c:	e2833036 	add	r3, r3, #54	; 0x36
    5080:	e3c1160f 	bic	r1, r1, #15728640	; 0xf00000
    5084:	e1815a03 	orr	r5, r1, r3, lsl #20
    5088:	e1a00004 	mov	r0, r4
    508c:	e1a01005 	mov	r1, r5
    5090:	e3a02000 	mov	r2, #0
    5094:	e59f3034 	ldr	r3, [pc, #52]	; 50d0 <scalbn+0x190>
    5098:	eb0002e0 	bl	5c20 <__aeabi_dmul>
    509c:	e1a04000 	mov	r4, r0
    50a0:	e1a05001 	mov	r5, r1
    50a4:	eaffffd0 	b	4fec <scalbn+0xac>
    50a8:	c2f8f359 	.word	0xc2f8f359
    50ac:	01a56e1f 	.word	0x01a56e1f
    50b0:	8800759c 	.word	0x8800759c
    50b4:	7e37e43c 	.word	0x7e37e43c
    50b8:	7ff00000 	.word	0x7ff00000
    50bc:	43500000 	.word	0x43500000
    50c0:	ffff3cb0 	.word	0xffff3cb0
    50c4:	000007ff 	.word	0x000007ff
    50c8:	000007fe 	.word	0x000007fe
    50cc:	0000c350 	.word	0x0000c350
    50d0:	3c900000 	.word	0x3c900000
    50d4:	e1a00000 	nop			; (mov r0, r0)

000050d8 <__ieee754_log>:
    50d8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    50dc:	e3510601 	cmp	r1, #1048576	; 0x100000
    50e0:	e24dd01c 	sub	sp, sp, #28
    50e4:	e1a02000 	mov	r2, r0
    50e8:	e1a03001 	mov	r3, r1
    50ec:	e1a04000 	mov	r4, r0
    50f0:	e1a05001 	mov	r5, r1
    50f4:	e1a0c001 	mov	r12, r1
    50f8:	aa000043 	bge	520c <__ieee754_log+0x134>
    50fc:	e3c1c102 	bic	r12, r1, #-2147483648	; 0x80000000
    5100:	e19cc000 	orrs	r12, r12, r0
    5104:	0a0000b2 	beq	53d4 <__ieee754_log+0x2fc>
    5108:	e3510000 	cmp	r1, #0
    510c:	ba000115 	blt	5568 <__ieee754_log+0x490>
    5110:	e3a02000 	mov	r2, #0
    5114:	e59f34b4 	ldr	r3, [pc, #1204]	; 55d0 <__ieee754_log+0x4f8>
    5118:	eb0002c0 	bl	5c20 <__aeabi_dmul>
    511c:	e1a0c001 	mov	r12, r1
    5120:	e1a03001 	mov	r3, r1
    5124:	e59f14a8 	ldr	r1, [pc, #1192]	; 55d4 <__ieee754_log+0x4fc>
    5128:	e15c0001 	cmp	r12, r1
    512c:	e1a02000 	mov	r2, r0
    5130:	e3e04035 	mvn	r4, #53	; 0x35
    5134:	ca000038 	bgt	521c <__ieee754_log+0x144>
    5138:	e3cc64ff 	bic	r6, r12, #-16777216	; 0xff000000
    513c:	e59f1494 	ldr	r1, [pc, #1172]	; 55d8 <__ieee754_log+0x500>
    5140:	e3c6660f 	bic	r6, r6, #15728640	; 0xf00000
    5144:	e0861001 	add	r1, r6, r1
    5148:	e201e601 	and	lr, r1, #1048576	; 0x100000
    514c:	e22e15ff 	eor	r1, lr, #1069547520	; 0x3fc00000
    5150:	e1a08a4c 	asr	r8, r12, #20
    5154:	e2211603 	eor	r1, r1, #3145728	; 0x300000
    5158:	e2488fff 	sub	r8, r8, #1020	; 0x3fc
    515c:	e1813006 	orr	r3, r1, r6
    5160:	e2488003 	sub	r8, r8, #3
    5164:	e1a00002 	mov	r0, r2
    5168:	e1a01003 	mov	r1, r3
    516c:	e3a02000 	mov	r2, #0
    5170:	e59f3464 	ldr	r3, [pc, #1124]	; 55dc <__ieee754_log+0x504>
    5174:	e0888004 	add	r8, r8, r4
    5178:	e0888a2e 	add	r8, r8, lr, lsr #20
    517c:	eb0001a2 	bl	580c <__aeabi_dsub>
    5180:	e2863002 	add	r3, r6, #2
    5184:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
    5188:	e3530002 	cmp	r3, #2
    518c:	e1a0a000 	mov	r10, r0
    5190:	e1a0b001 	mov	r11, r1
    5194:	e3a02000 	mov	r2, #0
    5198:	ca000025 	bgt	5234 <__ieee754_log+0x15c>
    519c:	e3a03000 	mov	r3, #0
    51a0:	eb0003f8 	bl	6188 <__aeabi_dcmpeq>
    51a4:	e3500000 	cmp	r0, #0
    51a8:	0a00008f 	beq	53ec <__ieee754_log+0x314>
    51ac:	e3580000 	cmp	r8, #0
    51b0:	03a00000 	moveq	r0, #0
    51b4:	03a01000 	moveq	r1, #0
    51b8:	0a00001a 	beq	5228 <__ieee754_log+0x150>
    51bc:	e1a00008 	mov	r0, r8
    51c0:	eb00025f 	bl	5b44 <__aeabi_i2d>
    51c4:	e28f3fed 	add	r3, pc, #948	; 0x3b4
    51c8:	e893000c 	ldm	r3, {r2, r3}
    51cc:	e1a06000 	mov	r6, r0
    51d0:	e1a07001 	mov	r7, r1
    51d4:	eb000291 	bl	5c20 <__aeabi_dmul>
    51d8:	e28f3fea 	add	r3, pc, #936	; 0x3a8
    51dc:	e893000c 	ldm	r3, {r2, r3}
    51e0:	e1a04000 	mov	r4, r0
    51e4:	e1a05001 	mov	r5, r1
    51e8:	e1a00006 	mov	r0, r6
    51ec:	e1a01007 	mov	r1, r7
    51f0:	eb00028a 	bl	5c20 <__aeabi_dmul>
    51f4:	e1a02000 	mov	r2, r0
    51f8:	e1a03001 	mov	r3, r1
    51fc:	e1a00004 	mov	r0, r4
    5200:	e1a01005 	mov	r1, r5
    5204:	eb000181 	bl	5810 <__adddf3>
    5208:	ea000006 	b	5228 <__ieee754_log+0x150>
    520c:	e59f13c0 	ldr	r1, [pc, #960]	; 55d4 <__ieee754_log+0x4fc>
    5210:	e15c0001 	cmp	r12, r1
    5214:	e3a04000 	mov	r4, #0
    5218:	daffffc6 	ble	5138 <__ieee754_log+0x60>
    521c:	e1a00002 	mov	r0, r2
    5220:	e1a01003 	mov	r1, r3
    5224:	eb000179 	bl	5810 <__adddf3>
    5228:	e28dd01c 	add	sp, sp, #28
    522c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    5230:	e12fff1e 	bx	lr
    5234:	e3a03101 	mov	r3, #1073741824	; 0x40000000
    5238:	eb000174 	bl	5810 <__adddf3>
    523c:	e1a02000 	mov	r2, r0
    5240:	e1a03001 	mov	r3, r1
    5244:	e1a0000a 	mov	r0, r10
    5248:	e1a0100b 	mov	r1, r11
    524c:	eb000317 	bl	5eb0 <__aeabi_ddiv>
    5250:	e58d0008 	str	r0, [sp, #8]
    5254:	e58d100c 	str	r1, [sp, #12]
    5258:	e1a00008 	mov	r0, r8
    525c:	eb000238 	bl	5b44 <__aeabi_i2d>
    5260:	e58d0010 	str	r0, [sp, #16]
    5264:	e58d1014 	str	r1, [sp, #20]
    5268:	e28d1008 	add	r1, sp, #8
    526c:	e8910003 	ldm	r1, {r0, r1}
    5270:	e1a02000 	mov	r2, r0
    5274:	e1a03001 	mov	r3, r1
    5278:	eb000268 	bl	5c20 <__aeabi_dmul>
    527c:	e1a02000 	mov	r2, r0
    5280:	e1a03001 	mov	r3, r1
    5284:	e88d0003 	stm	sp, {r0, r1}
    5288:	eb000264 	bl	5c20 <__aeabi_dmul>
    528c:	e28f3fbf 	add	r3, pc, #764	; 0x2fc
    5290:	e893000c 	ldm	r3, {r2, r3}
    5294:	e1a04000 	mov	r4, r0
    5298:	e1a05001 	mov	r5, r1
    529c:	eb00025f 	bl	5c20 <__aeabi_dmul>
    52a0:	e28f3e2f 	add	r3, pc, #752	; 0x2f0
    52a4:	e893000c 	ldm	r3, {r2, r3}
    52a8:	eb000158 	bl	5810 <__adddf3>
    52ac:	e1a02004 	mov	r2, r4
    52b0:	e1a03005 	mov	r3, r5
    52b4:	eb000259 	bl	5c20 <__aeabi_dmul>
    52b8:	e28f3e2e 	add	r3, pc, #736	; 0x2e0
    52bc:	e893000c 	ldm	r3, {r2, r3}
    52c0:	eb000152 	bl	5810 <__adddf3>
    52c4:	e1a02004 	mov	r2, r4
    52c8:	e1a03005 	mov	r3, r5
    52cc:	eb000253 	bl	5c20 <__aeabi_dmul>
    52d0:	e28f3e2d 	add	r3, pc, #720	; 0x2d0
    52d4:	e893000c 	ldm	r3, {r2, r3}
    52d8:	eb00014c 	bl	5810 <__adddf3>
    52dc:	e89d000c 	ldm	sp, {r2, r3}
    52e0:	eb00024e 	bl	5c20 <__aeabi_dmul>
    52e4:	e28f3fb1 	add	r3, pc, #708	; 0x2c4
    52e8:	e893000c 	ldm	r3, {r2, r3}
    52ec:	e88d0003 	stm	sp, {r0, r1}
    52f0:	e1a00004 	mov	r0, r4
    52f4:	e1a01005 	mov	r1, r5
    52f8:	eb000248 	bl	5c20 <__aeabi_dmul>
    52fc:	e28f3fad 	add	r3, pc, #692	; 0x2b4
    5300:	e893000c 	ldm	r3, {r2, r3}
    5304:	eb000141 	bl	5810 <__adddf3>
    5308:	e1a02004 	mov	r2, r4
    530c:	e1a03005 	mov	r3, r5
    5310:	eb000242 	bl	5c20 <__aeabi_dmul>
    5314:	e28f3fa9 	add	r3, pc, #676	; 0x2a4
    5318:	e893000c 	ldm	r3, {r2, r3}
    531c:	eb00013b 	bl	5810 <__adddf3>
    5320:	e1a02004 	mov	r2, r4
    5324:	e1a03005 	mov	r3, r5
    5328:	eb00023c 	bl	5c20 <__aeabi_dmul>
    532c:	e1a02000 	mov	r2, r0
    5330:	e1a03001 	mov	r3, r1
    5334:	e89d0003 	ldm	sp, {r0, r1}
    5338:	eb000134 	bl	5810 <__adddf3>
    533c:	e59f329c 	ldr	r3, [pc, #668]	; 55e0 <__ieee754_log+0x508>
    5340:	e59f229c 	ldr	r2, [pc, #668]	; 55e4 <__ieee754_log+0x50c>
    5344:	e0863003 	add	r3, r6, r3
    5348:	e0662002 	rsb	r2, r6, r2
    534c:	e1823003 	orr	r3, r2, r3
    5350:	e3530000 	cmp	r3, #0
    5354:	e1a04000 	mov	r4, r0
    5358:	e1a05001 	mov	r5, r1
    535c:	da000042 	ble	546c <__ieee754_log+0x394>
    5360:	e3a02000 	mov	r2, #0
    5364:	e59f327c 	ldr	r3, [pc, #636]	; 55e8 <__ieee754_log+0x510>
    5368:	e1a0000a 	mov	r0, r10
    536c:	e1a0100b 	mov	r1, r11
    5370:	eb00022a 	bl	5c20 <__aeabi_dmul>
    5374:	e1a0200a 	mov	r2, r10
    5378:	e1a0300b 	mov	r3, r11
    537c:	eb000227 	bl	5c20 <__aeabi_dmul>
    5380:	e3580000 	cmp	r8, #0
    5384:	e1a06000 	mov	r6, r0
    5388:	e1a07001 	mov	r7, r1
    538c:	1a00004c 	bne	54c4 <__ieee754_log+0x3ec>
    5390:	e1a02004 	mov	r2, r4
    5394:	e1a03005 	mov	r3, r5
    5398:	eb00011c 	bl	5810 <__adddf3>
    539c:	e28d3008 	add	r3, sp, #8
    53a0:	e893000c 	ldm	r3, {r2, r3}
    53a4:	eb00021d 	bl	5c20 <__aeabi_dmul>
    53a8:	e1a02000 	mov	r2, r0
    53ac:	e1a03001 	mov	r3, r1
    53b0:	e1a00006 	mov	r0, r6
    53b4:	e1a01007 	mov	r1, r7
    53b8:	eb000113 	bl	580c <__aeabi_dsub>
    53bc:	e1a02000 	mov	r2, r0
    53c0:	e1a03001 	mov	r3, r1
    53c4:	e1a0000a 	mov	r0, r10
    53c8:	e1a0100b 	mov	r1, r11
    53cc:	eb00010e 	bl	580c <__aeabi_dsub>
    53d0:	eaffff94 	b	5228 <__ieee754_log+0x150>
    53d4:	e3a02000 	mov	r2, #0
    53d8:	e3a03000 	mov	r3, #0
    53dc:	e3a00000 	mov	r0, #0
    53e0:	e59f1204 	ldr	r1, [pc, #516]	; 55ec <__ieee754_log+0x514>
    53e4:	eb0002b1 	bl	5eb0 <__aeabi_ddiv>
    53e8:	eaffff8e 	b	5228 <__ieee754_log+0x150>
    53ec:	e1a0200a 	mov	r2, r10
    53f0:	e1a0300b 	mov	r3, r11
    53f4:	e1a0000a 	mov	r0, r10
    53f8:	e1a0100b 	mov	r1, r11
    53fc:	eb000207 	bl	5c20 <__aeabi_dmul>
    5400:	e28f3d07 	add	r3, pc, #448	; 0x1c0
    5404:	e893000c 	ldm	r3, {r2, r3}
    5408:	e1a04000 	mov	r4, r0
    540c:	e1a05001 	mov	r5, r1
    5410:	e1a0000a 	mov	r0, r10
    5414:	e1a0100b 	mov	r1, r11
    5418:	eb000200 	bl	5c20 <__aeabi_dmul>
    541c:	e1a02000 	mov	r2, r0
    5420:	e1a03001 	mov	r3, r1
    5424:	e3a00000 	mov	r0, #0
    5428:	e59f11b8 	ldr	r1, [pc, #440]	; 55e8 <__ieee754_log+0x510>
    542c:	eb0000f6 	bl	580c <__aeabi_dsub>
    5430:	e1a02000 	mov	r2, r0
    5434:	e1a03001 	mov	r3, r1
    5438:	e1a00004 	mov	r0, r4
    543c:	e1a01005 	mov	r1, r5
    5440:	eb0001f6 	bl	5c20 <__aeabi_dmul>
    5444:	e3580000 	cmp	r8, #0
    5448:	e1a04000 	mov	r4, r0
    544c:	e1a05001 	mov	r5, r1
    5450:	1a000066 	bne	55f0 <__ieee754_log+0x518>
    5454:	e1a0000a 	mov	r0, r10
    5458:	e1a0100b 	mov	r1, r11
    545c:	e1a02004 	mov	r2, r4
    5460:	e1a03005 	mov	r3, r5
    5464:	eb0000e8 	bl	580c <__aeabi_dsub>
    5468:	eaffff6e 	b	5228 <__ieee754_log+0x150>
    546c:	e3580000 	cmp	r8, #0
    5470:	0a00007a 	beq	5660 <__ieee754_log+0x588>
    5474:	e28f3f41 	add	r3, pc, #260	; 0x104
    5478:	e893000c 	ldm	r3, {r2, r3}
    547c:	e28d1010 	add	r1, sp, #16
    5480:	e8910003 	ldm	r1, {r0, r1}
    5484:	eb0001e5 	bl	5c20 <__aeabi_dmul>
    5488:	e1a02004 	mov	r2, r4
    548c:	e1a03005 	mov	r3, r5
    5490:	e1a06000 	mov	r6, r0
    5494:	e1a07001 	mov	r7, r1
    5498:	e1a0000a 	mov	r0, r10
    549c:	e1a0100b 	mov	r1, r11
    54a0:	eb0000d9 	bl	580c <__aeabi_dsub>
    54a4:	e28d3008 	add	r3, sp, #8
    54a8:	e893000c 	ldm	r3, {r2, r3}
    54ac:	eb0001db 	bl	5c20 <__aeabi_dmul>
    54b0:	e1a04000 	mov	r4, r0
    54b4:	e1a05001 	mov	r5, r1
    54b8:	e28d1010 	add	r1, sp, #16
    54bc:	e8910003 	ldm	r1, {r0, r1}
    54c0:	ea000055 	b	561c <__ieee754_log+0x544>
    54c4:	e28f30b4 	add	r3, pc, #180	; 0xb4
    54c8:	e893000c 	ldm	r3, {r2, r3}
    54cc:	e28d1010 	add	r1, sp, #16
    54d0:	e8910003 	ldm	r1, {r0, r1}
    54d4:	eb0001d1 	bl	5c20 <__aeabi_dmul>
    54d8:	e1a02004 	mov	r2, r4
    54dc:	e1a08000 	mov	r8, r0
    54e0:	e1a09001 	mov	r9, r1
    54e4:	e1a03005 	mov	r3, r5
    54e8:	e1a00006 	mov	r0, r6
    54ec:	e1a01007 	mov	r1, r7
    54f0:	eb0000c6 	bl	5810 <__adddf3>
    54f4:	e28d3008 	add	r3, sp, #8
    54f8:	e893000c 	ldm	r3, {r2, r3}
    54fc:	eb0001c7 	bl	5c20 <__aeabi_dmul>
    5500:	e28f3080 	add	r3, pc, #128	; 0x80
    5504:	e893000c 	ldm	r3, {r2, r3}
    5508:	e1a04000 	mov	r4, r0
    550c:	e1a05001 	mov	r5, r1
    5510:	e28d1010 	add	r1, sp, #16
    5514:	e8910003 	ldm	r1, {r0, r1}
    5518:	eb0001c0 	bl	5c20 <__aeabi_dmul>
    551c:	e1a02000 	mov	r2, r0
    5520:	e1a03001 	mov	r3, r1
    5524:	e1a00004 	mov	r0, r4
    5528:	e1a01005 	mov	r1, r5
    552c:	eb0000b7 	bl	5810 <__adddf3>
    5530:	e1a02000 	mov	r2, r0
    5534:	e1a03001 	mov	r3, r1
    5538:	e1a00006 	mov	r0, r6
    553c:	e1a01007 	mov	r1, r7
    5540:	eb0000b1 	bl	580c <__aeabi_dsub>
    5544:	e1a0200a 	mov	r2, r10
    5548:	e1a0300b 	mov	r3, r11
    554c:	eb0000ae 	bl	580c <__aeabi_dsub>
    5550:	e1a02000 	mov	r2, r0
    5554:	e1a03001 	mov	r3, r1
    5558:	e1a00008 	mov	r0, r8
    555c:	e1a01009 	mov	r1, r9
    5560:	eb0000a9 	bl	580c <__aeabi_dsub>
    5564:	eaffff2f 	b	5228 <__ieee754_log+0x150>
    5568:	eb0000a7 	bl	580c <__aeabi_dsub>
    556c:	e3a02000 	mov	r2, #0
    5570:	e3a03000 	mov	r3, #0
    5574:	eb00024d 	bl	5eb0 <__aeabi_ddiv>
    5578:	eaffff2a 	b	5228 <__ieee754_log+0x150>
    557c:	e1a00000 	nop			; (mov r0, r0)
    5580:	fee00000 	.word	0xfee00000
    5584:	3fe62e42 	.word	0x3fe62e42
    5588:	35793c76 	.word	0x35793c76
    558c:	3dea39ef 	.word	0x3dea39ef
    5590:	df3e5244 	.word	0xdf3e5244
    5594:	3fc2f112 	.word	0x3fc2f112
    5598:	96cb03de 	.word	0x96cb03de
    559c:	3fc74664 	.word	0x3fc74664
    55a0:	94229359 	.word	0x94229359
    55a4:	3fd24924 	.word	0x3fd24924
    55a8:	55555593 	.word	0x55555593
    55ac:	3fe55555 	.word	0x3fe55555
    55b0:	d078c69f 	.word	0xd078c69f
    55b4:	3fc39a09 	.word	0x3fc39a09
    55b8:	1d8e78af 	.word	0x1d8e78af
    55bc:	3fcc71c5 	.word	0x3fcc71c5
    55c0:	9997fa04 	.word	0x9997fa04
    55c4:	3fd99999 	.word	0x3fd99999
    55c8:	55555555 	.word	0x55555555
    55cc:	3fd55555 	.word	0x3fd55555
    55d0:	43500000 	.word	0x43500000
    55d4:	7fefffff 	.word	0x7fefffff
    55d8:	00095f64 	.word	0x00095f64
    55dc:	3ff00000 	.word	0x3ff00000
    55e0:	fff9eb86 	.word	0xfff9eb86
    55e4:	0006b851 	.word	0x0006b851
    55e8:	3fe00000 	.word	0x3fe00000
    55ec:	c3500000 	.word	0xc3500000
    55f0:	e1a00008 	mov	r0, r8
    55f4:	eb000152 	bl	5b44 <__aeabi_i2d>
    55f8:	e28f3088 	add	r3, pc, #136	; 0x88
    55fc:	e893000c 	ldm	r3, {r2, r3}
    5600:	e1a08000 	mov	r8, r0
    5604:	e1a09001 	mov	r9, r1
    5608:	eb000184 	bl	5c20 <__aeabi_dmul>
    560c:	e1a06000 	mov	r6, r0
    5610:	e1a07001 	mov	r7, r1
    5614:	e1a00008 	mov	r0, r8
    5618:	e1a01009 	mov	r1, r9
    561c:	e28f306c 	add	r3, pc, #108	; 0x6c
    5620:	e893000c 	ldm	r3, {r2, r3}
    5624:	eb00017d 	bl	5c20 <__aeabi_dmul>
    5628:	e1a02000 	mov	r2, r0
    562c:	e1a03001 	mov	r3, r1
    5630:	e1a00004 	mov	r0, r4
    5634:	e1a01005 	mov	r1, r5
    5638:	eb000073 	bl	580c <__aeabi_dsub>
    563c:	e1a0200a 	mov	r2, r10
    5640:	e1a0300b 	mov	r3, r11
    5644:	eb000070 	bl	580c <__aeabi_dsub>
    5648:	e1a02000 	mov	r2, r0
    564c:	e1a03001 	mov	r3, r1
    5650:	e1a00006 	mov	r0, r6
    5654:	e1a01007 	mov	r1, r7
    5658:	eb00006b 	bl	580c <__aeabi_dsub>
    565c:	eafffef1 	b	5228 <__ieee754_log+0x150>
    5660:	e1a02004 	mov	r2, r4
    5664:	e1a03005 	mov	r3, r5
    5668:	e1a0000a 	mov	r0, r10
    566c:	e1a0100b 	mov	r1, r11
    5670:	eb000065 	bl	580c <__aeabi_dsub>
    5674:	e28d3008 	add	r3, sp, #8
    5678:	e893000c 	ldm	r3, {r2, r3}
    567c:	eb000167 	bl	5c20 <__aeabi_dmul>
    5680:	eaffff4d 	b	53bc <__ieee754_log+0x2e4>
    5684:	e1a00000 	nop			; (mov r0, r0)
    5688:	fee00000 	.word	0xfee00000
    568c:	3fe62e42 	.word	0x3fe62e42
    5690:	35793c76 	.word	0x35793c76
    5694:	3dea39ef 	.word	0x3dea39ef

00005698 <copysign>:
    5698:	e2033102 	and	r3, r3, #-2147483648	; 0x80000000
    569c:	e3c12102 	bic	r2, r1, #-2147483648	; 0x80000000
    56a0:	e92d0030 	push	{r4, r5}
    56a4:	e1a05001 	mov	r5, r1
    56a8:	e1a04000 	mov	r4, r0
    56ac:	e1831002 	orr	r1, r3, r2
    56b0:	e8bd0030 	pop	{r4, r5}
    56b4:	e12fff1e 	bx	lr

000056b8 <__aeabi_idiv>:
    56b8:	e3510000 	cmp	r1, #0
    56bc:	0a000043 	beq	57d0 <.divsi3_skip_div0_test+0x110>

000056c0 <.divsi3_skip_div0_test>:
    56c0:	e020c001 	eor	r12, r0, r1
    56c4:	42611000 	rsbmi	r1, r1, #0
    56c8:	e2512001 	subs	r2, r1, #1
    56cc:	0a000027 	beq	5770 <.divsi3_skip_div0_test+0xb0>
    56d0:	e1b03000 	movs	r3, r0
    56d4:	42603000 	rsbmi	r3, r0, #0
    56d8:	e1530001 	cmp	r3, r1
    56dc:	9a000026 	bls	577c <.divsi3_skip_div0_test+0xbc>
    56e0:	e1110002 	tst	r1, r2
    56e4:	0a000028 	beq	578c <.divsi3_skip_div0_test+0xcc>
    56e8:	e311020e 	tst	r1, #-536870912	; 0xe0000000
    56ec:	01a01181 	lsleq	r1, r1, #3
    56f0:	03a02008 	moveq	r2, #8
    56f4:	13a02001 	movne	r2, #1
    56f8:	e3510201 	cmp	r1, #268435456	; 0x10000000
    56fc:	31510003 	cmpcc	r1, r3
    5700:	31a01201 	lslcc	r1, r1, #4
    5704:	31a02202 	lslcc	r2, r2, #4
    5708:	3afffffa 	bcc	56f8 <.divsi3_skip_div0_test+0x38>
    570c:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    5710:	31510003 	cmpcc	r1, r3
    5714:	31a01081 	lslcc	r1, r1, #1
    5718:	31a02082 	lslcc	r2, r2, #1
    571c:	3afffffa 	bcc	570c <.divsi3_skip_div0_test+0x4c>
    5720:	e3a00000 	mov	r0, #0
    5724:	e1530001 	cmp	r3, r1
    5728:	20433001 	subcs	r3, r3, r1
    572c:	21800002 	orrcs	r0, r0, r2
    5730:	e15300a1 	cmp	r3, r1, lsr #1
    5734:	204330a1 	subcs	r3, r3, r1, lsr #1
    5738:	218000a2 	orrcs	r0, r0, r2, lsr #1
    573c:	e1530121 	cmp	r3, r1, lsr #2
    5740:	20433121 	subcs	r3, r3, r1, lsr #2
    5744:	21800122 	orrcs	r0, r0, r2, lsr #2
    5748:	e15301a1 	cmp	r3, r1, lsr #3
    574c:	204331a1 	subcs	r3, r3, r1, lsr #3
    5750:	218001a2 	orrcs	r0, r0, r2, lsr #3
    5754:	e3530000 	cmp	r3, #0
    5758:	11b02222 	lsrsne	r2, r2, #4
    575c:	11a01221 	lsrne	r1, r1, #4
    5760:	1affffef 	bne	5724 <.divsi3_skip_div0_test+0x64>
    5764:	e35c0000 	cmp	r12, #0
    5768:	42600000 	rsbmi	r0, r0, #0
    576c:	e12fff1e 	bx	lr
    5770:	e13c0000 	teq	r12, r0
    5774:	42600000 	rsbmi	r0, r0, #0
    5778:	e12fff1e 	bx	lr
    577c:	33a00000 	movcc	r0, #0
    5780:	01a00fcc 	asreq	r0, r12, #31
    5784:	03800001 	orreq	r0, r0, #1
    5788:	e12fff1e 	bx	lr
    578c:	e3510801 	cmp	r1, #65536	; 0x10000
    5790:	21a01821 	lsrcs	r1, r1, #16
    5794:	23a02010 	movcs	r2, #16
    5798:	33a02000 	movcc	r2, #0
    579c:	e3510c01 	cmp	r1, #256	; 0x100
    57a0:	21a01421 	lsrcs	r1, r1, #8
    57a4:	22822008 	addcs	r2, r2, #8
    57a8:	e3510010 	cmp	r1, #16
    57ac:	21a01221 	lsrcs	r1, r1, #4
    57b0:	22822004 	addcs	r2, r2, #4
    57b4:	e3510004 	cmp	r1, #4
    57b8:	82822003 	addhi	r2, r2, #3
    57bc:	908220a1 	addls	r2, r2, r1, lsr #1
    57c0:	e35c0000 	cmp	r12, #0
    57c4:	e1a00233 	lsr	r0, r3, r2
    57c8:	42600000 	rsbmi	r0, r0, #0
    57cc:	e12fff1e 	bx	lr
    57d0:	e3500000 	cmp	r0, #0
    57d4:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
    57d8:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
    57dc:	ea000007 	b	5800 <__aeabi_idiv0>

000057e0 <__aeabi_idivmod>:
    57e0:	e3510000 	cmp	r1, #0
    57e4:	0afffff9 	beq	57d0 <.divsi3_skip_div0_test+0x110>
    57e8:	e92d4003 	push	{r0, r1, lr}
    57ec:	ebffffb3 	bl	56c0 <.divsi3_skip_div0_test>
    57f0:	e8bd4006 	pop	{r1, r2, lr}
    57f4:	e0030092 	mul	r3, r2, r0
    57f8:	e0411003 	sub	r1, r1, r3
    57fc:	e12fff1e 	bx	lr

00005800 <__aeabi_idiv0>:
    5800:	e12fff1e 	bx	lr

00005804 <__aeabi_drsub>:
    5804:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    5808:	ea000000 	b	5810 <__adddf3>

0000580c <__aeabi_dsub>:
    580c:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

00005810 <__adddf3>:
    5810:	e92d4030 	push	{r4, r5, lr}
    5814:	e1a04081 	lsl	r4, r1, #1
    5818:	e1a05083 	lsl	r5, r3, #1
    581c:	e1340005 	teq	r4, r5
    5820:	01300002 	teqeq	r0, r2
    5824:	1194c000 	orrsne	r12, r4, r0
    5828:	1195c002 	orrsne	r12, r5, r2
    582c:	11f0cac4 	mvnsne	r12, r4, asr #21
    5830:	11f0cac5 	mvnsne	r12, r5, asr #21
    5834:	0a00008c 	beq	5a6c <__adddf3+0x25c>
    5838:	e1a04aa4 	lsr	r4, r4, #21
    583c:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    5840:	b2655000 	rsblt	r5, r5, #0
    5844:	da000006 	ble	5864 <__adddf3+0x54>
    5848:	e0844005 	add	r4, r4, r5
    584c:	e0202002 	eor	r2, r0, r2
    5850:	e0213003 	eor	r3, r1, r3
    5854:	e0220000 	eor	r0, r2, r0
    5858:	e0231001 	eor	r1, r3, r1
    585c:	e0202002 	eor	r2, r0, r2
    5860:	e0213003 	eor	r3, r1, r3
    5864:	e3550036 	cmp	r5, #54	; 0x36
    5868:	88bd4030 	pophi	{r4, r5, lr}
    586c:	812fff1e 	bxhi	lr
    5870:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    5874:	e1a01601 	lsl	r1, r1, #12
    5878:	e3a0c601 	mov	r12, #1048576	; 0x100000
    587c:	e18c1621 	orr	r1, r12, r1, lsr #12
    5880:	0a000001 	beq	588c <__adddf3+0x7c>
    5884:	e2700000 	rsbs	r0, r0, #0
    5888:	e2e11000 	rsc	r1, r1, #0
    588c:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    5890:	e1a03603 	lsl	r3, r3, #12
    5894:	e18c3623 	orr	r3, r12, r3, lsr #12
    5898:	0a000001 	beq	58a4 <__adddf3+0x94>
    589c:	e2722000 	rsbs	r2, r2, #0
    58a0:	e2e33000 	rsc	r3, r3, #0
    58a4:	e1340005 	teq	r4, r5
    58a8:	0a000069 	beq	5a54 <__adddf3+0x244>
    58ac:	e2444001 	sub	r4, r4, #1
    58b0:	e275e020 	rsbs	lr, r5, #32
    58b4:	ba000005 	blt	58d0 <__adddf3+0xc0>
    58b8:	e1a0ce12 	lsl	r12, r2, lr
    58bc:	e0900532 	adds	r0, r0, r2, lsr r5
    58c0:	e2a11000 	adc	r1, r1, #0
    58c4:	e0900e13 	adds	r0, r0, r3, lsl lr
    58c8:	e0b11553 	adcs	r1, r1, r3, asr r5
    58cc:	ea000006 	b	58ec <__adddf3+0xdc>
    58d0:	e2455020 	sub	r5, r5, #32
    58d4:	e28ee020 	add	lr, lr, #32
    58d8:	e3520001 	cmp	r2, #1
    58dc:	e1a0ce13 	lsl	r12, r3, lr
    58e0:	238cc002 	orrcs	r12, r12, #2
    58e4:	e0900553 	adds	r0, r0, r3, asr r5
    58e8:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    58ec:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    58f0:	5a000002 	bpl	5900 <__adddf3+0xf0>
    58f4:	e27cc000 	rsbs	r12, r12, #0
    58f8:	e2f00000 	rscs	r0, r0, #0
    58fc:	e2e11000 	rsc	r1, r1, #0
    5900:	e3510601 	cmp	r1, #1048576	; 0x100000
    5904:	3a00000f 	bcc	5948 <__adddf3+0x138>
    5908:	e3510602 	cmp	r1, #2097152	; 0x200000
    590c:	3a000006 	bcc	592c <__adddf3+0x11c>
    5910:	e1b010a1 	lsrs	r1, r1, #1
    5914:	e1b00060 	rrxs	r0, r0
    5918:	e1a0c06c 	rrx	r12, r12
    591c:	e2844001 	add	r4, r4, #1
    5920:	e1a02a84 	lsl	r2, r4, #21
    5924:	e3720501 	cmn	r2, #4194304	; 0x400000
    5928:	2a00006b 	bcs	5adc <__adddf3+0x2cc>
    592c:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    5930:	01b0c0a0 	lsrseq	r12, r0, #1
    5934:	e2b00000 	adcs	r0, r0, #0
    5938:	e0a11a04 	adc	r1, r1, r4, lsl #20
    593c:	e1811005 	orr	r1, r1, r5
    5940:	e8bd4030 	pop	{r4, r5, lr}
    5944:	e12fff1e 	bx	lr
    5948:	e1b0c08c 	lsls	r12, r12, #1
    594c:	e0b00000 	adcs	r0, r0, r0
    5950:	e0a11001 	adc	r1, r1, r1
    5954:	e3110601 	tst	r1, #1048576	; 0x100000
    5958:	e2444001 	sub	r4, r4, #1
    595c:	1afffff2 	bne	592c <__adddf3+0x11c>
    5960:	e3310000 	teq	r1, #0
    5964:	13a03014 	movne	r3, #20
    5968:	03a03034 	moveq	r3, #52	; 0x34
    596c:	01a01000 	moveq	r1, r0
    5970:	03a00000 	moveq	r0, #0
    5974:	e1a02001 	mov	r2, r1
    5978:	e3520801 	cmp	r2, #65536	; 0x10000
    597c:	21a02822 	lsrcs	r2, r2, #16
    5980:	22433010 	subcs	r3, r3, #16
    5984:	e3520c01 	cmp	r2, #256	; 0x100
    5988:	21a02422 	lsrcs	r2, r2, #8
    598c:	22433008 	subcs	r3, r3, #8
    5990:	e3520010 	cmp	r2, #16
    5994:	21a02222 	lsrcs	r2, r2, #4
    5998:	22433004 	subcs	r3, r3, #4
    599c:	e3520004 	cmp	r2, #4
    59a0:	22433002 	subcs	r3, r3, #2
    59a4:	304330a2 	subcc	r3, r3, r2, lsr #1
    59a8:	e04331a2 	sub	r3, r3, r2, lsr #3
    59ac:	e2532020 	subs	r2, r3, #32
    59b0:	aa000007 	bge	59d4 <__adddf3+0x1c4>
    59b4:	e292200c 	adds	r2, r2, #12
    59b8:	da000004 	ble	59d0 <__adddf3+0x1c0>
    59bc:	e282c014 	add	r12, r2, #20
    59c0:	e262200c 	rsb	r2, r2, #12
    59c4:	e1a00c11 	lsl	r0, r1, r12
    59c8:	e1a01231 	lsr	r1, r1, r2
    59cc:	ea000004 	b	59e4 <__adddf3+0x1d4>
    59d0:	e2822014 	add	r2, r2, #20
    59d4:	d262c020 	rsble	r12, r2, #32
    59d8:	e1a01211 	lsl	r1, r1, r2
    59dc:	d1811c30 	orrle	r1, r1, r0, lsr r12
    59e0:	d1a00210 	lslle	r0, r0, r2
    59e4:	e0544003 	subs	r4, r4, r3
    59e8:	a0811a04 	addge	r1, r1, r4, lsl #20
    59ec:	a1811005 	orrge	r1, r1, r5
    59f0:	a8bd4030 	popge	{r4, r5, lr}
    59f4:	a12fff1e 	bxge	lr
    59f8:	e1e04004 	mvn	r4, r4
    59fc:	e254401f 	subs	r4, r4, #31
    5a00:	aa00000f 	bge	5a44 <__adddf3+0x234>
    5a04:	e294400c 	adds	r4, r4, #12
    5a08:	ca000006 	bgt	5a28 <__adddf3+0x218>
    5a0c:	e2844014 	add	r4, r4, #20
    5a10:	e2642020 	rsb	r2, r4, #32
    5a14:	e1a00430 	lsr	r0, r0, r4
    5a18:	e1800211 	orr	r0, r0, r1, lsl r2
    5a1c:	e1851431 	orr	r1, r5, r1, lsr r4
    5a20:	e8bd4030 	pop	{r4, r5, lr}
    5a24:	e12fff1e 	bx	lr
    5a28:	e264400c 	rsb	r4, r4, #12
    5a2c:	e2642020 	rsb	r2, r4, #32
    5a30:	e1a00230 	lsr	r0, r0, r2
    5a34:	e1800411 	orr	r0, r0, r1, lsl r4
    5a38:	e1a01005 	mov	r1, r5
    5a3c:	e8bd4030 	pop	{r4, r5, lr}
    5a40:	e12fff1e 	bx	lr
    5a44:	e1a00431 	lsr	r0, r1, r4
    5a48:	e1a01005 	mov	r1, r5
    5a4c:	e8bd4030 	pop	{r4, r5, lr}
    5a50:	e12fff1e 	bx	lr
    5a54:	e3340000 	teq	r4, #0
    5a58:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    5a5c:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    5a60:	02844001 	addeq	r4, r4, #1
    5a64:	12455001 	subne	r5, r5, #1
    5a68:	eaffff8f 	b	58ac <__adddf3+0x9c>
    5a6c:	e1f0cac4 	mvns	r12, r4, asr #21
    5a70:	11f0cac5 	mvnsne	r12, r5, asr #21
    5a74:	0a00001d 	beq	5af0 <__adddf3+0x2e0>
    5a78:	e1340005 	teq	r4, r5
    5a7c:	01300002 	teqeq	r0, r2
    5a80:	0a000004 	beq	5a98 <__adddf3+0x288>
    5a84:	e194c000 	orrs	r12, r4, r0
    5a88:	01a01003 	moveq	r1, r3
    5a8c:	01a00002 	moveq	r0, r2
    5a90:	e8bd4030 	pop	{r4, r5, lr}
    5a94:	e12fff1e 	bx	lr
    5a98:	e1310003 	teq	r1, r3
    5a9c:	13a01000 	movne	r1, #0
    5aa0:	13a00000 	movne	r0, #0
    5aa4:	18bd4030 	popne	{r4, r5, lr}
    5aa8:	112fff1e 	bxne	lr
    5aac:	e1b0caa4 	lsrs	r12, r4, #21
    5ab0:	1a000004 	bne	5ac8 <__adddf3+0x2b8>
    5ab4:	e1b00080 	lsls	r0, r0, #1
    5ab8:	e0b11001 	adcs	r1, r1, r1
    5abc:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    5ac0:	e8bd4030 	pop	{r4, r5, lr}
    5ac4:	e12fff1e 	bx	lr
    5ac8:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    5acc:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    5ad0:	38bd4030 	popcc	{r4, r5, lr}
    5ad4:	312fff1e 	bxcc	lr
    5ad8:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    5adc:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    5ae0:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    5ae4:	e3a00000 	mov	r0, #0
    5ae8:	e8bd4030 	pop	{r4, r5, lr}
    5aec:	e12fff1e 	bx	lr
    5af0:	e1f0cac4 	mvns	r12, r4, asr #21
    5af4:	11a01003 	movne	r1, r3
    5af8:	11a00002 	movne	r0, r2
    5afc:	01f0cac5 	mvnseq	r12, r5, asr #21
    5b00:	11a03001 	movne	r3, r1
    5b04:	11a02000 	movne	r2, r0
    5b08:	e1904601 	orrs	r4, r0, r1, lsl #12
    5b0c:	01925603 	orrseq	r5, r2, r3, lsl #12
    5b10:	01310003 	teqeq	r1, r3
    5b14:	13811702 	orrne	r1, r1, #524288	; 0x80000
    5b18:	e8bd4030 	pop	{r4, r5, lr}
    5b1c:	e12fff1e 	bx	lr

00005b20 <__aeabi_ui2d>:
    5b20:	e3300000 	teq	r0, #0
    5b24:	03a01000 	moveq	r1, #0
    5b28:	012fff1e 	bxeq	lr
    5b2c:	e92d4030 	push	{r4, r5, lr}
    5b30:	e3a04b01 	mov	r4, #1024	; 0x400
    5b34:	e2844032 	add	r4, r4, #50	; 0x32
    5b38:	e3a05000 	mov	r5, #0
    5b3c:	e3a01000 	mov	r1, #0
    5b40:	eaffff86 	b	5960 <__adddf3+0x150>

00005b44 <__aeabi_i2d>:
    5b44:	e3300000 	teq	r0, #0
    5b48:	03a01000 	moveq	r1, #0
    5b4c:	012fff1e 	bxeq	lr
    5b50:	e92d4030 	push	{r4, r5, lr}
    5b54:	e3a04b01 	mov	r4, #1024	; 0x400
    5b58:	e2844032 	add	r4, r4, #50	; 0x32
    5b5c:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    5b60:	42600000 	rsbmi	r0, r0, #0
    5b64:	e3a01000 	mov	r1, #0
    5b68:	eaffff7c 	b	5960 <__adddf3+0x150>

00005b6c <__aeabi_f2d>:
    5b6c:	e1b02080 	lsls	r2, r0, #1
    5b70:	e1a011c2 	asr	r1, r2, #3
    5b74:	e1a01061 	rrx	r1, r1
    5b78:	e1a00e02 	lsl	r0, r2, #28
    5b7c:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    5b80:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    5b84:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    5b88:	112fff1e 	bxne	lr
    5b8c:	e3320000 	teq	r2, #0
    5b90:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    5b94:	012fff1e 	bxeq	lr
    5b98:	e92d4030 	push	{r4, r5, lr}
    5b9c:	e3a04d0e 	mov	r4, #896	; 0x380
    5ba0:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    5ba4:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    5ba8:	eaffff6c 	b	5960 <__adddf3+0x150>

00005bac <__aeabi_ul2d>:
    5bac:	e1902001 	orrs	r2, r0, r1
    5bb0:	012fff1e 	bxeq	lr
    5bb4:	e92d4030 	push	{r4, r5, lr}
    5bb8:	e3a05000 	mov	r5, #0
    5bbc:	ea000006 	b	5bdc <__aeabi_l2d+0x1c>

00005bc0 <__aeabi_l2d>:
    5bc0:	e1902001 	orrs	r2, r0, r1
    5bc4:	012fff1e 	bxeq	lr
    5bc8:	e92d4030 	push	{r4, r5, lr}
    5bcc:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    5bd0:	5a000001 	bpl	5bdc <__aeabi_l2d+0x1c>
    5bd4:	e2700000 	rsbs	r0, r0, #0
    5bd8:	e2e11000 	rsc	r1, r1, #0
    5bdc:	e3a04b01 	mov	r4, #1024	; 0x400
    5be0:	e2844032 	add	r4, r4, #50	; 0x32
    5be4:	e1b0cb21 	lsrs	r12, r1, #22
    5be8:	0affff44 	beq	5900 <__adddf3+0xf0>
    5bec:	e3a02003 	mov	r2, #3
    5bf0:	e1b0c1ac 	lsrs	r12, r12, #3
    5bf4:	12822003 	addne	r2, r2, #3
    5bf8:	e1b0c1ac 	lsrs	r12, r12, #3
    5bfc:	12822003 	addne	r2, r2, #3
    5c00:	e08221ac 	add	r2, r2, r12, lsr #3
    5c04:	e2623020 	rsb	r3, r2, #32
    5c08:	e1a0c310 	lsl	r12, r0, r3
    5c0c:	e1a00230 	lsr	r0, r0, r2
    5c10:	e1800311 	orr	r0, r0, r1, lsl r3
    5c14:	e1a01231 	lsr	r1, r1, r2
    5c18:	e0844002 	add	r4, r4, r2
    5c1c:	eaffff37 	b	5900 <__adddf3+0xf0>

00005c20 <__aeabi_dmul>:
    5c20:	e92d4070 	push	{r4, r5, r6, lr}
    5c24:	e3a0c0ff 	mov	r12, #255	; 0xff
    5c28:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    5c2c:	e01c4a21 	ands	r4, r12, r1, lsr #20
    5c30:	101c5a23 	andsne	r5, r12, r3, lsr #20
    5c34:	1134000c 	teqne	r4, r12
    5c38:	1135000c 	teqne	r5, r12
    5c3c:	0b000075 	bleq	5e18 <__aeabi_dmul+0x1f8>
    5c40:	e0844005 	add	r4, r4, r5
    5c44:	e0216003 	eor	r6, r1, r3
    5c48:	e1c11a8c 	bic	r1, r1, r12, lsl #21
    5c4c:	e1c33a8c 	bic	r3, r3, r12, lsl #21
    5c50:	e1905601 	orrs	r5, r0, r1, lsl #12
    5c54:	11925603 	orrsne	r5, r2, r3, lsl #12
    5c58:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    5c5c:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    5c60:	0a00001d 	beq	5cdc <__aeabi_dmul+0xbc>
    5c64:	e08ec290 	umull	r12, lr, r0, r2
    5c68:	e3a05000 	mov	r5, #0
    5c6c:	e0a5e291 	umlal	lr, r5, r1, r2
    5c70:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
    5c74:	e0a5e390 	umlal	lr, r5, r0, r3
    5c78:	e3a06000 	mov	r6, #0
    5c7c:	e0a65391 	umlal	r5, r6, r1, r3
    5c80:	e33c0000 	teq	r12, #0
    5c84:	138ee001 	orrne	lr, lr, #1
    5c88:	e24440ff 	sub	r4, r4, #255	; 0xff
    5c8c:	e3560c02 	cmp	r6, #512	; 0x200
    5c90:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    5c94:	2a000002 	bcs	5ca4 <__aeabi_dmul+0x84>
    5c98:	e1b0e08e 	lsls	lr, lr, #1
    5c9c:	e0b55005 	adcs	r5, r5, r5
    5ca0:	e0a66006 	adc	r6, r6, r6
    5ca4:	e1821586 	orr	r1, r2, r6, lsl #11
    5ca8:	e1811aa5 	orr	r1, r1, r5, lsr #21
    5cac:	e1a00585 	lsl	r0, r5, #11
    5cb0:	e1800aae 	orr	r0, r0, lr, lsr #21
    5cb4:	e1a0e58e 	lsl	lr, lr, #11
    5cb8:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    5cbc:	835c0c07 	cmphi	r12, #1792	; 0x700
    5cc0:	8a000011 	bhi	5d0c <__aeabi_dmul+0xec>
    5cc4:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    5cc8:	01b0e0a0 	lsrseq	lr, r0, #1
    5ccc:	e2b00000 	adcs	r0, r0, #0
    5cd0:	e0a11a04 	adc	r1, r1, r4, lsl #20
    5cd4:	e8bd4070 	pop	{r4, r5, r6, lr}
    5cd8:	e12fff1e 	bx	lr
    5cdc:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    5ce0:	e1861001 	orr	r1, r6, r1
    5ce4:	e1800002 	orr	r0, r0, r2
    5ce8:	e0211003 	eor	r1, r1, r3
    5cec:	e05440ac 	subs	r4, r4, r12, lsr #1
    5cf0:	c074500c 	rsbsgt	r5, r4, r12
    5cf4:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    5cf8:	c8bd4070 	popgt	{r4, r5, r6, lr}
    5cfc:	c12fff1e 	bxgt	lr
    5d00:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    5d04:	e3a0e000 	mov	lr, #0
    5d08:	e2544001 	subs	r4, r4, #1
    5d0c:	ca00005d 	bgt	5e88 <__aeabi_dmul+0x268>
    5d10:	e3740036 	cmn	r4, #54	; 0x36
    5d14:	d3a00000 	movle	r0, #0
    5d18:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
    5d1c:	d8bd4070 	pople	{r4, r5, r6, lr}
    5d20:	d12fff1e 	bxle	lr
    5d24:	e2644000 	rsb	r4, r4, #0
    5d28:	e2544020 	subs	r4, r4, #32
    5d2c:	aa00001a 	bge	5d9c <__aeabi_dmul+0x17c>
    5d30:	e294400c 	adds	r4, r4, #12
    5d34:	ca00000c 	bgt	5d6c <__aeabi_dmul+0x14c>
    5d38:	e2844014 	add	r4, r4, #20
    5d3c:	e2645020 	rsb	r5, r4, #32
    5d40:	e1a03510 	lsl	r3, r0, r5
    5d44:	e1a00430 	lsr	r0, r0, r4
    5d48:	e1800511 	orr	r0, r0, r1, lsl r5
    5d4c:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
    5d50:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    5d54:	e0900fa3 	adds	r0, r0, r3, lsr #31
    5d58:	e0a21431 	adc	r1, r2, r1, lsr r4
    5d5c:	e19ee083 	orrs	lr, lr, r3, lsl #1
    5d60:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    5d64:	e8bd4070 	pop	{r4, r5, r6, lr}
    5d68:	e12fff1e 	bx	lr
    5d6c:	e264400c 	rsb	r4, r4, #12
    5d70:	e2645020 	rsb	r5, r4, #32
    5d74:	e1a03410 	lsl	r3, r0, r4
    5d78:	e1a00530 	lsr	r0, r0, r5
    5d7c:	e1800411 	orr	r0, r0, r1, lsl r4
    5d80:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    5d84:	e0900fa3 	adds	r0, r0, r3, lsr #31
    5d88:	e2a11000 	adc	r1, r1, #0
    5d8c:	e19ee083 	orrs	lr, lr, r3, lsl #1
    5d90:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    5d94:	e8bd4070 	pop	{r4, r5, r6, lr}
    5d98:	e12fff1e 	bx	lr
    5d9c:	e2645020 	rsb	r5, r4, #32
    5da0:	e18ee510 	orr	lr, lr, r0, lsl r5
    5da4:	e1a03430 	lsr	r3, r0, r4
    5da8:	e1833511 	orr	r3, r3, r1, lsl r5
    5dac:	e1a00431 	lsr	r0, r1, r4
    5db0:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    5db4:	e1c00431 	bic	r0, r0, r1, lsr r4
    5db8:	e0800fa3 	add	r0, r0, r3, lsr #31
    5dbc:	e19ee083 	orrs	lr, lr, r3, lsl #1
    5dc0:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    5dc4:	e8bd4070 	pop	{r4, r5, r6, lr}
    5dc8:	e12fff1e 	bx	lr
    5dcc:	e3340000 	teq	r4, #0
    5dd0:	1a000008 	bne	5df8 <__aeabi_dmul+0x1d8>
    5dd4:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
    5dd8:	e1b00080 	lsls	r0, r0, #1
    5ddc:	e0a11001 	adc	r1, r1, r1
    5de0:	e3110601 	tst	r1, #1048576	; 0x100000
    5de4:	02444001 	subeq	r4, r4, #1
    5de8:	0afffffa 	beq	5dd8 <__aeabi_dmul+0x1b8>
    5dec:	e1811006 	orr	r1, r1, r6
    5df0:	e3350000 	teq	r5, #0
    5df4:	112fff1e 	bxne	lr
    5df8:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
    5dfc:	e1b02082 	lsls	r2, r2, #1
    5e00:	e0a33003 	adc	r3, r3, r3
    5e04:	e3130601 	tst	r3, #1048576	; 0x100000
    5e08:	02455001 	subeq	r5, r5, #1
    5e0c:	0afffffa 	beq	5dfc <__aeabi_dmul+0x1dc>
    5e10:	e1833006 	orr	r3, r3, r6
    5e14:	e12fff1e 	bx	lr
    5e18:	e134000c 	teq	r4, r12
    5e1c:	e00c5a23 	and	r5, r12, r3, lsr #20
    5e20:	1135000c 	teqne	r5, r12
    5e24:	0a000007 	beq	5e48 <__aeabi_dmul+0x228>
    5e28:	e1906081 	orrs	r6, r0, r1, lsl #1
    5e2c:	11926083 	orrsne	r6, r2, r3, lsl #1
    5e30:	1affffe5 	bne	5dcc <__aeabi_dmul+0x1ac>
    5e34:	e0211003 	eor	r1, r1, r3
    5e38:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    5e3c:	e3a00000 	mov	r0, #0
    5e40:	e8bd4070 	pop	{r4, r5, r6, lr}
    5e44:	e12fff1e 	bx	lr
    5e48:	e1906081 	orrs	r6, r0, r1, lsl #1
    5e4c:	01a00002 	moveq	r0, r2
    5e50:	01a01003 	moveq	r1, r3
    5e54:	11926083 	orrsne	r6, r2, r3, lsl #1
    5e58:	0a000010 	beq	5ea0 <__aeabi_dmul+0x280>
    5e5c:	e134000c 	teq	r4, r12
    5e60:	1a000001 	bne	5e6c <__aeabi_dmul+0x24c>
    5e64:	e1906601 	orrs	r6, r0, r1, lsl #12
    5e68:	1a00000c 	bne	5ea0 <__aeabi_dmul+0x280>
    5e6c:	e135000c 	teq	r5, r12
    5e70:	1a000003 	bne	5e84 <__aeabi_dmul+0x264>
    5e74:	e1926603 	orrs	r6, r2, r3, lsl #12
    5e78:	11a00002 	movne	r0, r2
    5e7c:	11a01003 	movne	r1, r3
    5e80:	1a000006 	bne	5ea0 <__aeabi_dmul+0x280>
    5e84:	e0211003 	eor	r1, r1, r3
    5e88:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    5e8c:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    5e90:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    5e94:	e3a00000 	mov	r0, #0
    5e98:	e8bd4070 	pop	{r4, r5, r6, lr}
    5e9c:	e12fff1e 	bx	lr
    5ea0:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    5ea4:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
    5ea8:	e8bd4070 	pop	{r4, r5, r6, lr}
    5eac:	e12fff1e 	bx	lr

00005eb0 <__aeabi_ddiv>:
    5eb0:	e92d4070 	push	{r4, r5, r6, lr}
    5eb4:	e3a0c0ff 	mov	r12, #255	; 0xff
    5eb8:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    5ebc:	e01c4a21 	ands	r4, r12, r1, lsr #20
    5ec0:	101c5a23 	andsne	r5, r12, r3, lsr #20
    5ec4:	1134000c 	teqne	r4, r12
    5ec8:	1135000c 	teqne	r5, r12
    5ecc:	0b00005e 	bleq	604c <__aeabi_ddiv+0x19c>
    5ed0:	e0444005 	sub	r4, r4, r5
    5ed4:	e021e003 	eor	lr, r1, r3
    5ed8:	e1925603 	orrs	r5, r2, r3, lsl #12
    5edc:	e1a01601 	lsl	r1, r1, #12
    5ee0:	0a00004c 	beq	6018 <__aeabi_ddiv+0x168>
    5ee4:	e1a03603 	lsl	r3, r3, #12
    5ee8:	e3a05201 	mov	r5, #268435456	; 0x10000000
    5eec:	e1853223 	orr	r3, r5, r3, lsr #4
    5ef0:	e1833c22 	orr	r3, r3, r2, lsr #24
    5ef4:	e1a02402 	lsl	r2, r2, #8
    5ef8:	e1855221 	orr	r5, r5, r1, lsr #4
    5efc:	e1855c20 	orr	r5, r5, r0, lsr #24
    5f00:	e1a06400 	lsl	r6, r0, #8
    5f04:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
    5f08:	e1550003 	cmp	r5, r3
    5f0c:	01560002 	cmpeq	r6, r2
    5f10:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    5f14:	e2844c03 	add	r4, r4, #768	; 0x300
    5f18:	2a000001 	bcs	5f24 <__aeabi_ddiv+0x74>
    5f1c:	e1b030a3 	lsrs	r3, r3, #1
    5f20:	e1a02062 	rrx	r2, r2
    5f24:	e0566002 	subs	r6, r6, r2
    5f28:	e0c55003 	sbc	r5, r5, r3
    5f2c:	e1b030a3 	lsrs	r3, r3, #1
    5f30:	e1a02062 	rrx	r2, r2
    5f34:	e3a00601 	mov	r0, #1048576	; 0x100000
    5f38:	e3a0c702 	mov	r12, #524288	; 0x80000
    5f3c:	e056e002 	subs	lr, r6, r2
    5f40:	e0d5e003 	sbcs	lr, r5, r3
    5f44:	20466002 	subcs	r6, r6, r2
    5f48:	21a0500e 	movcs	r5, lr
    5f4c:	2180000c 	orrcs	r0, r0, r12
    5f50:	e1b030a3 	lsrs	r3, r3, #1
    5f54:	e1a02062 	rrx	r2, r2
    5f58:	e056e002 	subs	lr, r6, r2
    5f5c:	e0d5e003 	sbcs	lr, r5, r3
    5f60:	20466002 	subcs	r6, r6, r2
    5f64:	21a0500e 	movcs	r5, lr
    5f68:	218000ac 	orrcs	r0, r0, r12, lsr #1
    5f6c:	e1b030a3 	lsrs	r3, r3, #1
    5f70:	e1a02062 	rrx	r2, r2
    5f74:	e056e002 	subs	lr, r6, r2
    5f78:	e0d5e003 	sbcs	lr, r5, r3
    5f7c:	20466002 	subcs	r6, r6, r2
    5f80:	21a0500e 	movcs	r5, lr
    5f84:	2180012c 	orrcs	r0, r0, r12, lsr #2
    5f88:	e1b030a3 	lsrs	r3, r3, #1
    5f8c:	e1a02062 	rrx	r2, r2
    5f90:	e056e002 	subs	lr, r6, r2
    5f94:	e0d5e003 	sbcs	lr, r5, r3
    5f98:	20466002 	subcs	r6, r6, r2
    5f9c:	21a0500e 	movcs	r5, lr
    5fa0:	218001ac 	orrcs	r0, r0, r12, lsr #3
    5fa4:	e195e006 	orrs	lr, r5, r6
    5fa8:	0a00000d 	beq	5fe4 <__aeabi_ddiv+0x134>
    5fac:	e1a05205 	lsl	r5, r5, #4
    5fb0:	e1855e26 	orr	r5, r5, r6, lsr #28
    5fb4:	e1a06206 	lsl	r6, r6, #4
    5fb8:	e1a03183 	lsl	r3, r3, #3
    5fbc:	e1833ea2 	orr	r3, r3, r2, lsr #29
    5fc0:	e1a02182 	lsl	r2, r2, #3
    5fc4:	e1b0c22c 	lsrs	r12, r12, #4
    5fc8:	1affffdb 	bne	5f3c <__aeabi_ddiv+0x8c>
    5fcc:	e3110601 	tst	r1, #1048576	; 0x100000
    5fd0:	1a000006 	bne	5ff0 <__aeabi_ddiv+0x140>
    5fd4:	e1811000 	orr	r1, r1, r0
    5fd8:	e3a00000 	mov	r0, #0
    5fdc:	e3a0c102 	mov	r12, #-2147483648	; 0x80000000
    5fe0:	eaffffd5 	b	5f3c <__aeabi_ddiv+0x8c>
    5fe4:	e3110601 	tst	r1, #1048576	; 0x100000
    5fe8:	01811000 	orreq	r1, r1, r0
    5fec:	03a00000 	moveq	r0, #0
    5ff0:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    5ff4:	835c0c07 	cmphi	r12, #1792	; 0x700
    5ff8:	8affff43 	bhi	5d0c <__aeabi_dmul+0xec>
    5ffc:	e055c003 	subs	r12, r5, r3
    6000:	0056c002 	subseq	r12, r6, r2
    6004:	01b0c0a0 	lsrseq	r12, r0, #1
    6008:	e2b00000 	adcs	r0, r0, #0
    600c:	e0a11a04 	adc	r1, r1, r4, lsl #20
    6010:	e8bd4070 	pop	{r4, r5, r6, lr}
    6014:	e12fff1e 	bx	lr
    6018:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    601c:	e18e1621 	orr	r1, lr, r1, lsr #12
    6020:	e09440ac 	adds	r4, r4, r12, lsr #1
    6024:	c074500c 	rsbsgt	r5, r4, r12
    6028:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    602c:	c8bd4070 	popgt	{r4, r5, r6, lr}
    6030:	c12fff1e 	bxgt	lr
    6034:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    6038:	e3a0e000 	mov	lr, #0
    603c:	e2544001 	subs	r4, r4, #1
    6040:	eaffff31 	b	5d0c <__aeabi_dmul+0xec>
    6044:	e185e006 	orr	lr, r5, r6
    6048:	eaffff2f 	b	5d0c <__aeabi_dmul+0xec>
    604c:	e00c5a23 	and	r5, r12, r3, lsr #20
    6050:	e134000c 	teq	r4, r12
    6054:	0135000c 	teqeq	r5, r12
    6058:	0affff90 	beq	5ea0 <__aeabi_dmul+0x280>
    605c:	e134000c 	teq	r4, r12
    6060:	1a000006 	bne	6080 <__aeabi_ddiv+0x1d0>
    6064:	e1904601 	orrs	r4, r0, r1, lsl #12
    6068:	1affff8c 	bne	5ea0 <__aeabi_dmul+0x280>
    606c:	e135000c 	teq	r5, r12
    6070:	1affff83 	bne	5e84 <__aeabi_dmul+0x264>
    6074:	e1a00002 	mov	r0, r2
    6078:	e1a01003 	mov	r1, r3
    607c:	eaffff87 	b	5ea0 <__aeabi_dmul+0x280>
    6080:	e135000c 	teq	r5, r12
    6084:	1a000004 	bne	609c <__aeabi_ddiv+0x1ec>
    6088:	e1925603 	orrs	r5, r2, r3, lsl #12
    608c:	0affff68 	beq	5e34 <__aeabi_dmul+0x214>
    6090:	e1a00002 	mov	r0, r2
    6094:	e1a01003 	mov	r1, r3
    6098:	eaffff80 	b	5ea0 <__aeabi_dmul+0x280>
    609c:	e1906081 	orrs	r6, r0, r1, lsl #1
    60a0:	11926083 	orrsne	r6, r2, r3, lsl #1
    60a4:	1affff48 	bne	5dcc <__aeabi_dmul+0x1ac>
    60a8:	e1904081 	orrs	r4, r0, r1, lsl #1
    60ac:	1affff74 	bne	5e84 <__aeabi_dmul+0x264>
    60b0:	e1925083 	orrs	r5, r2, r3, lsl #1
    60b4:	1affff5e 	bne	5e34 <__aeabi_dmul+0x214>
    60b8:	eaffff78 	b	5ea0 <__aeabi_dmul+0x280>

000060bc <__gedf2>:
    60bc:	e3e0c000 	mvn	r12, #0
    60c0:	ea000002 	b	60d0 <__cmpdf2+0x4>

000060c4 <__ledf2>:
    60c4:	e3a0c001 	mov	r12, #1
    60c8:	ea000000 	b	60d0 <__cmpdf2+0x4>

000060cc <__cmpdf2>:
    60cc:	e3a0c001 	mov	r12, #1
    60d0:	e52dc004 	push	{r12}		; (str r12, [sp, #-4]!)
    60d4:	e1a0c081 	lsl	r12, r1, #1
    60d8:	e1f0cacc 	mvns	r12, r12, asr #21
    60dc:	e1a0c083 	lsl	r12, r3, #1
    60e0:	11f0cacc 	mvnsne	r12, r12, asr #21
    60e4:	0a00000e 	beq	6124 <__cmpdf2+0x58>
    60e8:	e28dd004 	add	sp, sp, #4
    60ec:	e190c081 	orrs	r12, r0, r1, lsl #1
    60f0:	0192c083 	orrseq	r12, r2, r3, lsl #1
    60f4:	11310003 	teqne	r1, r3
    60f8:	01300002 	teqeq	r0, r2
    60fc:	03a00000 	moveq	r0, #0
    6100:	012fff1e 	bxeq	lr
    6104:	e3700000 	cmn	r0, #0
    6108:	e1310003 	teq	r1, r3
    610c:	51510003 	cmppl	r1, r3
    6110:	01500002 	cmpeq	r0, r2
    6114:	21a00fc3 	asrcs	r0, r3, #31
    6118:	31e00fc3 	mvncc	r0, r3, asr #31
    611c:	e3800001 	orr	r0, r0, #1
    6120:	e12fff1e 	bx	lr
    6124:	e1a0c081 	lsl	r12, r1, #1
    6128:	e1f0cacc 	mvns	r12, r12, asr #21
    612c:	1a000001 	bne	6138 <__cmpdf2+0x6c>
    6130:	e190c601 	orrs	r12, r0, r1, lsl #12
    6134:	1a000004 	bne	614c <__cmpdf2+0x80>
    6138:	e1a0c083 	lsl	r12, r3, #1
    613c:	e1f0cacc 	mvns	r12, r12, asr #21
    6140:	1affffe8 	bne	60e8 <__cmpdf2+0x1c>
    6144:	e192c603 	orrs	r12, r2, r3, lsl #12
    6148:	0affffe6 	beq	60e8 <__cmpdf2+0x1c>
    614c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    6150:	e12fff1e 	bx	lr

00006154 <__aeabi_cdrcmple>:
    6154:	e1a0c000 	mov	r12, r0
    6158:	e1a00002 	mov	r0, r2
    615c:	e1a0200c 	mov	r2, r12
    6160:	e1a0c001 	mov	r12, r1
    6164:	e1a01003 	mov	r1, r3
    6168:	e1a0300c 	mov	r3, r12
    616c:	eaffffff 	b	6170 <__aeabi_cdcmpeq>

00006170 <__aeabi_cdcmpeq>:
    6170:	e92d4001 	push	{r0, lr}
    6174:	ebffffd4 	bl	60cc <__cmpdf2>
    6178:	e3500000 	cmp	r0, #0
    617c:	43700000 	cmnmi	r0, #0
    6180:	e8bd4001 	pop	{r0, lr}
    6184:	e12fff1e 	bx	lr

00006188 <__aeabi_dcmpeq>:
    6188:	e52de008 	str	lr, [sp, #-8]!
    618c:	ebfffff7 	bl	6170 <__aeabi_cdcmpeq>
    6190:	03a00001 	moveq	r0, #1
    6194:	13a00000 	movne	r0, #0
    6198:	e49de008 	ldr	lr, [sp], #8
    619c:	e12fff1e 	bx	lr

000061a0 <__aeabi_dcmplt>:
    61a0:	e52de008 	str	lr, [sp, #-8]!
    61a4:	ebfffff1 	bl	6170 <__aeabi_cdcmpeq>
    61a8:	33a00001 	movcc	r0, #1
    61ac:	23a00000 	movcs	r0, #0
    61b0:	e49de008 	ldr	lr, [sp], #8
    61b4:	e12fff1e 	bx	lr

000061b8 <__aeabi_dcmple>:
    61b8:	e52de008 	str	lr, [sp, #-8]!
    61bc:	ebffffeb 	bl	6170 <__aeabi_cdcmpeq>
    61c0:	93a00001 	movls	r0, #1
    61c4:	83a00000 	movhi	r0, #0
    61c8:	e49de008 	ldr	lr, [sp], #8
    61cc:	e12fff1e 	bx	lr

000061d0 <__aeabi_dcmpge>:
    61d0:	e52de008 	str	lr, [sp, #-8]!
    61d4:	ebffffde 	bl	6154 <__aeabi_cdrcmple>
    61d8:	93a00001 	movls	r0, #1
    61dc:	83a00000 	movhi	r0, #0
    61e0:	e49de008 	ldr	lr, [sp], #8
    61e4:	e12fff1e 	bx	lr

000061e8 <__aeabi_dcmpgt>:
    61e8:	e52de008 	str	lr, [sp, #-8]!
    61ec:	ebffffd8 	bl	6154 <__aeabi_cdrcmple>
    61f0:	33a00001 	movcc	r0, #1
    61f4:	23a00000 	movcs	r0, #0
    61f8:	e49de008 	ldr	lr, [sp], #8
    61fc:	e12fff1e 	bx	lr

00006200 <__aeabi_d2iz>:
    6200:	e1a02081 	lsl	r2, r1, #1
    6204:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    6208:	2a00000c 	bcs	6240 <__aeabi_d2iz+0x40>
    620c:	5a000009 	bpl	6238 <__aeabi_d2iz+0x38>
    6210:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    6214:	e0532ac2 	subs	r2, r3, r2, asr #21
    6218:	9a00000a 	bls	6248 <__aeabi_d2iz+0x48>
    621c:	e1a03581 	lsl	r3, r1, #11
    6220:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    6224:	e1833aa0 	orr	r3, r3, r0, lsr #21
    6228:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    622c:	e1a00233 	lsr	r0, r3, r2
    6230:	12600000 	rsbne	r0, r0, #0
    6234:	e12fff1e 	bx	lr
    6238:	e3a00000 	mov	r0, #0
    623c:	e12fff1e 	bx	lr
    6240:	e1900601 	orrs	r0, r0, r1, lsl #12
    6244:	1a000002 	bne	6254 <__aeabi_d2iz+0x54>
    6248:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
    624c:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    6250:	e12fff1e 	bx	lr
    6254:	e3a00000 	mov	r0, #0
    6258:	e12fff1e 	bx	lr

0000625c <__aeabi_d2f>:
    625c:	e1a02081 	lsl	r2, r1, #1
    6260:	e2523207 	subs	r3, r2, #1879048192	; 0x70000000
    6264:	2253c602 	subscs	r12, r3, #2097152	; 0x200000
    6268:	227cc57f 	rsbscs	r12, r12, #532676608	; 0x1fc00000
    626c:	9a000006 	bls	628c <__aeabi_d2f+0x30>
    6270:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    6274:	e1a02180 	lsl	r2, r0, #3
    6278:	e18c0ea0 	orr	r0, r12, r0, lsr #29
    627c:	e3520102 	cmp	r2, #-2147483648	; 0x80000000
    6280:	e0a00103 	adc	r0, r0, r3, lsl #2
    6284:	03c00001 	biceq	r0, r0, #1
    6288:	e12fff1e 	bx	lr
    628c:	e3110101 	tst	r1, #1073741824	; 0x40000000
    6290:	1a00000f 	bne	62d4 <__aeabi_d2f+0x78>
    6294:	e293262e 	adds	r2, r3, #48234496	; 0x2e00000
    6298:	b2010102 	andlt	r0, r1, #-2147483648	; 0x80000000
    629c:	b12fff1e 	bxlt	lr
    62a0:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    62a4:	e1a02aa2 	lsr	r2, r2, #21
    62a8:	e2622018 	rsb	r2, r2, #24
    62ac:	e262c020 	rsb	r12, r2, #32
    62b0:	e1b03c10 	lsls	r3, r0, r12
    62b4:	e1a00230 	lsr	r0, r0, r2
    62b8:	13800001 	orrne	r0, r0, #1
    62bc:	e1a03581 	lsl	r3, r1, #11
    62c0:	e1a035a3 	lsr	r3, r3, #11
    62c4:	e1800c13 	orr	r0, r0, r3, lsl r12
    62c8:	e1a03233 	lsr	r3, r3, r2
    62cc:	e1a03083 	lsl	r3, r3, #1
    62d0:	eaffffe6 	b	6270 <__aeabi_d2f+0x14>
    62d4:	e1f03ac2 	mvns	r3, r2, asr #21
    62d8:	1a000003 	bne	62ec <__aeabi_d2f+0x90>
    62dc:	e1903601 	orrs	r3, r0, r1, lsl #12
    62e0:	13a0047f 	movne	r0, #2130706432	; 0x7f000000
    62e4:	13800503 	orrne	r0, r0, #12582912	; 0xc00000
    62e8:	112fff1e 	bxne	lr
    62ec:	e2010102 	and	r0, r1, #-2147483648	; 0x80000000
    62f0:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    62f4:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    62f8:	e12fff1e 	bx	lr

000062fc <__aeabi_frsub>:
    62fc:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
    6300:	ea000000 	b	6308 <__addsf3>

00006304 <__aeabi_fsub>:
    6304:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000

00006308 <__addsf3>:
    6308:	e1b02080 	lsls	r2, r0, #1
    630c:	11b03081 	lslsne	r3, r1, #1
    6310:	11320003 	teqne	r2, r3
    6314:	11f0cc42 	mvnsne	r12, r2, asr #24
    6318:	11f0cc43 	mvnsne	r12, r3, asr #24
    631c:	0a000047 	beq	6440 <__addsf3+0x138>
    6320:	e1a02c22 	lsr	r2, r2, #24
    6324:	e0723c23 	rsbs	r3, r2, r3, lsr #24
    6328:	c0822003 	addgt	r2, r2, r3
    632c:	c0201001 	eorgt	r1, r0, r1
    6330:	c0210000 	eorgt	r0, r1, r0
    6334:	c0201001 	eorgt	r1, r0, r1
    6338:	b2633000 	rsblt	r3, r3, #0
    633c:	e3530019 	cmp	r3, #25
    6340:	812fff1e 	bxhi	lr
    6344:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    6348:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    634c:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
    6350:	12600000 	rsbne	r0, r0, #0
    6354:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    6358:	e3811502 	orr	r1, r1, #8388608	; 0x800000
    635c:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
    6360:	12611000 	rsbne	r1, r1, #0
    6364:	e1320003 	teq	r2, r3
    6368:	0a00002e 	beq	6428 <__addsf3+0x120>
    636c:	e2422001 	sub	r2, r2, #1
    6370:	e0900351 	adds	r0, r0, r1, asr r3
    6374:	e2633020 	rsb	r3, r3, #32
    6378:	e1a01311 	lsl	r1, r1, r3
    637c:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    6380:	5a000001 	bpl	638c <__addsf3+0x84>
    6384:	e2711000 	rsbs	r1, r1, #0
    6388:	e2e00000 	rsc	r0, r0, #0
    638c:	e3500502 	cmp	r0, #8388608	; 0x800000
    6390:	3a00000b 	bcc	63c4 <__addsf3+0xbc>
    6394:	e3500401 	cmp	r0, #16777216	; 0x1000000
    6398:	3a000004 	bcc	63b0 <__addsf3+0xa8>
    639c:	e1b000a0 	lsrs	r0, r0, #1
    63a0:	e1a01061 	rrx	r1, r1
    63a4:	e2822001 	add	r2, r2, #1
    63a8:	e35200fe 	cmp	r2, #254	; 0xfe
    63ac:	2a000038 	bcs	6494 <__addsf3+0x18c>
    63b0:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    63b4:	e0a00b82 	adc	r0, r0, r2, lsl #23
    63b8:	03c00001 	biceq	r0, r0, #1
    63bc:	e1800003 	orr	r0, r0, r3
    63c0:	e12fff1e 	bx	lr
    63c4:	e1b01081 	lsls	r1, r1, #1
    63c8:	e0a00000 	adc	r0, r0, r0
    63cc:	e3100502 	tst	r0, #8388608	; 0x800000
    63d0:	e2422001 	sub	r2, r2, #1
    63d4:	1afffff5 	bne	63b0 <__addsf3+0xa8>
    63d8:	e1b0c620 	lsrs	r12, r0, #12
    63dc:	01a00600 	lsleq	r0, r0, #12
    63e0:	0242200c 	subeq	r2, r2, #12
    63e4:	e31008ff 	tst	r0, #16711680	; 0xff0000
    63e8:	01a00400 	lsleq	r0, r0, #8
    63ec:	02422008 	subeq	r2, r2, #8
    63f0:	e310060f 	tst	r0, #15728640	; 0xf00000
    63f4:	01a00200 	lsleq	r0, r0, #4
    63f8:	02422004 	subeq	r2, r2, #4
    63fc:	e3100503 	tst	r0, #12582912	; 0xc00000
    6400:	01a00100 	lsleq	r0, r0, #2
    6404:	02422002 	subeq	r2, r2, #2
    6408:	e3500502 	cmp	r0, #8388608	; 0x800000
    640c:	31a00080 	lslcc	r0, r0, #1
    6410:	e2d22000 	sbcs	r2, r2, #0
    6414:	a0800b82 	addge	r0, r0, r2, lsl #23
    6418:	b2622000 	rsblt	r2, r2, #0
    641c:	a1800003 	orrge	r0, r0, r3
    6420:	b1830230 	orrlt	r0, r3, r0, lsr r2
    6424:	e12fff1e 	bx	lr
    6428:	e3320000 	teq	r2, #0
    642c:	e2211502 	eor	r1, r1, #8388608	; 0x800000
    6430:	02200502 	eoreq	r0, r0, #8388608	; 0x800000
    6434:	02822001 	addeq	r2, r2, #1
    6438:	12433001 	subne	r3, r3, #1
    643c:	eaffffca 	b	636c <__addsf3+0x64>
    6440:	e1a03081 	lsl	r3, r1, #1
    6444:	e1f0cc42 	mvns	r12, r2, asr #24
    6448:	11f0cc43 	mvnsne	r12, r3, asr #24
    644c:	0a000013 	beq	64a0 <__addsf3+0x198>
    6450:	e1320003 	teq	r2, r3
    6454:	0a000002 	beq	6464 <__addsf3+0x15c>
    6458:	e3320000 	teq	r2, #0
    645c:	01a00001 	moveq	r0, r1
    6460:	e12fff1e 	bx	lr
    6464:	e1300001 	teq	r0, r1
    6468:	13a00000 	movne	r0, #0
    646c:	112fff1e 	bxne	lr
    6470:	e31204ff 	tst	r2, #-16777216	; 0xff000000
    6474:	1a000002 	bne	6484 <__addsf3+0x17c>
    6478:	e1b00080 	lsls	r0, r0, #1
    647c:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
    6480:	e12fff1e 	bx	lr
    6484:	e2922402 	adds	r2, r2, #33554432	; 0x2000000
    6488:	32800502 	addcc	r0, r0, #8388608	; 0x800000
    648c:	312fff1e 	bxcc	lr
    6490:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    6494:	e383047f 	orr	r0, r3, #2130706432	; 0x7f000000
    6498:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    649c:	e12fff1e 	bx	lr
    64a0:	e1f02c42 	mvns	r2, r2, asr #24
    64a4:	11a00001 	movne	r0, r1
    64a8:	01f03c43 	mvnseq	r3, r3, asr #24
    64ac:	11a01000 	movne	r1, r0
    64b0:	e1b02480 	lsls	r2, r0, #9
    64b4:	01b03481 	lslseq	r3, r1, #9
    64b8:	01300001 	teqeq	r0, r1
    64bc:	13800501 	orrne	r0, r0, #4194304	; 0x400000
    64c0:	e12fff1e 	bx	lr

000064c4 <__aeabi_ui2f>:
    64c4:	e3a03000 	mov	r3, #0
    64c8:	ea000001 	b	64d4 <__aeabi_i2f+0x8>

000064cc <__aeabi_i2f>:
    64cc:	e2103102 	ands	r3, r0, #-2147483648	; 0x80000000
    64d0:	42600000 	rsbmi	r0, r0, #0
    64d4:	e1b0c000 	movs	r12, r0
    64d8:	012fff1e 	bxeq	lr
    64dc:	e383344b 	orr	r3, r3, #1258291200	; 0x4b000000
    64e0:	e1a01000 	mov	r1, r0
    64e4:	e3a00000 	mov	r0, #0
    64e8:	ea00000f 	b	652c <__aeabi_l2f+0x30>

000064ec <__aeabi_ul2f>:
    64ec:	e1902001 	orrs	r2, r0, r1
    64f0:	012fff1e 	bxeq	lr
    64f4:	e3a03000 	mov	r3, #0
    64f8:	ea000005 	b	6514 <__aeabi_l2f+0x18>

000064fc <__aeabi_l2f>:
    64fc:	e1902001 	orrs	r2, r0, r1
    6500:	012fff1e 	bxeq	lr
    6504:	e2113102 	ands	r3, r1, #-2147483648	; 0x80000000
    6508:	5a000001 	bpl	6514 <__aeabi_l2f+0x18>
    650c:	e2700000 	rsbs	r0, r0, #0
    6510:	e2e11000 	rsc	r1, r1, #0
    6514:	e1b0c001 	movs	r12, r1
    6518:	01a0c000 	moveq	r12, r0
    651c:	01a01000 	moveq	r1, r0
    6520:	03a00000 	moveq	r0, #0
    6524:	e383345b 	orr	r3, r3, #1526726656	; 0x5b000000
    6528:	02433201 	subeq	r3, r3, #268435456	; 0x10000000
    652c:	e2433502 	sub	r3, r3, #8388608	; 0x800000
    6530:	e3a02017 	mov	r2, #23
    6534:	e35c0801 	cmp	r12, #65536	; 0x10000
    6538:	21a0c82c 	lsrcs	r12, r12, #16
    653c:	22422010 	subcs	r2, r2, #16
    6540:	e35c0c01 	cmp	r12, #256	; 0x100
    6544:	21a0c42c 	lsrcs	r12, r12, #8
    6548:	22422008 	subcs	r2, r2, #8
    654c:	e35c0010 	cmp	r12, #16
    6550:	21a0c22c 	lsrcs	r12, r12, #4
    6554:	22422004 	subcs	r2, r2, #4
    6558:	e35c0004 	cmp	r12, #4
    655c:	22422002 	subcs	r2, r2, #2
    6560:	304220ac 	subcc	r2, r2, r12, lsr #1
    6564:	e05221ac 	subs	r2, r2, r12, lsr #3
    6568:	e0433b82 	sub	r3, r3, r2, lsl #23
    656c:	ba000006 	blt	658c <__aeabi_l2f+0x90>
    6570:	e0833211 	add	r3, r3, r1, lsl r2
    6574:	e1a0c210 	lsl	r12, r0, r2
    6578:	e2622020 	rsb	r2, r2, #32
    657c:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    6580:	e0a30230 	adc	r0, r3, r0, lsr r2
    6584:	03c00001 	biceq	r0, r0, #1
    6588:	e12fff1e 	bx	lr
    658c:	e2822020 	add	r2, r2, #32
    6590:	e1a0c211 	lsl	r12, r1, r2
    6594:	e2622020 	rsb	r2, r2, #32
    6598:	e190008c 	orrs	r0, r0, r12, lsl #1
    659c:	e0a30231 	adc	r0, r3, r1, lsr r2
    65a0:	01c00fac 	biceq	r0, r0, r12, lsr #31
    65a4:	e12fff1e 	bx	lr

000065a8 <__aeabi_fmul>:
    65a8:	e3a0c0ff 	mov	r12, #255	; 0xff
    65ac:	e01c2ba0 	ands	r2, r12, r0, lsr #23
    65b0:	101c3ba1 	andsne	r3, r12, r1, lsr #23
    65b4:	1132000c 	teqne	r2, r12
    65b8:	1133000c 	teqne	r3, r12
    65bc:	0a00003e 	beq	66bc <__aeabi_fmul+0x114>
    65c0:	e0822003 	add	r2, r2, r3
    65c4:	e020c001 	eor	r12, r0, r1
    65c8:	e1b00480 	lsls	r0, r0, #9
    65cc:	11b01481 	lslsne	r1, r1, #9
    65d0:	0a000010 	beq	6618 <__aeabi_fmul+0x70>
    65d4:	e3a03302 	mov	r3, #134217728	; 0x8000000
    65d8:	e18302a0 	orr	r0, r3, r0, lsr #5
    65dc:	e18312a1 	orr	r1, r3, r1, lsr #5
    65e0:	e0813190 	umull	r3, r1, r0, r1
    65e4:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    65e8:	e3510502 	cmp	r1, #8388608	; 0x800000
    65ec:	31a01081 	lslcc	r1, r1, #1
    65f0:	31811fa3 	orrcc	r1, r1, r3, lsr #31
    65f4:	31a03083 	lslcc	r3, r3, #1
    65f8:	e1800001 	orr	r0, r0, r1
    65fc:	e2c2207f 	sbc	r2, r2, #127	; 0x7f
    6600:	e35200fd 	cmp	r2, #253	; 0xfd
    6604:	8a00000f 	bhi	6648 <__aeabi_fmul+0xa0>
    6608:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    660c:	e0a00b82 	adc	r0, r0, r2, lsl #23
    6610:	03c00001 	biceq	r0, r0, #1
    6614:	e12fff1e 	bx	lr
    6618:	e3300000 	teq	r0, #0
    661c:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    6620:	01a01481 	lsleq	r1, r1, #9
    6624:	e18c04a0 	orr	r0, r12, r0, lsr #9
    6628:	e18004a1 	orr	r0, r0, r1, lsr #9
    662c:	e252207f 	subs	r2, r2, #127	; 0x7f
    6630:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    6634:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    6638:	c12fff1e 	bxgt	lr
    663c:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    6640:	e3a03000 	mov	r3, #0
    6644:	e2522001 	subs	r2, r2, #1
    6648:	ca000035 	bgt	6724 <__aeabi_fmul+0x17c>
    664c:	e3720019 	cmn	r2, #25
    6650:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
    6654:	d12fff1e 	bxle	lr
    6658:	e2622000 	rsb	r2, r2, #0
    665c:	e1b01080 	lsls	r1, r0, #1
    6660:	e1a01231 	lsr	r1, r1, r2
    6664:	e2622020 	rsb	r2, r2, #32
    6668:	e1a0c210 	lsl	r12, r0, r2
    666c:	e1b00061 	rrxs	r0, r1
    6670:	e2a00000 	adc	r0, r0, #0
    6674:	e193308c 	orrs	r3, r3, r12, lsl #1
    6678:	01c00fac 	biceq	r0, r0, r12, lsr #31
    667c:	e12fff1e 	bx	lr
    6680:	e3320000 	teq	r2, #0
    6684:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    6688:	01a00080 	lsleq	r0, r0, #1
    668c:	03100502 	tsteq	r0, #8388608	; 0x800000
    6690:	02422001 	subeq	r2, r2, #1
    6694:	0afffffb 	beq	6688 <__aeabi_fmul+0xe0>
    6698:	e180000c 	orr	r0, r0, r12
    669c:	e3330000 	teq	r3, #0
    66a0:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    66a4:	01a01081 	lsleq	r1, r1, #1
    66a8:	03110502 	tsteq	r1, #8388608	; 0x800000
    66ac:	02433001 	subeq	r3, r3, #1
    66b0:	0afffffb 	beq	66a4 <__aeabi_fmul+0xfc>
    66b4:	e181100c 	orr	r1, r1, r12
    66b8:	eaffffc0 	b	65c0 <__aeabi_fmul+0x18>
    66bc:	e00c3ba1 	and	r3, r12, r1, lsr #23
    66c0:	e132000c 	teq	r2, r12
    66c4:	1133000c 	teqne	r3, r12
    66c8:	0a000005 	beq	66e4 <__aeabi_fmul+0x13c>
    66cc:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    66d0:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    66d4:	1affffe9 	bne	6680 <__aeabi_fmul+0xd8>
    66d8:	e0200001 	eor	r0, r0, r1
    66dc:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    66e0:	e12fff1e 	bx	lr
    66e4:	e3300000 	teq	r0, #0
    66e8:	13300102 	teqne	r0, #-2147483648	; 0x80000000
    66ec:	01a00001 	moveq	r0, r1
    66f0:	13310000 	teqne	r1, #0
    66f4:	13310102 	teqne	r1, #-2147483648	; 0x80000000
    66f8:	0a00000d 	beq	6734 <__aeabi_fmul+0x18c>
    66fc:	e132000c 	teq	r2, r12
    6700:	1a000001 	bne	670c <__aeabi_fmul+0x164>
    6704:	e1b02480 	lsls	r2, r0, #9
    6708:	1a000009 	bne	6734 <__aeabi_fmul+0x18c>
    670c:	e133000c 	teq	r3, r12
    6710:	1a000002 	bne	6720 <__aeabi_fmul+0x178>
    6714:	e1b03481 	lsls	r3, r1, #9
    6718:	11a00001 	movne	r0, r1
    671c:	1a000004 	bne	6734 <__aeabi_fmul+0x18c>
    6720:	e0200001 	eor	r0, r0, r1
    6724:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    6728:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    672c:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    6730:	e12fff1e 	bx	lr
    6734:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    6738:	e3800503 	orr	r0, r0, #12582912	; 0xc00000
    673c:	e12fff1e 	bx	lr

00006740 <__aeabi_fdiv>:
    6740:	e3a0c0ff 	mov	r12, #255	; 0xff
    6744:	e01c2ba0 	ands	r2, r12, r0, lsr #23
    6748:	101c3ba1 	andsne	r3, r12, r1, lsr #23
    674c:	1132000c 	teqne	r2, r12
    6750:	1133000c 	teqne	r3, r12
    6754:	0a00003a 	beq	6844 <__aeabi_fdiv+0x104>
    6758:	e0422003 	sub	r2, r2, r3
    675c:	e020c001 	eor	r12, r0, r1
    6760:	e1b01481 	lsls	r1, r1, #9
    6764:	e1a00480 	lsl	r0, r0, #9
    6768:	0a00001c 	beq	67e0 <__aeabi_fdiv+0xa0>
    676c:	e3a03201 	mov	r3, #268435456	; 0x10000000
    6770:	e1831221 	orr	r1, r3, r1, lsr #4
    6774:	e1833220 	orr	r3, r3, r0, lsr #4
    6778:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    677c:	e1530001 	cmp	r3, r1
    6780:	31a03083 	lslcc	r3, r3, #1
    6784:	e2a2207d 	adc	r2, r2, #125	; 0x7d
    6788:	e3a0c502 	mov	r12, #8388608	; 0x800000
    678c:	e1530001 	cmp	r3, r1
    6790:	20433001 	subcs	r3, r3, r1
    6794:	2180000c 	orrcs	r0, r0, r12
    6798:	e15300a1 	cmp	r3, r1, lsr #1
    679c:	204330a1 	subcs	r3, r3, r1, lsr #1
    67a0:	218000ac 	orrcs	r0, r0, r12, lsr #1
    67a4:	e1530121 	cmp	r3, r1, lsr #2
    67a8:	20433121 	subcs	r3, r3, r1, lsr #2
    67ac:	2180012c 	orrcs	r0, r0, r12, lsr #2
    67b0:	e15301a1 	cmp	r3, r1, lsr #3
    67b4:	204331a1 	subcs	r3, r3, r1, lsr #3
    67b8:	218001ac 	orrcs	r0, r0, r12, lsr #3
    67bc:	e1b03203 	lsls	r3, r3, #4
    67c0:	11b0c22c 	lsrsne	r12, r12, #4
    67c4:	1afffff0 	bne	678c <__aeabi_fdiv+0x4c>
    67c8:	e35200fd 	cmp	r2, #253	; 0xfd
    67cc:	8affff9d 	bhi	6648 <__aeabi_fmul+0xa0>
    67d0:	e1530001 	cmp	r3, r1
    67d4:	e0a00b82 	adc	r0, r0, r2, lsl #23
    67d8:	03c00001 	biceq	r0, r0, #1
    67dc:	e12fff1e 	bx	lr
    67e0:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    67e4:	e18c04a0 	orr	r0, r12, r0, lsr #9
    67e8:	e292207f 	adds	r2, r2, #127	; 0x7f
    67ec:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    67f0:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    67f4:	c12fff1e 	bxgt	lr
    67f8:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    67fc:	e3a03000 	mov	r3, #0
    6800:	e2522001 	subs	r2, r2, #1
    6804:	eaffff8f 	b	6648 <__aeabi_fmul+0xa0>
    6808:	e3320000 	teq	r2, #0
    680c:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    6810:	01a00080 	lsleq	r0, r0, #1
    6814:	03100502 	tsteq	r0, #8388608	; 0x800000
    6818:	02422001 	subeq	r2, r2, #1
    681c:	0afffffb 	beq	6810 <__aeabi_fdiv+0xd0>
    6820:	e180000c 	orr	r0, r0, r12
    6824:	e3330000 	teq	r3, #0
    6828:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    682c:	01a01081 	lsleq	r1, r1, #1
    6830:	03110502 	tsteq	r1, #8388608	; 0x800000
    6834:	02433001 	subeq	r3, r3, #1
    6838:	0afffffb 	beq	682c <__aeabi_fdiv+0xec>
    683c:	e181100c 	orr	r1, r1, r12
    6840:	eaffffc4 	b	6758 <__aeabi_fdiv+0x18>
    6844:	e00c3ba1 	and	r3, r12, r1, lsr #23
    6848:	e132000c 	teq	r2, r12
    684c:	1a000005 	bne	6868 <__aeabi_fdiv+0x128>
    6850:	e1b02480 	lsls	r2, r0, #9
    6854:	1affffb6 	bne	6734 <__aeabi_fmul+0x18c>
    6858:	e133000c 	teq	r3, r12
    685c:	1affffaf 	bne	6720 <__aeabi_fmul+0x178>
    6860:	e1a00001 	mov	r0, r1
    6864:	eaffffb2 	b	6734 <__aeabi_fmul+0x18c>
    6868:	e133000c 	teq	r3, r12
    686c:	1a000003 	bne	6880 <__aeabi_fdiv+0x140>
    6870:	e1b03481 	lsls	r3, r1, #9
    6874:	0affff97 	beq	66d8 <__aeabi_fmul+0x130>
    6878:	e1a00001 	mov	r0, r1
    687c:	eaffffac 	b	6734 <__aeabi_fmul+0x18c>
    6880:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    6884:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    6888:	1affffde 	bne	6808 <__aeabi_fdiv+0xc8>
    688c:	e3d02102 	bics	r2, r0, #-2147483648	; 0x80000000
    6890:	1affffa2 	bne	6720 <__aeabi_fmul+0x178>
    6894:	e3d13102 	bics	r3, r1, #-2147483648	; 0x80000000
    6898:	1affff8e 	bne	66d8 <__aeabi_fmul+0x130>
    689c:	eaffffa4 	b	6734 <__aeabi_fmul+0x18c>

000068a0 <__gesf2>:
    68a0:	e3e0c000 	mvn	r12, #0
    68a4:	ea000002 	b	68b4 <__cmpsf2+0x4>

000068a8 <__lesf2>:
    68a8:	e3a0c001 	mov	r12, #1
    68ac:	ea000000 	b	68b4 <__cmpsf2+0x4>

000068b0 <__cmpsf2>:
    68b0:	e3a0c001 	mov	r12, #1
    68b4:	e52dc004 	push	{r12}		; (str r12, [sp, #-4]!)
    68b8:	e1a02080 	lsl	r2, r0, #1
    68bc:	e1a03081 	lsl	r3, r1, #1
    68c0:	e1f0cc42 	mvns	r12, r2, asr #24
    68c4:	11f0cc43 	mvnsne	r12, r3, asr #24
    68c8:	0a000007 	beq	68ec <__cmpsf2+0x3c>
    68cc:	e28dd004 	add	sp, sp, #4
    68d0:	e192c0a3 	orrs	r12, r2, r3, lsr #1
    68d4:	11300001 	teqne	r0, r1
    68d8:	50520003 	subspl	r0, r2, r3
    68dc:	81a00fc1 	asrhi	r0, r1, #31
    68e0:	31e00fc1 	mvncc	r0, r1, asr #31
    68e4:	13800001 	orrne	r0, r0, #1
    68e8:	e12fff1e 	bx	lr
    68ec:	e1f0cc42 	mvns	r12, r2, asr #24
    68f0:	1a000001 	bne	68fc <__cmpsf2+0x4c>
    68f4:	e1b0c480 	lsls	r12, r0, #9
    68f8:	1a000003 	bne	690c <__cmpsf2+0x5c>
    68fc:	e1f0cc43 	mvns	r12, r3, asr #24
    6900:	1afffff1 	bne	68cc <__cmpsf2+0x1c>
    6904:	e1b0c481 	lsls	r12, r1, #9
    6908:	0affffef 	beq	68cc <__cmpsf2+0x1c>
    690c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    6910:	e12fff1e 	bx	lr

00006914 <__aeabi_cfrcmple>:
    6914:	e1a0c000 	mov	r12, r0
    6918:	e1a00001 	mov	r0, r1
    691c:	e1a0100c 	mov	r1, r12
    6920:	eaffffff 	b	6924 <__aeabi_cfcmpeq>

00006924 <__aeabi_cfcmpeq>:
    6924:	e92d400f 	push	{r0, r1, r2, r3, lr}
    6928:	ebffffe0 	bl	68b0 <__cmpsf2>
    692c:	e3500000 	cmp	r0, #0
    6930:	43700000 	cmnmi	r0, #0
    6934:	e8bd400f 	pop	{r0, r1, r2, r3, lr}
    6938:	e12fff1e 	bx	lr

0000693c <__aeabi_fcmpeq>:
    693c:	e52de008 	str	lr, [sp, #-8]!
    6940:	ebfffff7 	bl	6924 <__aeabi_cfcmpeq>
    6944:	03a00001 	moveq	r0, #1
    6948:	13a00000 	movne	r0, #0
    694c:	e49de008 	ldr	lr, [sp], #8
    6950:	e12fff1e 	bx	lr

00006954 <__aeabi_fcmplt>:
    6954:	e52de008 	str	lr, [sp, #-8]!
    6958:	ebfffff1 	bl	6924 <__aeabi_cfcmpeq>
    695c:	33a00001 	movcc	r0, #1
    6960:	23a00000 	movcs	r0, #0
    6964:	e49de008 	ldr	lr, [sp], #8
    6968:	e12fff1e 	bx	lr

0000696c <__aeabi_fcmple>:
    696c:	e52de008 	str	lr, [sp, #-8]!
    6970:	ebffffeb 	bl	6924 <__aeabi_cfcmpeq>
    6974:	93a00001 	movls	r0, #1
    6978:	83a00000 	movhi	r0, #0
    697c:	e49de008 	ldr	lr, [sp], #8
    6980:	e12fff1e 	bx	lr

00006984 <__aeabi_fcmpge>:
    6984:	e52de008 	str	lr, [sp, #-8]!
    6988:	ebffffe1 	bl	6914 <__aeabi_cfrcmple>
    698c:	93a00001 	movls	r0, #1
    6990:	83a00000 	movhi	r0, #0
    6994:	e49de008 	ldr	lr, [sp], #8
    6998:	e12fff1e 	bx	lr

0000699c <__aeabi_fcmpgt>:
    699c:	e52de008 	str	lr, [sp, #-8]!
    69a0:	ebffffdb 	bl	6914 <__aeabi_cfrcmple>
    69a4:	33a00001 	movcc	r0, #1
    69a8:	23a00000 	movcs	r0, #0
    69ac:	e49de008 	ldr	lr, [sp], #8
    69b0:	e12fff1e 	bx	lr

000069b4 <__aeabi_f2iz>:
    69b4:	e1a02080 	lsl	r2, r0, #1
    69b8:	e352047f 	cmp	r2, #2130706432	; 0x7f000000
    69bc:	3a000008 	bcc	69e4 <__aeabi_f2iz+0x30>
    69c0:	e3a0309e 	mov	r3, #158	; 0x9e
    69c4:	e0532c22 	subs	r2, r3, r2, lsr #24
    69c8:	9a000007 	bls	69ec <__aeabi_f2iz+0x38>
    69cc:	e1a03400 	lsl	r3, r0, #8
    69d0:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    69d4:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    69d8:	e1a00233 	lsr	r0, r3, r2
    69dc:	12600000 	rsbne	r0, r0, #0
    69e0:	e12fff1e 	bx	lr
    69e4:	e3a00000 	mov	r0, #0
    69e8:	e12fff1e 	bx	lr
    69ec:	e3720061 	cmn	r2, #97	; 0x61
    69f0:	1a000001 	bne	69fc <__aeabi_f2iz+0x48>
    69f4:	e1b02480 	lsls	r2, r0, #9
    69f8:	1a000002 	bne	6a08 <__aeabi_f2iz+0x54>
    69fc:	e2100102 	ands	r0, r0, #-2147483648	; 0x80000000
    6a00:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    6a04:	e12fff1e 	bx	lr
    6a08:	e3a00000 	mov	r0, #0
    6a0c:	e12fff1e 	bx	lr

00006a10 <atexit>:
    6a10:	e1a01000 	mov	r1, r0
    6a14:	e3a00000 	mov	r0, #0
    6a18:	e92d4008 	push	{r3, lr}
    6a1c:	e1a02000 	mov	r2, r0
    6a20:	e1a03000 	mov	r3, r0
    6a24:	eb0000de 	bl	6da4 <__register_exitproc>
    6a28:	e8bd4008 	pop	{r3, lr}
    6a2c:	e12fff1e 	bx	lr

00006a30 <__errno>:
    6a30:	e59f3004 	ldr	r3, [pc, #4]	; 6a3c <__errno+0xc>
    6a34:	e5930000 	ldr	r0, [r3]
    6a38:	e12fff1e 	bx	lr
    6a3c:	000532b8 	.word	0x000532b8

00006a40 <exit>:
    6a40:	e92d4008 	push	{r3, lr}
    6a44:	e3a01000 	mov	r1, #0
    6a48:	e1a04000 	mov	r4, r0
    6a4c:	eb000111 	bl	6e98 <__call_exitprocs>
    6a50:	e59f3018 	ldr	r3, [pc, #24]	; 6a70 <exit+0x30>
    6a54:	e5930000 	ldr	r0, [r3]
    6a58:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    6a5c:	e3530000 	cmp	r3, #0
    6a60:	11a0e00f 	movne	lr, pc
    6a64:	112fff13 	bxne	r3
    6a68:	e1a00004 	mov	r0, r4
    6a6c:	eb0004bf 	bl	7d70 <_exit>
    6a70:	00008220 	.word	0x00008220

00006a74 <memcpy>:
    6a74:	e3520003 	cmp	r2, #3
    6a78:	e92d01f0 	push	{r4, r5, r6, r7, r8}
    6a7c:	8a000009 	bhi	6aa8 <memcpy+0x34>
    6a80:	e3520000 	cmp	r2, #0
    6a84:	0a000005 	beq	6aa0 <memcpy+0x2c>
    6a88:	e3a03000 	mov	r3, #0
    6a8c:	e7d1c003 	ldrb	r12, [r1, r3]
    6a90:	e7c0c003 	strb	r12, [r0, r3]
    6a94:	e2833001 	add	r3, r3, #1
    6a98:	e1530002 	cmp	r3, r2
    6a9c:	1afffffa 	bne	6a8c <memcpy+0x18>
    6aa0:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
    6aa4:	e12fff1e 	bx	lr
    6aa8:	e3100003 	tst	r0, #3
    6aac:	e0802002 	add	r2, r0, r2
    6ab0:	0a00000b 	beq	6ae4 <memcpy+0x70>
    6ab4:	e280c001 	add	r12, r0, #1
    6ab8:	e2814001 	add	r4, r1, #1
    6abc:	e20c3003 	and	r3, r12, #3
    6ac0:	e5545001 	ldrb	r5, [r4, #-1]
    6ac4:	e3530000 	cmp	r3, #0
    6ac8:	e1a01004 	mov	r1, r4
    6acc:	e1a0300c 	mov	r3, r12
    6ad0:	e54c5001 	strb	r5, [r12, #-1]
    6ad4:	e2844001 	add	r4, r4, #1
    6ad8:	e28cc001 	add	r12, r12, #1
    6adc:	1afffff6 	bne	6abc <memcpy+0x48>
    6ae0:	ea000000 	b	6ae8 <memcpy+0x74>
    6ae4:	e1a03000 	mov	r3, r0
    6ae8:	e211c003 	ands	r12, r1, #3
    6aec:	1a00004f 	bne	6c30 <memcpy+0x1bc>
    6af0:	e063c002 	rsb	r12, r3, r2
    6af4:	e35c003f 	cmp	r12, #63	; 0x3f
    6af8:	da000024 	ble	6b90 <memcpy+0x11c>
    6afc:	e591c000 	ldr	r12, [r1]
    6b00:	e583c000 	str	r12, [r3]
    6b04:	e591c004 	ldr	r12, [r1, #4]
    6b08:	e583c004 	str	r12, [r3, #4]
    6b0c:	e591c008 	ldr	r12, [r1, #8]
    6b10:	e583c008 	str	r12, [r3, #8]
    6b14:	e591c00c 	ldr	r12, [r1, #12]
    6b18:	e583c00c 	str	r12, [r3, #12]
    6b1c:	e591c010 	ldr	r12, [r1, #16]
    6b20:	e583c010 	str	r12, [r3, #16]
    6b24:	e591c014 	ldr	r12, [r1, #20]
    6b28:	e583c014 	str	r12, [r3, #20]
    6b2c:	e591c018 	ldr	r12, [r1, #24]
    6b30:	e583c018 	str	r12, [r3, #24]
    6b34:	e591c01c 	ldr	r12, [r1, #28]
    6b38:	e583c01c 	str	r12, [r3, #28]
    6b3c:	e591c020 	ldr	r12, [r1, #32]
    6b40:	e583c020 	str	r12, [r3, #32]
    6b44:	e591c024 	ldr	r12, [r1, #36]	; 0x24
    6b48:	e583c024 	str	r12, [r3, #36]	; 0x24
    6b4c:	e591c028 	ldr	r12, [r1, #40]	; 0x28
    6b50:	e583c028 	str	r12, [r3, #40]	; 0x28
    6b54:	e591c02c 	ldr	r12, [r1, #44]	; 0x2c
    6b58:	e583c02c 	str	r12, [r3, #44]	; 0x2c
    6b5c:	e591c030 	ldr	r12, [r1, #48]	; 0x30
    6b60:	e583c030 	str	r12, [r3, #48]	; 0x30
    6b64:	e591c034 	ldr	r12, [r1, #52]	; 0x34
    6b68:	e583c034 	str	r12, [r3, #52]	; 0x34
    6b6c:	e591c038 	ldr	r12, [r1, #56]	; 0x38
    6b70:	e583c038 	str	r12, [r3, #56]	; 0x38
    6b74:	e591c03c 	ldr	r12, [r1, #60]	; 0x3c
    6b78:	e2833040 	add	r3, r3, #64	; 0x40
    6b7c:	e503c004 	str	r12, [r3, #-4]
    6b80:	e063c002 	rsb	r12, r3, r2
    6b84:	e35c003f 	cmp	r12, #63	; 0x3f
    6b88:	e2811040 	add	r1, r1, #64	; 0x40
    6b8c:	caffffda 	bgt	6afc <memcpy+0x88>
    6b90:	e35c000f 	cmp	r12, #15
    6b94:	da00000c 	ble	6bcc <memcpy+0x158>
    6b98:	e591c000 	ldr	r12, [r1]
    6b9c:	e583c000 	str	r12, [r3]
    6ba0:	e591c004 	ldr	r12, [r1, #4]
    6ba4:	e583c004 	str	r12, [r3, #4]
    6ba8:	e591c008 	ldr	r12, [r1, #8]
    6bac:	e583c008 	str	r12, [r3, #8]
    6bb0:	e591c00c 	ldr	r12, [r1, #12]
    6bb4:	e2833010 	add	r3, r3, #16
    6bb8:	e503c004 	str	r12, [r3, #-4]
    6bbc:	e063c002 	rsb	r12, r3, r2
    6bc0:	e35c000f 	cmp	r12, #15
    6bc4:	e2811010 	add	r1, r1, #16
    6bc8:	cafffff2 	bgt	6b98 <memcpy+0x124>
    6bcc:	e35c0003 	cmp	r12, #3
    6bd0:	da00000a 	ble	6c00 <memcpy+0x18c>
    6bd4:	e283c004 	add	r12, r3, #4
    6bd8:	e2814004 	add	r4, r1, #4
    6bdc:	e06c3002 	rsb	r3, r12, r2
    6be0:	e5145004 	ldr	r5, [r4, #-4]
    6be4:	e3530003 	cmp	r3, #3
    6be8:	e1a01004 	mov	r1, r4
    6bec:	e1a0300c 	mov	r3, r12
    6bf0:	e50c5004 	str	r5, [r12, #-4]
    6bf4:	e2844004 	add	r4, r4, #4
    6bf8:	e28cc004 	add	r12, r12, #4
    6bfc:	cafffff6 	bgt	6bdc <memcpy+0x168>
    6c00:	e1520003 	cmp	r2, r3
    6c04:	82833001 	addhi	r3, r3, #1
    6c08:	82811001 	addhi	r1, r1, #1
    6c0c:	82822001 	addhi	r2, r2, #1
    6c10:	9affffa2 	bls	6aa0 <memcpy+0x2c>
    6c14:	e551c001 	ldrb	r12, [r1, #-1]
    6c18:	e2833001 	add	r3, r3, #1
    6c1c:	e1530002 	cmp	r3, r2
    6c20:	e543c002 	strb	r12, [r3, #-2]
    6c24:	e2811001 	add	r1, r1, #1
    6c28:	1afffff9 	bne	6c14 <memcpy+0x1a0>
    6c2c:	eaffff9b 	b	6aa0 <memcpy+0x2c>
    6c30:	e0635002 	rsb	r5, r3, r2
    6c34:	e06c4001 	rsb	r4, r12, r1
    6c38:	e3550003 	cmp	r5, #3
    6c3c:	e5945000 	ldr	r5, [r4]
    6c40:	daffffee 	ble	6c00 <memcpy+0x18c>
    6c44:	e26c6004 	rsb	r6, r12, #4
    6c48:	e1a0718c 	lsl	r7, r12, #3
    6c4c:	e1a06186 	lsl	r6, r6, #3
    6c50:	e283c004 	add	r12, r3, #4
    6c54:	e1a08735 	lsr	r8, r5, r7
    6c58:	e5b45004 	ldr	r5, [r4, #4]!
    6c5c:	e1888615 	orr	r8, r8, r5, lsl r6
    6c60:	e06c3002 	rsb	r3, r12, r2
    6c64:	e3530003 	cmp	r3, #3
    6c68:	e50c8004 	str	r8, [r12, #-4]
    6c6c:	e1a0300c 	mov	r3, r12
    6c70:	e2811004 	add	r1, r1, #4
    6c74:	e28cc004 	add	r12, r12, #4
    6c78:	cafffff5 	bgt	6c54 <memcpy+0x1e0>
    6c7c:	eaffffdf 	b	6c00 <memcpy+0x18c>

00006c80 <srand>:
    6c80:	e59f3010 	ldr	r3, [pc, #16]	; 6c98 <srand+0x18>
    6c84:	e5933000 	ldr	r3, [r3]
    6c88:	e3a02000 	mov	r2, #0
    6c8c:	e58300a8 	str	r0, [r3, #168]	; 0xa8
    6c90:	e58320ac 	str	r2, [r3, #172]	; 0xac
    6c94:	e12fff1e 	bx	lr
    6c98:	000532b8 	.word	0x000532b8

00006c9c <rand>:
    6c9c:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    6ca0:	e59f3044 	ldr	r3, [pc, #68]	; 6cec <rand+0x50>
    6ca4:	e593c000 	ldr	r12, [r3]
    6ca8:	e59f4040 	ldr	r4, [pc, #64]	; 6cf0 <rand+0x54>
    6cac:	e59c20a8 	ldr	r2, [r12, #168]	; 0xa8
    6cb0:	e0040492 	mul	r4, r2, r4
    6cb4:	e59c10ac 	ldr	r1, [r12, #172]	; 0xac
    6cb8:	e59f3034 	ldr	r3, [pc, #52]	; 6cf4 <rand+0x58>
    6cbc:	e0244193 	mla	r4, r3, r1, r4
    6cc0:	e0810392 	umull	r0, r1, r2, r3
    6cc4:	e3a02001 	mov	r2, #1
    6cc8:	e0922000 	adds	r2, r2, r0
    6ccc:	e0841001 	add	r1, r4, r1
    6cd0:	e3a03000 	mov	r3, #0
    6cd4:	e0a33001 	adc	r3, r3, r1
    6cd8:	e58c20a8 	str	r2, [r12, #168]	; 0xa8
    6cdc:	e58c30ac 	str	r3, [r12, #172]	; 0xac
    6ce0:	e3c30102 	bic	r0, r3, #-2147483648	; 0x80000000
    6ce4:	e8bd0010 	ldmfd	sp!, {r4}
    6ce8:	e12fff1e 	bx	lr
    6cec:	000532b8 	.word	0x000532b8
    6cf0:	5851f42d 	.word	0x5851f42d
    6cf4:	4c957f2d 	.word	0x4c957f2d

00006cf8 <strlen>:
    6cf8:	e3c01003 	bic	r1, r0, #3
    6cfc:	e2100003 	ands	r0, r0, #3
    6d00:	e2600000 	rsb	r0, r0, #0
    6d04:	e4913004 	ldr	r3, [r1], #4
    6d08:	e280c004 	add	r12, r0, #4
    6d0c:	e1a0c18c 	lsl	r12, r12, #3
    6d10:	e3e02000 	mvn	r2, #0
    6d14:	11833c32 	orrne	r3, r3, r2, lsr r12
    6d18:	e3a0c001 	mov	r12, #1
    6d1c:	e18cc40c 	orr	r12, r12, r12, lsl #8
    6d20:	e18cc80c 	orr	r12, r12, r12, lsl #16
    6d24:	e043200c 	sub	r2, r3, r12
    6d28:	e1c22003 	bic	r2, r2, r3
    6d2c:	e012238c 	ands	r2, r2, r12, lsl #7
    6d30:	04913004 	ldreq	r3, [r1], #4
    6d34:	02800004 	addeq	r0, r0, #4
    6d38:	0afffff9 	beq	6d24 <strlen+0x2c>
    6d3c:	e31300ff 	tst	r3, #255	; 0xff
    6d40:	12800001 	addne	r0, r0, #1
    6d44:	13130cff 	tstne	r3, #65280	; 0xff00
    6d48:	12800001 	addne	r0, r0, #1
    6d4c:	131308ff 	tstne	r3, #16711680	; 0xff0000
    6d50:	12800001 	addne	r0, r0, #1
    6d54:	e12fff1e 	bx	lr

00006d58 <time>:
    6d58:	e92d4010 	push	{r4, lr}
    6d5c:	e59f303c 	ldr	r3, [pc, #60]	; 6da0 <time+0x48>
    6d60:	e24dd008 	sub	sp, sp, #8
    6d64:	e1a04000 	mov	r4, r0
    6d68:	e1a0100d 	mov	r1, sp
    6d6c:	e5930000 	ldr	r0, [r3]
    6d70:	e3a02000 	mov	r2, #0
    6d74:	eb0000c0 	bl	707c <_gettimeofday_r>
    6d78:	e3500000 	cmp	r0, #0
    6d7c:	ba000005 	blt	6d98 <time+0x40>
    6d80:	e59d0000 	ldr	r0, [sp]
    6d84:	e3540000 	cmp	r4, #0
    6d88:	15840000 	strne	r0, [r4]
    6d8c:	e28dd008 	add	sp, sp, #8
    6d90:	e8bd4010 	pop	{r4, lr}
    6d94:	e12fff1e 	bx	lr
    6d98:	e3e00000 	mvn	r0, #0
    6d9c:	eafffffa 	b	6d8c <time+0x34>
    6da0:	000532b8 	.word	0x000532b8

00006da4 <__register_exitproc>:
    6da4:	e59fc0e4 	ldr	r12, [pc, #228]	; 6e90 <__register_exitproc+0xec>
    6da8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    6dac:	e59c4000 	ldr	r4, [r12]
    6db0:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    6db4:	e35c0000 	cmp	r12, #0
    6db8:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    6dbc:	e59c5004 	ldr	r5, [r12, #4]
    6dc0:	0584c148 	streq	r12, [r4, #328]	; 0x148
    6dc4:	e355001f 	cmp	r5, #31
    6dc8:	e24dd010 	sub	sp, sp, #16
    6dcc:	e1a06000 	mov	r6, r0
    6dd0:	da000015 	ble	6e2c <__register_exitproc+0x88>
    6dd4:	e59f00b8 	ldr	r0, [pc, #184]	; 6e94 <__register_exitproc+0xf0>
    6dd8:	e3500000 	cmp	r0, #0
    6ddc:	1a000001 	bne	6de8 <__register_exitproc+0x44>
    6de0:	e3e00000 	mvn	r0, #0
    6de4:	ea000018 	b	6e4c <__register_exitproc+0xa8>
    6de8:	e3a00e19 	mov	r0, #400	; 0x190
    6dec:	e58d100c 	str	r1, [sp, #12]
    6df0:	e58d2008 	str	r2, [sp, #8]
    6df4:	e58d3004 	str	r3, [sp, #4]
    6df8:	e320f000 	nop	{0}
    6dfc:	e250c000 	subs	r12, r0, #0
    6e00:	e59d100c 	ldr	r1, [sp, #12]
    6e04:	e59d2008 	ldr	r2, [sp, #8]
    6e08:	e59d3004 	ldr	r3, [sp, #4]
    6e0c:	0afffff3 	beq	6de0 <__register_exitproc+0x3c>
    6e10:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    6e14:	e3a00000 	mov	r0, #0
    6e18:	e58c0004 	str	r0, [r12, #4]
    6e1c:	e58c5000 	str	r5, [r12]
    6e20:	e584c148 	str	r12, [r4, #328]	; 0x148
    6e24:	e58c0188 	str	r0, [r12, #392]	; 0x188
    6e28:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    6e2c:	e3560000 	cmp	r6, #0
    6e30:	e59c4004 	ldr	r4, [r12, #4]
    6e34:	1a000007 	bne	6e58 <__register_exitproc+0xb4>
    6e38:	e2843002 	add	r3, r4, #2
    6e3c:	e2844001 	add	r4, r4, #1
    6e40:	e78c1103 	str	r1, [r12, r3, lsl #2]
    6e44:	e58c4004 	str	r4, [r12, #4]
    6e48:	e3a00000 	mov	r0, #0
    6e4c:	e28dd010 	add	sp, sp, #16
    6e50:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    6e54:	e12fff1e 	bx	lr
    6e58:	e3a00001 	mov	r0, #1
    6e5c:	e1a00410 	lsl	r0, r0, r4
    6e60:	e08c8104 	add	r8, r12, r4, lsl #2
    6e64:	e3560002 	cmp	r6, #2
    6e68:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    6e6c:	e5883108 	str	r3, [r8, #264]	; 0x108
    6e70:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    6e74:	e1877000 	orr	r7, r7, r0
    6e78:	01830000 	orreq	r0, r3, r0
    6e7c:	e1a05008 	mov	r5, r8
    6e80:	e5882088 	str	r2, [r8, #136]	; 0x88
    6e84:	e58c7188 	str	r7, [r12, #392]	; 0x188
    6e88:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    6e8c:	eaffffe9 	b	6e38 <__register_exitproc+0x94>
    6e90:	00008220 	.word	0x00008220
    6e94:	00000000 	.word	0x00000000

00006e98 <__call_exitprocs>:
    6e98:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    6e9c:	e59f3168 	ldr	r3, [pc, #360]	; 700c <__call_exitprocs+0x174>
    6ea0:	e5933000 	ldr	r3, [r3]
    6ea4:	e24dd014 	sub	sp, sp, #20
    6ea8:	e58d3004 	str	r3, [sp, #4]
    6eac:	e2833f52 	add	r3, r3, #328	; 0x148
    6eb0:	e58d0008 	str	r0, [sp, #8]
    6eb4:	e58d300c 	str	r3, [sp, #12]
    6eb8:	e1a07001 	mov	r7, r1
    6ebc:	e3a08001 	mov	r8, #1
    6ec0:	e59d3004 	ldr	r3, [sp, #4]
    6ec4:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    6ec8:	e3560000 	cmp	r6, #0
    6ecc:	e59db00c 	ldr	r11, [sp, #12]
    6ed0:	0a000033 	beq	6fa4 <__call_exitprocs+0x10c>
    6ed4:	e5965004 	ldr	r5, [r6, #4]
    6ed8:	e2554001 	subs	r4, r5, #1
    6edc:	5286a088 	addpl	r10, r6, #136	; 0x88
    6ee0:	5285501f 	addpl	r5, r5, #31
    6ee4:	508a5105 	addpl	r5, r10, r5, lsl #2
    6ee8:	5a000007 	bpl	6f0c <__call_exitprocs+0x74>
    6eec:	ea000029 	b	6f98 <__call_exitprocs+0x100>
    6ef0:	e5953000 	ldr	r3, [r5]
    6ef4:	e1530007 	cmp	r3, r7
    6ef8:	0a000005 	beq	6f14 <__call_exitprocs+0x7c>
    6efc:	e2444001 	sub	r4, r4, #1
    6f00:	e3740001 	cmn	r4, #1
    6f04:	e2455004 	sub	r5, r5, #4
    6f08:	0a000022 	beq	6f98 <__call_exitprocs+0x100>
    6f0c:	e3570000 	cmp	r7, #0
    6f10:	1afffff6 	bne	6ef0 <__call_exitprocs+0x58>
    6f14:	e5963004 	ldr	r3, [r6, #4]
    6f18:	e06a2005 	rsb	r2, r10, r5
    6f1c:	e2433001 	sub	r3, r3, #1
    6f20:	e0862002 	add	r2, r6, r2
    6f24:	e1530004 	cmp	r3, r4
    6f28:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    6f2c:	13a01000 	movne	r1, #0
    6f30:	05864004 	streq	r4, [r6, #4]
    6f34:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    6f38:	e3530000 	cmp	r3, #0
    6f3c:	0affffee 	beq	6efc <__call_exitprocs+0x64>
    6f40:	e1a02418 	lsl	r2, r8, r4
    6f44:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    6f48:	e1120001 	tst	r2, r1
    6f4c:	e5969004 	ldr	r9, [r6, #4]
    6f50:	0a000016 	beq	6fb0 <__call_exitprocs+0x118>
    6f54:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    6f58:	e1120001 	tst	r2, r1
    6f5c:	1a000016 	bne	6fbc <__call_exitprocs+0x124>
    6f60:	e59d0008 	ldr	r0, [sp, #8]
    6f64:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    6f68:	e1a0e00f 	mov	lr, pc
    6f6c:	e12fff13 	bx	r3
    6f70:	e5963004 	ldr	r3, [r6, #4]
    6f74:	e1530009 	cmp	r3, r9
    6f78:	1affffd0 	bne	6ec0 <__call_exitprocs+0x28>
    6f7c:	e59b3000 	ldr	r3, [r11]
    6f80:	e1530006 	cmp	r3, r6
    6f84:	1affffcd 	bne	6ec0 <__call_exitprocs+0x28>
    6f88:	e2444001 	sub	r4, r4, #1
    6f8c:	e3740001 	cmn	r4, #1
    6f90:	e2455004 	sub	r5, r5, #4
    6f94:	1affffdc 	bne	6f0c <__call_exitprocs+0x74>
    6f98:	e59f1070 	ldr	r1, [pc, #112]	; 7010 <__call_exitprocs+0x178>
    6f9c:	e3510000 	cmp	r1, #0
    6fa0:	1a000009 	bne	6fcc <__call_exitprocs+0x134>
    6fa4:	e28dd014 	add	sp, sp, #20
    6fa8:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    6fac:	e12fff1e 	bx	lr
    6fb0:	e1a0e00f 	mov	lr, pc
    6fb4:	e12fff13 	bx	r3
    6fb8:	eaffffec 	b	6f70 <__call_exitprocs+0xd8>
    6fbc:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    6fc0:	e1a0e00f 	mov	lr, pc
    6fc4:	e12fff13 	bx	r3
    6fc8:	eaffffe8 	b	6f70 <__call_exitprocs+0xd8>
    6fcc:	e5963004 	ldr	r3, [r6, #4]
    6fd0:	e3530000 	cmp	r3, #0
    6fd4:	e5963000 	ldr	r3, [r6]
    6fd8:	1a000008 	bne	7000 <__call_exitprocs+0x168>
    6fdc:	e3530000 	cmp	r3, #0
    6fe0:	0a000006 	beq	7000 <__call_exitprocs+0x168>
    6fe4:	e1a00006 	mov	r0, r6
    6fe8:	e58b3000 	str	r3, [r11]
    6fec:	e320f000 	nop	{0}
    6ff0:	e59b6000 	ldr	r6, [r11]
    6ff4:	e3560000 	cmp	r6, #0
    6ff8:	1affffb5 	bne	6ed4 <__call_exitprocs+0x3c>
    6ffc:	eaffffe8 	b	6fa4 <__call_exitprocs+0x10c>
    7000:	e1a0b006 	mov	r11, r6
    7004:	e1a06003 	mov	r6, r3
    7008:	eafffff9 	b	6ff4 <__call_exitprocs+0x15c>
    700c:	00008220 	.word	0x00008220
    7010:	00000000 	.word	0x00000000

00007014 <register_fini>:
    7014:	e92d4008 	push	{r3, lr}
    7018:	e59f3010 	ldr	r3, [pc, #16]	; 7030 <register_fini+0x1c>
    701c:	e3530000 	cmp	r3, #0
    7020:	159f000c 	ldrne	r0, [pc, #12]	; 7034 <register_fini+0x20>
    7024:	1bfffe79 	blne	6a10 <atexit>
    7028:	e8bd4008 	pop	{r3, lr}
    702c:	e12fff1e 	bx	lr
    7030:	00008248 	.word	0x00008248
    7034:	00007038 	.word	0x00007038

00007038 <__libc_fini_array>:
    7038:	e92d4038 	push	{r3, r4, r5, lr}
    703c:	e59f5030 	ldr	r5, [pc, #48]	; 7074 <__libc_fini_array+0x3c>
    7040:	e59f4030 	ldr	r4, [pc, #48]	; 7078 <__libc_fini_array+0x40>
    7044:	e0654004 	rsb	r4, r5, r4
    7048:	e1b04144 	asrs	r4, r4, #2
    704c:	10855104 	addne	r5, r5, r4, lsl #2
    7050:	0a000004 	beq	7068 <__libc_fini_array+0x30>
    7054:	e5353004 	ldr	r3, [r5, #-4]!
    7058:	e1a0e00f 	mov	lr, pc
    705c:	e12fff13 	bx	r3
    7060:	e2544001 	subs	r4, r4, #1
    7064:	1afffffa 	bne	7054 <__libc_fini_array+0x1c>
    7068:	eb000476 	bl	8248 <__libc_fini>
    706c:	e8bd4038 	pop	{r3, r4, r5, lr}
    7070:	e12fff1e 	bx	lr
    7074:	00008260 	.word	0x00008260
    7078:	00008264 	.word	0x00008264

0000707c <_gettimeofday_r>:
    707c:	e92d4038 	push	{r3, r4, r5, lr}
    7080:	e59f4030 	ldr	r4, [pc, #48]	; 70b8 <_gettimeofday_r+0x3c>
    7084:	e3a03000 	mov	r3, #0
    7088:	e1a05000 	mov	r5, r0
    708c:	e1a00001 	mov	r0, r1
    7090:	e1a01002 	mov	r1, r2
    7094:	e5843000 	str	r3, [r4]
    7098:	eb00033a 	bl	7d88 <_gettimeofday>
    709c:	e3700001 	cmn	r0, #1
    70a0:	1a000002 	bne	70b0 <_gettimeofday_r+0x34>
    70a4:	e5943000 	ldr	r3, [r4]
    70a8:	e3530000 	cmp	r3, #0
    70ac:	15853000 	strne	r3, [r5]
    70b0:	e8bd4038 	pop	{r3, r4, r5, lr}
    70b4:	e12fff1e 	bx	lr
    70b8:	00053e88 	.word	0x00053e88

000070bc <cleanup_glue>:
    70bc:	e92d4038 	push	{r3, r4, r5, lr}
    70c0:	e1a04001 	mov	r4, r1
    70c4:	e5911000 	ldr	r1, [r1]
    70c8:	e3510000 	cmp	r1, #0
    70cc:	e1a05000 	mov	r5, r0
    70d0:	1bfffff9 	blne	70bc <cleanup_glue>
    70d4:	e1a00005 	mov	r0, r5
    70d8:	e1a01004 	mov	r1, r4
    70dc:	eb00009c 	bl	7354 <_free_r>
    70e0:	e8bd4038 	pop	{r3, r4, r5, lr}
    70e4:	e12fff1e 	bx	lr

000070e8 <_reclaim_reent>:
    70e8:	e59f30f0 	ldr	r3, [pc, #240]	; 71e0 <_reclaim_reent+0xf8>
    70ec:	e5933000 	ldr	r3, [r3]
    70f0:	e1500003 	cmp	r0, r3
    70f4:	e92d4070 	push	{r4, r5, r6, lr}
    70f8:	e1a05000 	mov	r5, r0
    70fc:	0a00002b 	beq	71b0 <_reclaim_reent+0xc8>
    7100:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
    7104:	e3520000 	cmp	r2, #0
    7108:	0a000011 	beq	7154 <_reclaim_reent+0x6c>
    710c:	e3a03000 	mov	r3, #0
    7110:	e1a06003 	mov	r6, r3
    7114:	e7921103 	ldr	r1, [r2, r3, lsl #2]
    7118:	e3510000 	cmp	r1, #0
    711c:	0a000005 	beq	7138 <_reclaim_reent+0x50>
    7120:	e5914000 	ldr	r4, [r1]
    7124:	e1a00005 	mov	r0, r5
    7128:	eb000089 	bl	7354 <_free_r>
    712c:	e2541000 	subs	r1, r4, #0
    7130:	1afffffa 	bne	7120 <_reclaim_reent+0x38>
    7134:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
    7138:	e2866001 	add	r6, r6, #1
    713c:	e3560020 	cmp	r6, #32
    7140:	e1a03006 	mov	r3, r6
    7144:	1afffff2 	bne	7114 <_reclaim_reent+0x2c>
    7148:	e1a00005 	mov	r0, r5
    714c:	e1a01002 	mov	r1, r2
    7150:	eb00007f 	bl	7354 <_free_r>
    7154:	e5951040 	ldr	r1, [r5, #64]	; 0x40
    7158:	e3510000 	cmp	r1, #0
    715c:	11a00005 	movne	r0, r5
    7160:	1b00007b 	blne	7354 <_free_r>
    7164:	e5951148 	ldr	r1, [r5, #328]	; 0x148
    7168:	e3510000 	cmp	r1, #0
    716c:	0a000008 	beq	7194 <_reclaim_reent+0xac>
    7170:	e2856f53 	add	r6, r5, #332	; 0x14c
    7174:	e1510006 	cmp	r1, r6
    7178:	0a000005 	beq	7194 <_reclaim_reent+0xac>
    717c:	e5914000 	ldr	r4, [r1]
    7180:	e1a00005 	mov	r0, r5
    7184:	eb000072 	bl	7354 <_free_r>
    7188:	e1560004 	cmp	r6, r4
    718c:	e1a01004 	mov	r1, r4
    7190:	1afffff9 	bne	717c <_reclaim_reent+0x94>
    7194:	e5951054 	ldr	r1, [r5, #84]	; 0x54
    7198:	e3510000 	cmp	r1, #0
    719c:	11a00005 	movne	r0, r5
    71a0:	1b00006b 	blne	7354 <_free_r>
    71a4:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    71a8:	e3530000 	cmp	r3, #0
    71ac:	1a000001 	bne	71b8 <_reclaim_reent+0xd0>
    71b0:	e8bd4070 	pop	{r4, r5, r6, lr}
    71b4:	e12fff1e 	bx	lr
    71b8:	e1a00005 	mov	r0, r5
    71bc:	e595c03c 	ldr	r12, [r5, #60]	; 0x3c
    71c0:	e1a0e00f 	mov	lr, pc
    71c4:	e12fff1c 	bx	r12
    71c8:	e59512e0 	ldr	r1, [r5, #736]	; 0x2e0
    71cc:	e3510000 	cmp	r1, #0
    71d0:	0afffff6 	beq	71b0 <_reclaim_reent+0xc8>
    71d4:	e1a00005 	mov	r0, r5
    71d8:	e8bd4070 	pop	{r4, r5, r6, lr}
    71dc:	eaffffb6 	b	70bc <cleanup_glue>
    71e0:	000532b8 	.word	0x000532b8

000071e4 <_wrapup_reent>:
    71e4:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    71e8:	e2507000 	subs	r7, r0, #0
    71ec:	059f3060 	ldreq	r3, [pc, #96]	; 7254 <_wrapup_reent+0x70>
    71f0:	05937000 	ldreq	r7, [r3]
    71f4:	e5976148 	ldr	r6, [r7, #328]	; 0x148
    71f8:	e3560000 	cmp	r6, #0
    71fc:	0a00000d 	beq	7238 <_wrapup_reent+0x54>
    7200:	e5965004 	ldr	r5, [r6, #4]
    7204:	e2554001 	subs	r4, r5, #1
    7208:	52855002 	addpl	r5, r5, #2
    720c:	50865105 	addpl	r5, r6, r5, lsl #2
    7210:	4a000005 	bmi	722c <_wrapup_reent+0x48>
    7214:	e5353004 	ldr	r3, [r5, #-4]!
    7218:	e2444001 	sub	r4, r4, #1
    721c:	e1a0e00f 	mov	lr, pc
    7220:	e12fff13 	bx	r3
    7224:	e3740001 	cmn	r4, #1
    7228:	1afffff9 	bne	7214 <_wrapup_reent+0x30>
    722c:	e5966000 	ldr	r6, [r6]
    7230:	e3560000 	cmp	r6, #0
    7234:	1afffff1 	bne	7200 <_wrapup_reent+0x1c>
    7238:	e597303c 	ldr	r3, [r7, #60]	; 0x3c
    723c:	e3530000 	cmp	r3, #0
    7240:	11a00007 	movne	r0, r7
    7244:	11a0e00f 	movne	lr, pc
    7248:	112fff13 	bxne	r3
    724c:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    7250:	e12fff1e 	bx	lr
    7254:	000532b8 	.word	0x000532b8

00007258 <_malloc_trim_r>:
    7258:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    725c:	e59f50e4 	ldr	r5, [pc, #228]	; 7348 <_malloc_trim_r+0xf0>
    7260:	e1a07001 	mov	r7, r1
    7264:	e1a04000 	mov	r4, r0
    7268:	eb00029b 	bl	7cdc <__malloc_lock>
    726c:	e5953008 	ldr	r3, [r5, #8]
    7270:	e5936004 	ldr	r6, [r3, #4]
    7274:	e3c66003 	bic	r6, r6, #3
    7278:	e2863efe 	add	r3, r6, #4064	; 0xfe0
    727c:	e283300f 	add	r3, r3, #15
    7280:	e0677003 	rsb	r7, r7, r3
    7284:	e1a07627 	lsr	r7, r7, #12
    7288:	e2477001 	sub	r7, r7, #1
    728c:	e1a07607 	lsl	r7, r7, #12
    7290:	e3570a01 	cmp	r7, #4096	; 0x1000
    7294:	ba000006 	blt	72b4 <_malloc_trim_r+0x5c>
    7298:	e1a00004 	mov	r0, r4
    729c:	e3a01000 	mov	r1, #0
    72a0:	eb00028f 	bl	7ce4 <_sbrk_r>
    72a4:	e5953008 	ldr	r3, [r5, #8]
    72a8:	e0833006 	add	r3, r3, r6
    72ac:	e1500003 	cmp	r0, r3
    72b0:	0a000004 	beq	72c8 <_malloc_trim_r+0x70>
    72b4:	e1a00004 	mov	r0, r4
    72b8:	eb000288 	bl	7ce0 <__malloc_unlock>
    72bc:	e3a00000 	mov	r0, #0
    72c0:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    72c4:	e12fff1e 	bx	lr
    72c8:	e1a00004 	mov	r0, r4
    72cc:	e2671000 	rsb	r1, r7, #0
    72d0:	eb000283 	bl	7ce4 <_sbrk_r>
    72d4:	e3700001 	cmn	r0, #1
    72d8:	0a00000b 	beq	730c <_malloc_trim_r+0xb4>
    72dc:	e59f3068 	ldr	r3, [pc, #104]	; 734c <_malloc_trim_r+0xf4>
    72e0:	e5952008 	ldr	r2, [r5, #8]
    72e4:	e5931000 	ldr	r1, [r3]
    72e8:	e0676006 	rsb	r6, r7, r6
    72ec:	e3866001 	orr	r6, r6, #1
    72f0:	e0677001 	rsb	r7, r7, r1
    72f4:	e1a00004 	mov	r0, r4
    72f8:	e5826004 	str	r6, [r2, #4]
    72fc:	e5837000 	str	r7, [r3]
    7300:	eb000276 	bl	7ce0 <__malloc_unlock>
    7304:	e3a00001 	mov	r0, #1
    7308:	eaffffec 	b	72c0 <_malloc_trim_r+0x68>
    730c:	e1a00004 	mov	r0, r4
    7310:	e3a01000 	mov	r1, #0
    7314:	eb000272 	bl	7ce4 <_sbrk_r>
    7318:	e5953008 	ldr	r3, [r5, #8]
    731c:	e0632000 	rsb	r2, r3, r0
    7320:	e352000f 	cmp	r2, #15
    7324:	daffffe2 	ble	72b4 <_malloc_trim_r+0x5c>
    7328:	e59f1020 	ldr	r1, [pc, #32]	; 7350 <_malloc_trim_r+0xf8>
    732c:	e5911000 	ldr	r1, [r1]
    7330:	e0610000 	rsb	r0, r1, r0
    7334:	e59f1010 	ldr	r1, [pc, #16]	; 734c <_malloc_trim_r+0xf4>
    7338:	e3822001 	orr	r2, r2, #1
    733c:	e5810000 	str	r0, [r1]
    7340:	e5832004 	str	r2, [r3, #4]
    7344:	eaffffda 	b	72b4 <_malloc_trim_r+0x5c>
    7348:	000536e8 	.word	0x000536e8
    734c:	00053e90 	.word	0x00053e90
    7350:	00053af0 	.word	0x00053af0

00007354 <_free_r>:
    7354:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
    7358:	e2514000 	subs	r4, r1, #0
    735c:	e1a06000 	mov	r6, r0
    7360:	0a000046 	beq	7480 <_free_r+0x12c>
    7364:	eb00025c 	bl	7cdc <__malloc_lock>
    7368:	e514e004 	ldr	lr, [r4, #-4]
    736c:	e59f1238 	ldr	r1, [pc, #568]	; 75ac <_free_r+0x258>
    7370:	e244c008 	sub	r12, r4, #8
    7374:	e3ce3001 	bic	r3, lr, #1
    7378:	e08c2003 	add	r2, r12, r3
    737c:	e5910008 	ldr	r0, [r1, #8]
    7380:	e5925004 	ldr	r5, [r2, #4]
    7384:	e1500002 	cmp	r0, r2
    7388:	e3c55003 	bic	r5, r5, #3
    738c:	0a00004a 	beq	74bc <_free_r+0x168>
    7390:	e21ee001 	ands	lr, lr, #1
    7394:	e5825004 	str	r5, [r2, #4]
    7398:	13a0e000 	movne	lr, #0
    739c:	1a000009 	bne	73c8 <_free_r+0x74>
    73a0:	e5144008 	ldr	r4, [r4, #-8]
    73a4:	e064c00c 	rsb	r12, r4, r12
    73a8:	e59c0008 	ldr	r0, [r12, #8]
    73ac:	e2817008 	add	r7, r1, #8
    73b0:	e1500007 	cmp	r0, r7
    73b4:	e0833004 	add	r3, r3, r4
    73b8:	159c400c 	ldrne	r4, [r12, #12]
    73bc:	1580400c 	strne	r4, [r0, #12]
    73c0:	15840008 	strne	r0, [r4, #8]
    73c4:	03a0e001 	moveq	lr, #1
    73c8:	e0820005 	add	r0, r2, r5
    73cc:	e5900004 	ldr	r0, [r0, #4]
    73d0:	e3100001 	tst	r0, #1
    73d4:	1a000009 	bne	7400 <_free_r+0xac>
    73d8:	e35e0000 	cmp	lr, #0
    73dc:	e5920008 	ldr	r0, [r2, #8]
    73e0:	e0833005 	add	r3, r3, r5
    73e4:	1a000002 	bne	73f4 <_free_r+0xa0>
    73e8:	e59f41c0 	ldr	r4, [pc, #448]	; 75b0 <_free_r+0x25c>
    73ec:	e1500004 	cmp	r0, r4
    73f0:	0a000047 	beq	7514 <_free_r+0x1c0>
    73f4:	e592200c 	ldr	r2, [r2, #12]
    73f8:	e580200c 	str	r2, [r0, #12]
    73fc:	e5820008 	str	r0, [r2, #8]
    7400:	e3832001 	orr	r2, r3, #1
    7404:	e35e0000 	cmp	lr, #0
    7408:	e58c2004 	str	r2, [r12, #4]
    740c:	e78c3003 	str	r3, [r12, r3]
    7410:	1a000018 	bne	7478 <_free_r+0x124>
    7414:	e3530c02 	cmp	r3, #512	; 0x200
    7418:	3a00001a 	bcc	7488 <_free_r+0x134>
    741c:	e1a024a3 	lsr	r2, r3, #9
    7420:	e3520004 	cmp	r2, #4
    7424:	8a000042 	bhi	7534 <_free_r+0x1e0>
    7428:	e1a0e323 	lsr	lr, r3, #6
    742c:	e28ee038 	add	lr, lr, #56	; 0x38
    7430:	e1a0008e 	lsl	r0, lr, #1
    7434:	e0810100 	add	r0, r1, r0, lsl #2
    7438:	e5902008 	ldr	r2, [r0, #8]
    743c:	e1520000 	cmp	r2, r0
    7440:	e59f1164 	ldr	r1, [pc, #356]	; 75ac <_free_r+0x258>
    7444:	0a000044 	beq	755c <_free_r+0x208>
    7448:	e5921004 	ldr	r1, [r2, #4]
    744c:	e3c11003 	bic	r1, r1, #3
    7450:	e1530001 	cmp	r3, r1
    7454:	2a000002 	bcs	7464 <_free_r+0x110>
    7458:	e5922008 	ldr	r2, [r2, #8]
    745c:	e1500002 	cmp	r0, r2
    7460:	1afffff8 	bne	7448 <_free_r+0xf4>
    7464:	e592300c 	ldr	r3, [r2, #12]
    7468:	e58c300c 	str	r3, [r12, #12]
    746c:	e58c2008 	str	r2, [r12, #8]
    7470:	e582c00c 	str	r12, [r2, #12]
    7474:	e583c008 	str	r12, [r3, #8]
    7478:	e1a00006 	mov	r0, r6
    747c:	eb000217 	bl	7ce0 <__malloc_unlock>
    7480:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
    7484:	e12fff1e 	bx	lr
    7488:	e5912004 	ldr	r2, [r1, #4]
    748c:	e1a031a3 	lsr	r3, r3, #3
    7490:	e1a00143 	asr	r0, r3, #2
    7494:	e3a0e001 	mov	lr, #1
    7498:	e182001e 	orr	r0, r2, lr, lsl r0
    749c:	e0813183 	add	r3, r1, r3, lsl #3
    74a0:	e5932008 	ldr	r2, [r3, #8]
    74a4:	e58c300c 	str	r3, [r12, #12]
    74a8:	e58c2008 	str	r2, [r12, #8]
    74ac:	e5810004 	str	r0, [r1, #4]
    74b0:	e583c008 	str	r12, [r3, #8]
    74b4:	e582c00c 	str	r12, [r2, #12]
    74b8:	eaffffee 	b	7478 <_free_r+0x124>
    74bc:	e31e0001 	tst	lr, #1
    74c0:	e0853003 	add	r3, r5, r3
    74c4:	1a000006 	bne	74e4 <_free_r+0x190>
    74c8:	e5142008 	ldr	r2, [r4, #-8]
    74cc:	e062c00c 	rsb	r12, r2, r12
    74d0:	e59c000c 	ldr	r0, [r12, #12]
    74d4:	e59ce008 	ldr	lr, [r12, #8]
    74d8:	e58e000c 	str	r0, [lr, #12]
    74dc:	e580e008 	str	lr, [r0, #8]
    74e0:	e0833002 	add	r3, r3, r2
    74e4:	e59f20c8 	ldr	r2, [pc, #200]	; 75b4 <_free_r+0x260>
    74e8:	e5920000 	ldr	r0, [r2]
    74ec:	e3832001 	orr	r2, r3, #1
    74f0:	e1530000 	cmp	r3, r0
    74f4:	e58c2004 	str	r2, [r12, #4]
    74f8:	e581c008 	str	r12, [r1, #8]
    74fc:	3affffdd 	bcc	7478 <_free_r+0x124>
    7500:	e59f30b0 	ldr	r3, [pc, #176]	; 75b8 <_free_r+0x264>
    7504:	e1a00006 	mov	r0, r6
    7508:	e5931000 	ldr	r1, [r3]
    750c:	ebffff51 	bl	7258 <_malloc_trim_r>
    7510:	eaffffd8 	b	7478 <_free_r+0x124>
    7514:	e3832001 	orr	r2, r3, #1
    7518:	e581c014 	str	r12, [r1, #20]
    751c:	e581c010 	str	r12, [r1, #16]
    7520:	e58c000c 	str	r0, [r12, #12]
    7524:	e58c0008 	str	r0, [r12, #8]
    7528:	e58c2004 	str	r2, [r12, #4]
    752c:	e78c3003 	str	r3, [r12, r3]
    7530:	eaffffd0 	b	7478 <_free_r+0x124>
    7534:	e3520014 	cmp	r2, #20
    7538:	9282e05b 	addls	lr, r2, #91	; 0x5b
    753c:	91a0008e 	lslls	r0, lr, #1
    7540:	9affffbb 	bls	7434 <_free_r+0xe0>
    7544:	e3520054 	cmp	r2, #84	; 0x54
    7548:	8a00000a 	bhi	7578 <_free_r+0x224>
    754c:	e1a0e623 	lsr	lr, r3, #12
    7550:	e28ee06e 	add	lr, lr, #110	; 0x6e
    7554:	e1a0008e 	lsl	r0, lr, #1
    7558:	eaffffb5 	b	7434 <_free_r+0xe0>
    755c:	e5913004 	ldr	r3, [r1, #4]
    7560:	e1a0e14e 	asr	lr, lr, #2
    7564:	e3a00001 	mov	r0, #1
    7568:	e1830e10 	orr	r0, r3, r0, lsl lr
    756c:	e1a03002 	mov	r3, r2
    7570:	e5810004 	str	r0, [r1, #4]
    7574:	eaffffbb 	b	7468 <_free_r+0x114>
    7578:	e3520f55 	cmp	r2, #340	; 0x154
    757c:	91a0e7a3 	lsrls	lr, r3, #15
    7580:	928ee077 	addls	lr, lr, #119	; 0x77
    7584:	91a0008e 	lslls	r0, lr, #1
    7588:	9affffa9 	bls	7434 <_free_r+0xe0>
    758c:	e59f0028 	ldr	r0, [pc, #40]	; 75bc <_free_r+0x268>
    7590:	e1520000 	cmp	r2, r0
    7594:	91a0e923 	lsrls	lr, r3, #18
    7598:	928ee07c 	addls	lr, lr, #124	; 0x7c
    759c:	91a0008e 	lslls	r0, lr, #1
    75a0:	83a000fc 	movhi	r0, #252	; 0xfc
    75a4:	83a0e07e 	movhi	lr, #126	; 0x7e
    75a8:	eaffffa1 	b	7434 <_free_r+0xe0>
    75ac:	000536e8 	.word	0x000536e8
    75b0:	000536f0 	.word	0x000536f0
    75b4:	00053af4 	.word	0x00053af4
    75b8:	00053e8c 	.word	0x00053e8c
    75bc:	00000554 	.word	0x00000554

000075c0 <_malloc_r>:
    75c0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    75c4:	e281500b 	add	r5, r1, #11
    75c8:	e3550016 	cmp	r5, #22
    75cc:	83c55007 	bichi	r5, r5, #7
    75d0:	81a03fa5 	lsrhi	r3, r5, #31
    75d4:	93a03000 	movls	r3, #0
    75d8:	93a05010 	movls	r5, #16
    75dc:	e1550001 	cmp	r5, r1
    75e0:	21a01003 	movcs	r1, r3
    75e4:	33831001 	orrcc	r1, r3, #1
    75e8:	e3510000 	cmp	r1, #0
    75ec:	13a0300c 	movne	r3, #12
    75f0:	e24dd00c 	sub	sp, sp, #12
    75f4:	e1a06000 	mov	r6, r0
    75f8:	15803000 	strne	r3, [r0]
    75fc:	13a04000 	movne	r4, #0
    7600:	1a000015 	bne	765c <_malloc_r+0x9c>
    7604:	eb0001b4 	bl	7cdc <__malloc_lock>
    7608:	e3550f7e 	cmp	r5, #504	; 0x1f8
    760c:	2a000016 	bcs	766c <_malloc_r+0xac>
    7610:	e59f76b8 	ldr	r7, [pc, #1720]	; 7cd0 <_malloc_r+0x710>
    7614:	e1a0e1a5 	lsr	lr, r5, #3
    7618:	e087318e 	add	r3, r7, lr, lsl #3
    761c:	e593400c 	ldr	r4, [r3, #12]
    7620:	e1540003 	cmp	r4, r3
    7624:	0a00014b 	beq	7b58 <_malloc_r+0x598>
    7628:	e5943004 	ldr	r3, [r4, #4]
    762c:	e3c33003 	bic	r3, r3, #3
    7630:	e0843003 	add	r3, r4, r3
    7634:	e5930004 	ldr	r0, [r3, #4]
    7638:	e2841008 	add	r1, r4, #8
    763c:	e8910006 	ldm	r1, {r1, r2}
    7640:	e3800001 	orr	r0, r0, #1
    7644:	e5830004 	str	r0, [r3, #4]
    7648:	e581200c 	str	r2, [r1, #12]
    764c:	e5821008 	str	r1, [r2, #8]
    7650:	e1a00006 	mov	r0, r6
    7654:	eb0001a1 	bl	7ce0 <__malloc_unlock>
    7658:	e2844008 	add	r4, r4, #8
    765c:	e1a00004 	mov	r0, r4
    7660:	e28dd00c 	add	sp, sp, #12
    7664:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    7668:	e12fff1e 	bx	lr
    766c:	e1b0e4a5 	lsrs	lr, r5, #9
    7670:	01a0e1a5 	lsreq	lr, r5, #3
    7674:	01a0108e 	lsleq	r1, lr, #1
    7678:	1a000061 	bne	7804 <_malloc_r+0x244>
    767c:	e59f764c 	ldr	r7, [pc, #1612]	; 7cd0 <_malloc_r+0x710>
    7680:	e0871101 	add	r1, r7, r1, lsl #2
    7684:	e591400c 	ldr	r4, [r1, #12]
    7688:	e1510004 	cmp	r1, r4
    768c:	1a000005 	bne	76a8 <_malloc_r+0xe8>
    7690:	ea00000a 	b	76c0 <_malloc_r+0x100>
    7694:	e3530000 	cmp	r3, #0
    7698:	aa0000d7 	bge	79fc <_malloc_r+0x43c>
    769c:	e594400c 	ldr	r4, [r4, #12]
    76a0:	e1510004 	cmp	r1, r4
    76a4:	0a000005 	beq	76c0 <_malloc_r+0x100>
    76a8:	e5942004 	ldr	r2, [r4, #4]
    76ac:	e3c22003 	bic	r2, r2, #3
    76b0:	e0653002 	rsb	r3, r5, r2
    76b4:	e353000f 	cmp	r3, #15
    76b8:	dafffff5 	ble	7694 <_malloc_r+0xd4>
    76bc:	e24ee001 	sub	lr, lr, #1
    76c0:	e28ee001 	add	lr, lr, #1
    76c4:	e59f3604 	ldr	r3, [pc, #1540]	; 7cd0 <_malloc_r+0x710>
    76c8:	e5974010 	ldr	r4, [r7, #16]
    76cc:	e2838008 	add	r8, r3, #8
    76d0:	e1540008 	cmp	r4, r8
    76d4:	05931004 	ldreq	r1, [r3, #4]
    76d8:	0a000016 	beq	7738 <_malloc_r+0x178>
    76dc:	e5942004 	ldr	r2, [r4, #4]
    76e0:	e3c22003 	bic	r2, r2, #3
    76e4:	e0651002 	rsb	r1, r5, r2
    76e8:	e351000f 	cmp	r1, #15
    76ec:	ca0000f7 	bgt	7ad0 <_malloc_r+0x510>
    76f0:	e3510000 	cmp	r1, #0
    76f4:	e5838014 	str	r8, [r3, #20]
    76f8:	e5838010 	str	r8, [r3, #16]
    76fc:	aa000046 	bge	781c <_malloc_r+0x25c>
    7700:	e3520c02 	cmp	r2, #512	; 0x200
    7704:	2a0000d2 	bcs	7a54 <_malloc_r+0x494>
    7708:	e5930004 	ldr	r0, [r3, #4]
    770c:	e1a021a2 	lsr	r2, r2, #3
    7710:	e1a01142 	asr	r1, r2, #2
    7714:	e3a0c001 	mov	r12, #1
    7718:	e180111c 	orr	r1, r0, r12, lsl r1
    771c:	e0832182 	add	r2, r3, r2, lsl #3
    7720:	e5920008 	ldr	r0, [r2, #8]
    7724:	e584200c 	str	r2, [r4, #12]
    7728:	e5840008 	str	r0, [r4, #8]
    772c:	e5831004 	str	r1, [r3, #4]
    7730:	e5824008 	str	r4, [r2, #8]
    7734:	e580400c 	str	r4, [r0, #12]
    7738:	e1a0014e 	asr	r0, lr, #2
    773c:	e3a03001 	mov	r3, #1
    7740:	e1a00013 	lsl	r0, r3, r0
    7744:	e1500001 	cmp	r0, r1
    7748:	8a00003b 	bhi	783c <_malloc_r+0x27c>
    774c:	e1110000 	tst	r1, r0
    7750:	1a000008 	bne	7778 <_malloc_r+0x1b8>
    7754:	e1a00310 	lsl	r0, r0, r3
    7758:	e3cee003 	bic	lr, lr, #3
    775c:	e1110000 	tst	r1, r0
    7760:	e28ee004 	add	lr, lr, #4
    7764:	1a000003 	bne	7778 <_malloc_r+0x1b8>
    7768:	e1a00080 	lsl	r0, r0, #1
    776c:	e1110000 	tst	r1, r0
    7770:	e28ee004 	add	lr, lr, #4
    7774:	0afffffb 	beq	7768 <_malloc_r+0x1a8>
    7778:	e087a18e 	add	r10, r7, lr, lsl #3
    777c:	e1a0c00a 	mov	r12, r10
    7780:	e1a0400e 	mov	r4, lr
    7784:	e59c300c 	ldr	r3, [r12, #12]
    7788:	e15c0003 	cmp	r12, r3
    778c:	1a000005 	bne	77a8 <_malloc_r+0x1e8>
    7790:	ea0000db 	b	7b04 <_malloc_r+0x544>
    7794:	e3520000 	cmp	r2, #0
    7798:	aa0000f4 	bge	7b70 <_malloc_r+0x5b0>
    779c:	e593300c 	ldr	r3, [r3, #12]
    77a0:	e15c0003 	cmp	r12, r3
    77a4:	0a0000d6 	beq	7b04 <_malloc_r+0x544>
    77a8:	e5931004 	ldr	r1, [r3, #4]
    77ac:	e3c11003 	bic	r1, r1, #3
    77b0:	e0652001 	rsb	r2, r5, r1
    77b4:	e352000f 	cmp	r2, #15
    77b8:	dafffff5 	ble	7794 <_malloc_r+0x1d4>
    77bc:	e1a04003 	mov	r4, r3
    77c0:	e593000c 	ldr	r0, [r3, #12]
    77c4:	e5b4c008 	ldr	r12, [r4, #8]!
    77c8:	e0831005 	add	r1, r3, r5
    77cc:	e382e001 	orr	lr, r2, #1
    77d0:	e3855001 	orr	r5, r5, #1
    77d4:	e58c000c 	str	r0, [r12, #12]
    77d8:	e580c008 	str	r12, [r0, #8]
    77dc:	e5835004 	str	r5, [r3, #4]
    77e0:	e5871014 	str	r1, [r7, #20]
    77e4:	e5871010 	str	r1, [r7, #16]
    77e8:	e581800c 	str	r8, [r1, #12]
    77ec:	e5818008 	str	r8, [r1, #8]
    77f0:	e581e004 	str	lr, [r1, #4]
    77f4:	e7812002 	str	r2, [r1, r2]
    77f8:	e1a00006 	mov	r0, r6
    77fc:	eb000137 	bl	7ce0 <__malloc_unlock>
    7800:	eaffff95 	b	765c <_malloc_r+0x9c>
    7804:	e35e0004 	cmp	lr, #4
    7808:	8a000087 	bhi	7a2c <_malloc_r+0x46c>
    780c:	e1a0e325 	lsr	lr, r5, #6
    7810:	e28ee038 	add	lr, lr, #56	; 0x38
    7814:	e1a0108e 	lsl	r1, lr, #1
    7818:	eaffff97 	b	767c <_malloc_r+0xbc>
    781c:	e0842002 	add	r2, r4, r2
    7820:	e5923004 	ldr	r3, [r2, #4]
    7824:	e3833001 	orr	r3, r3, #1
    7828:	e5823004 	str	r3, [r2, #4]
    782c:	e1a00006 	mov	r0, r6
    7830:	eb00012a 	bl	7ce0 <__malloc_unlock>
    7834:	e2844008 	add	r4, r4, #8
    7838:	eaffff87 	b	765c <_malloc_r+0x9c>
    783c:	e5974008 	ldr	r4, [r7, #8]
    7840:	e594a004 	ldr	r10, [r4, #4]
    7844:	e3caa003 	bic	r10, r10, #3
    7848:	e155000a 	cmp	r5, r10
    784c:	8a000002 	bhi	785c <_malloc_r+0x29c>
    7850:	e065300a 	rsb	r3, r5, r10
    7854:	e353000f 	cmp	r3, #15
    7858:	ca00005d 	bgt	79d4 <_malloc_r+0x414>
    785c:	e59f9470 	ldr	r9, [pc, #1136]	; 7cd4 <_malloc_r+0x714>
    7860:	e5973408 	ldr	r3, [r7, #1032]	; 0x408
    7864:	e599b000 	ldr	r11, [r9]
    7868:	e3730001 	cmn	r3, #1
    786c:	e085b00b 	add	r11, r5, r11
    7870:	128bba01 	addne	r11, r11, #4096	; 0x1000
    7874:	128bb00f 	addne	r11, r11, #15
    7878:	13cbbeff 	bicne	r11, r11, #4080	; 0xff0
    787c:	028bb010 	addeq	r11, r11, #16
    7880:	13cbb00f 	bicne	r11, r11, #15
    7884:	e084200a 	add	r2, r4, r10
    7888:	e1a00006 	mov	r0, r6
    788c:	e1a0100b 	mov	r1, r11
    7890:	e58d2004 	str	r2, [sp, #4]
    7894:	eb000112 	bl	7ce4 <_sbrk_r>
    7898:	e3700001 	cmn	r0, #1
    789c:	e1a08000 	mov	r8, r0
    78a0:	e59d2004 	ldr	r2, [sp, #4]
    78a4:	0a0000e2 	beq	7c34 <_malloc_r+0x674>
    78a8:	e1520000 	cmp	r2, r0
    78ac:	8a0000bf 	bhi	7bb0 <_malloc_r+0x5f0>
    78b0:	e5993004 	ldr	r3, [r9, #4]
    78b4:	e1520008 	cmp	r2, r8
    78b8:	e08b3003 	add	r3, r11, r3
    78bc:	e5893004 	str	r3, [r9, #4]
    78c0:	0a0000df 	beq	7c44 <_malloc_r+0x684>
    78c4:	e5971408 	ldr	r1, [r7, #1032]	; 0x408
    78c8:	e3710001 	cmn	r1, #1
    78cc:	10622008 	rsbne	r2, r2, r8
    78d0:	059f33f8 	ldreq	r3, [pc, #1016]	; 7cd0 <_malloc_r+0x710>
    78d4:	10833002 	addne	r3, r3, r2
    78d8:	05838408 	streq	r8, [r3, #1032]	; 0x408
    78dc:	15893004 	strne	r3, [r9, #4]
    78e0:	e2183007 	ands	r3, r8, #7
    78e4:	12632008 	rsbne	r2, r3, #8
    78e8:	10888002 	addne	r8, r8, r2
    78ec:	12633a01 	rsbne	r3, r3, #4096	; 0x1000
    78f0:	12832008 	addne	r2, r3, #8
    78f4:	e088300b 	add	r3, r8, r11
    78f8:	03a02a01 	moveq	r2, #4096	; 0x1000
    78fc:	e1a03a03 	lsl	r3, r3, #20
    7900:	e042ba23 	sub	r11, r2, r3, lsr #20
    7904:	e1a0100b 	mov	r1, r11
    7908:	e1a00006 	mov	r0, r6
    790c:	eb0000f4 	bl	7ce4 <_sbrk_r>
    7910:	e3700001 	cmn	r0, #1
    7914:	10682000 	rsbne	r2, r8, r0
    7918:	e5993004 	ldr	r3, [r9, #4]
    791c:	108b2002 	addne	r2, r11, r2
    7920:	03a0b000 	moveq	r11, #0
    7924:	13822001 	orrne	r2, r2, #1
    7928:	03a02001 	moveq	r2, #1
    792c:	e08b3003 	add	r3, r11, r3
    7930:	e1540007 	cmp	r4, r7
    7934:	e5893004 	str	r3, [r9, #4]
    7938:	e5878008 	str	r8, [r7, #8]
    793c:	e5882004 	str	r2, [r8, #4]
    7940:	0a00000d 	beq	797c <_malloc_r+0x3bc>
    7944:	e35a000f 	cmp	r10, #15
    7948:	9a0000ac 	bls	7c00 <_malloc_r+0x640>
    794c:	e594c004 	ldr	r12, [r4, #4]
    7950:	e24a200c 	sub	r2, r10, #12
    7954:	e3c22007 	bic	r2, r2, #7
    7958:	e20cc001 	and	r12, r12, #1
    795c:	e0841002 	add	r1, r4, r2
    7960:	e3a00005 	mov	r0, #5
    7964:	e182c00c 	orr	r12, r2, r12
    7968:	e352000f 	cmp	r2, #15
    796c:	e584c004 	str	r12, [r4, #4]
    7970:	e5810004 	str	r0, [r1, #4]
    7974:	e5810008 	str	r0, [r1, #8]
    7978:	8a0000b8 	bhi	7c60 <_malloc_r+0x6a0>
    797c:	e599202c 	ldr	r2, [r9, #44]	; 0x2c
    7980:	e1530002 	cmp	r3, r2
    7984:	859f2348 	ldrhi	r2, [pc, #840]	; 7cd4 <_malloc_r+0x714>
    7988:	8582302c 	strhi	r3, [r2, #44]	; 0x2c
    798c:	e5992030 	ldr	r2, [r9, #48]	; 0x30
    7990:	e5974008 	ldr	r4, [r7, #8]
    7994:	e1530002 	cmp	r3, r2
    7998:	95943004 	ldrls	r3, [r4, #4]
    799c:	85942004 	ldrhi	r2, [r4, #4]
    79a0:	859f132c 	ldrhi	r1, [pc, #812]	; 7cd4 <_malloc_r+0x714>
    79a4:	93c33003 	bicls	r3, r3, #3
    79a8:	85813030 	strhi	r3, [r1, #48]	; 0x30
    79ac:	83c23003 	bichi	r3, r2, #3
    79b0:	e1550003 	cmp	r5, r3
    79b4:	e0653003 	rsb	r3, r5, r3
    79b8:	8a000001 	bhi	79c4 <_malloc_r+0x404>
    79bc:	e353000f 	cmp	r3, #15
    79c0:	ca000003 	bgt	79d4 <_malloc_r+0x414>
    79c4:	e1a00006 	mov	r0, r6
    79c8:	eb0000c4 	bl	7ce0 <__malloc_unlock>
    79cc:	e3a04000 	mov	r4, #0
    79d0:	eaffff21 	b	765c <_malloc_r+0x9c>
    79d4:	e0842005 	add	r2, r4, r5
    79d8:	e3833001 	orr	r3, r3, #1
    79dc:	e3855001 	orr	r5, r5, #1
    79e0:	e5845004 	str	r5, [r4, #4]
    79e4:	e1a00006 	mov	r0, r6
    79e8:	e5823004 	str	r3, [r2, #4]
    79ec:	e5872008 	str	r2, [r7, #8]
    79f0:	e2844008 	add	r4, r4, #8
    79f4:	eb0000b9 	bl	7ce0 <__malloc_unlock>
    79f8:	eaffff17 	b	765c <_malloc_r+0x9c>
    79fc:	e0842002 	add	r2, r4, r2
    7a00:	e5920004 	ldr	r0, [r2, #4]
    7a04:	e2841008 	add	r1, r4, #8
    7a08:	e891000a 	ldm	r1, {r1, r3}
    7a0c:	e3800001 	orr	r0, r0, #1
    7a10:	e5820004 	str	r0, [r2, #4]
    7a14:	e581300c 	str	r3, [r1, #12]
    7a18:	e5831008 	str	r1, [r3, #8]
    7a1c:	e1a00006 	mov	r0, r6
    7a20:	eb0000ae 	bl	7ce0 <__malloc_unlock>
    7a24:	e2844008 	add	r4, r4, #8
    7a28:	eaffff0b 	b	765c <_malloc_r+0x9c>
    7a2c:	e35e0014 	cmp	lr, #20
    7a30:	928ee05b 	addls	lr, lr, #91	; 0x5b
    7a34:	91a0108e 	lslls	r1, lr, #1
    7a38:	9affff0f 	bls	767c <_malloc_r+0xbc>
    7a3c:	e35e0054 	cmp	lr, #84	; 0x54
    7a40:	8a000061 	bhi	7bcc <_malloc_r+0x60c>
    7a44:	e1a0e625 	lsr	lr, r5, #12
    7a48:	e28ee06e 	add	lr, lr, #110	; 0x6e
    7a4c:	e1a0108e 	lsl	r1, lr, #1
    7a50:	eaffff09 	b	767c <_malloc_r+0xbc>
    7a54:	e1a034a2 	lsr	r3, r2, #9
    7a58:	e3530004 	cmp	r3, #4
    7a5c:	9a00004f 	bls	7ba0 <_malloc_r+0x5e0>
    7a60:	e3530014 	cmp	r3, #20
    7a64:	9283a05b 	addls	r10, r3, #91	; 0x5b
    7a68:	91a0008a 	lslls	r0, r10, #1
    7a6c:	9a000004 	bls	7a84 <_malloc_r+0x4c4>
    7a70:	e3530054 	cmp	r3, #84	; 0x54
    7a74:	8a00007f 	bhi	7c78 <_malloc_r+0x6b8>
    7a78:	e1a0a622 	lsr	r10, r2, #12
    7a7c:	e28aa06e 	add	r10, r10, #110	; 0x6e
    7a80:	e1a0008a 	lsl	r0, r10, #1
    7a84:	e0870100 	add	r0, r7, r0, lsl #2
    7a88:	e5903008 	ldr	r3, [r0, #8]
    7a8c:	e1530000 	cmp	r3, r0
    7a90:	e59fc238 	ldr	r12, [pc, #568]	; 7cd0 <_malloc_r+0x710>
    7a94:	0a000052 	beq	7be4 <_malloc_r+0x624>
    7a98:	e5931004 	ldr	r1, [r3, #4]
    7a9c:	e3c11003 	bic	r1, r1, #3
    7aa0:	e1520001 	cmp	r2, r1
    7aa4:	2a000002 	bcs	7ab4 <_malloc_r+0x4f4>
    7aa8:	e5933008 	ldr	r3, [r3, #8]
    7aac:	e1500003 	cmp	r0, r3
    7ab0:	1afffff8 	bne	7a98 <_malloc_r+0x4d8>
    7ab4:	e593200c 	ldr	r2, [r3, #12]
    7ab8:	e5971004 	ldr	r1, [r7, #4]
    7abc:	e584200c 	str	r2, [r4, #12]
    7ac0:	e5843008 	str	r3, [r4, #8]
    7ac4:	e583400c 	str	r4, [r3, #12]
    7ac8:	e5824008 	str	r4, [r2, #8]
    7acc:	eaffff19 	b	7738 <_malloc_r+0x178>
    7ad0:	e0842005 	add	r2, r4, r5
    7ad4:	e3810001 	orr	r0, r1, #1
    7ad8:	e3855001 	orr	r5, r5, #1
    7adc:	e5845004 	str	r5, [r4, #4]
    7ae0:	e5832014 	str	r2, [r3, #20]
    7ae4:	e5832010 	str	r2, [r3, #16]
    7ae8:	e582800c 	str	r8, [r2, #12]
    7aec:	e9820101 	stmib	r2, {r0, r8}
    7af0:	e7821001 	str	r1, [r2, r1]
    7af4:	e1a00006 	mov	r0, r6
    7af8:	eb000078 	bl	7ce0 <__malloc_unlock>
    7afc:	e2844008 	add	r4, r4, #8
    7b00:	eafffed5 	b	765c <_malloc_r+0x9c>
    7b04:	e2844001 	add	r4, r4, #1
    7b08:	e3140003 	tst	r4, #3
    7b0c:	e28cc008 	add	r12, r12, #8
    7b10:	1affff1b 	bne	7784 <_malloc_r+0x1c4>
    7b14:	e31e0003 	tst	lr, #3
    7b18:	e24a3008 	sub	r3, r10, #8
    7b1c:	0a000062 	beq	7cac <_malloc_r+0x6ec>
    7b20:	e59aa000 	ldr	r10, [r10]
    7b24:	e15a0003 	cmp	r10, r3
    7b28:	e24ee001 	sub	lr, lr, #1
    7b2c:	0afffff8 	beq	7b14 <_malloc_r+0x554>
    7b30:	e5973004 	ldr	r3, [r7, #4]
    7b34:	e1a00080 	lsl	r0, r0, #1
    7b38:	e1500003 	cmp	r0, r3
    7b3c:	8affff3e 	bhi	783c <_malloc_r+0x27c>
    7b40:	e3500000 	cmp	r0, #0
    7b44:	0affff3c 	beq	783c <_malloc_r+0x27c>
    7b48:	e1130000 	tst	r3, r0
    7b4c:	0a00005a 	beq	7cbc <_malloc_r+0x6fc>
    7b50:	e1a0e004 	mov	lr, r4
    7b54:	eaffff07 	b	7778 <_malloc_r+0x1b8>
    7b58:	e2843008 	add	r3, r4, #8
    7b5c:	e5944014 	ldr	r4, [r4, #20]
    7b60:	e1530004 	cmp	r3, r4
    7b64:	028ee002 	addeq	lr, lr, #2
    7b68:	0afffed5 	beq	76c4 <_malloc_r+0x104>
    7b6c:	eafffead 	b	7628 <_malloc_r+0x68>
    7b70:	e0831001 	add	r1, r3, r1
    7b74:	e5910004 	ldr	r0, [r1, #4]
    7b78:	e1a04003 	mov	r4, r3
    7b7c:	e5b42008 	ldr	r2, [r4, #8]!
    7b80:	e593300c 	ldr	r3, [r3, #12]
    7b84:	e3800001 	orr	r0, r0, #1
    7b88:	e5810004 	str	r0, [r1, #4]
    7b8c:	e582300c 	str	r3, [r2, #12]
    7b90:	e5832008 	str	r2, [r3, #8]
    7b94:	e1a00006 	mov	r0, r6
    7b98:	eb000050 	bl	7ce0 <__malloc_unlock>
    7b9c:	eafffeae 	b	765c <_malloc_r+0x9c>
    7ba0:	e1a0a322 	lsr	r10, r2, #6
    7ba4:	e28aa038 	add	r10, r10, #56	; 0x38
    7ba8:	e1a0008a 	lsl	r0, r10, #1
    7bac:	eaffffb4 	b	7a84 <_malloc_r+0x4c4>
    7bb0:	e1540007 	cmp	r4, r7
    7bb4:	0affff3d 	beq	78b0 <_malloc_r+0x2f0>
    7bb8:	e59f3110 	ldr	r3, [pc, #272]	; 7cd0 <_malloc_r+0x710>
    7bbc:	e5934008 	ldr	r4, [r3, #8]
    7bc0:	e5943004 	ldr	r3, [r4, #4]
    7bc4:	e3c33003 	bic	r3, r3, #3
    7bc8:	eaffff78 	b	79b0 <_malloc_r+0x3f0>
    7bcc:	e35e0f55 	cmp	lr, #340	; 0x154
    7bd0:	8a00000f 	bhi	7c14 <_malloc_r+0x654>
    7bd4:	e1a0e7a5 	lsr	lr, r5, #15
    7bd8:	e28ee077 	add	lr, lr, #119	; 0x77
    7bdc:	e1a0108e 	lsl	r1, lr, #1
    7be0:	eafffea5 	b	767c <_malloc_r+0xbc>
    7be4:	e59c2004 	ldr	r2, [r12, #4]
    7be8:	e1a0a14a 	asr	r10, r10, #2
    7bec:	e3a01001 	mov	r1, #1
    7bf0:	e1821a11 	orr	r1, r2, r1, lsl r10
    7bf4:	e1a02003 	mov	r2, r3
    7bf8:	e58c1004 	str	r1, [r12, #4]
    7bfc:	eaffffae 	b	7abc <_malloc_r+0x4fc>
    7c00:	e3a03001 	mov	r3, #1
    7c04:	e5883004 	str	r3, [r8, #4]
    7c08:	e1a04008 	mov	r4, r8
    7c0c:	e3a03000 	mov	r3, #0
    7c10:	eaffff66 	b	79b0 <_malloc_r+0x3f0>
    7c14:	e59f30bc 	ldr	r3, [pc, #188]	; 7cd8 <_malloc_r+0x718>
    7c18:	e15e0003 	cmp	lr, r3
    7c1c:	91a0e925 	lsrls	lr, r5, #18
    7c20:	928ee07c 	addls	lr, lr, #124	; 0x7c
    7c24:	91a0108e 	lslls	r1, lr, #1
    7c28:	83a010fc 	movhi	r1, #252	; 0xfc
    7c2c:	83a0e07e 	movhi	lr, #126	; 0x7e
    7c30:	eafffe91 	b	767c <_malloc_r+0xbc>
    7c34:	e5974008 	ldr	r4, [r7, #8]
    7c38:	e5943004 	ldr	r3, [r4, #4]
    7c3c:	e3c33003 	bic	r3, r3, #3
    7c40:	eaffff5a 	b	79b0 <_malloc_r+0x3f0>
    7c44:	e1b01a02 	lsls	r1, r2, #20
    7c48:	1affff1d 	bne	78c4 <_malloc_r+0x304>
    7c4c:	e5972008 	ldr	r2, [r7, #8]
    7c50:	e08b100a 	add	r1, r11, r10
    7c54:	e3811001 	orr	r1, r1, #1
    7c58:	e5821004 	str	r1, [r2, #4]
    7c5c:	eaffff46 	b	797c <_malloc_r+0x3bc>
    7c60:	e1a00006 	mov	r0, r6
    7c64:	e2841008 	add	r1, r4, #8
    7c68:	ebfffdb9 	bl	7354 <_free_r>
    7c6c:	e59f3060 	ldr	r3, [pc, #96]	; 7cd4 <_malloc_r+0x714>
    7c70:	e5933004 	ldr	r3, [r3, #4]
    7c74:	eaffff40 	b	797c <_malloc_r+0x3bc>
    7c78:	e3530f55 	cmp	r3, #340	; 0x154
    7c7c:	91a0a7a2 	lsrls	r10, r2, #15
    7c80:	928aa077 	addls	r10, r10, #119	; 0x77
    7c84:	91a0008a 	lslls	r0, r10, #1
    7c88:	9affff7d 	bls	7a84 <_malloc_r+0x4c4>
    7c8c:	e59f1044 	ldr	r1, [pc, #68]	; 7cd8 <_malloc_r+0x718>
    7c90:	e1530001 	cmp	r3, r1
    7c94:	91a0a922 	lsrls	r10, r2, #18
    7c98:	928aa07c 	addls	r10, r10, #124	; 0x7c
    7c9c:	91a0008a 	lslls	r0, r10, #1
    7ca0:	83a000fc 	movhi	r0, #252	; 0xfc
    7ca4:	83a0a07e 	movhi	r10, #126	; 0x7e
    7ca8:	eaffff75 	b	7a84 <_malloc_r+0x4c4>
    7cac:	e5973004 	ldr	r3, [r7, #4]
    7cb0:	e1c33000 	bic	r3, r3, r0
    7cb4:	e5873004 	str	r3, [r7, #4]
    7cb8:	eaffff9d 	b	7b34 <_malloc_r+0x574>
    7cbc:	e1a00080 	lsl	r0, r0, #1
    7cc0:	e1130000 	tst	r3, r0
    7cc4:	e2844004 	add	r4, r4, #4
    7cc8:	1affffa0 	bne	7b50 <_malloc_r+0x590>
    7ccc:	eafffffa 	b	7cbc <_malloc_r+0x6fc>
    7cd0:	000536e8 	.word	0x000536e8
    7cd4:	00053e8c 	.word	0x00053e8c
    7cd8:	00000554 	.word	0x00000554

00007cdc <__malloc_lock>:
    7cdc:	e12fff1e 	bx	lr

00007ce0 <__malloc_unlock>:
    7ce0:	e12fff1e 	bx	lr

00007ce4 <_sbrk_r>:
    7ce4:	e92d4038 	push	{r3, r4, r5, lr}
    7ce8:	e59f4030 	ldr	r4, [pc, #48]	; 7d20 <_sbrk_r+0x3c>
    7cec:	e3a03000 	mov	r3, #0
    7cf0:	e1a05000 	mov	r5, r0
    7cf4:	e1a00001 	mov	r0, r1
    7cf8:	e5843000 	str	r3, [r4]
    7cfc:	eb000034 	bl	7dd4 <_sbrk>
    7d00:	e3700001 	cmn	r0, #1
    7d04:	0a000001 	beq	7d10 <_sbrk_r+0x2c>
    7d08:	e8bd4038 	pop	{r3, r4, r5, lr}
    7d0c:	e12fff1e 	bx	lr
    7d10:	e5943000 	ldr	r3, [r4]
    7d14:	e3530000 	cmp	r3, #0
    7d18:	15853000 	strne	r3, [r5]
    7d1c:	eafffff9 	b	7d08 <_sbrk_r+0x24>
    7d20:	00053e88 	.word	0x00053e88

00007d24 <__cs3_premain>:
    7d24:	e92d4008 	push	{r3, lr}
    7d28:	eb000046 	bl	7e48 <__libc_init_array>
    7d2c:	e59f3030 	ldr	r3, [pc, #48]	; 7d64 <__cs3_premain+0x40>
    7d30:	e3530000 	cmp	r3, #0
    7d34:	15930000 	ldrne	r0, [r3]
    7d38:	01a00003 	moveq	r0, r3
    7d3c:	e59f3024 	ldr	r3, [pc, #36]	; 7d68 <__cs3_premain+0x44>
    7d40:	e3530000 	cmp	r3, #0
    7d44:	15931000 	ldrne	r1, [r3]
    7d48:	01a01003 	moveq	r1, r3
    7d4c:	e3a02000 	mov	r2, #0
    7d50:	ebffe43a 	bl	e40 <main>
    7d54:	e59f3010 	ldr	r3, [pc, #16]	; 7d6c <__cs3_premain+0x48>
    7d58:	e3530000 	cmp	r3, #0
    7d5c:	1bfffb37 	blne	6a40 <exit>
    7d60:	eafffffe 	b	7d60 <__cs3_premain+0x3c>
	...
    7d6c:	00006a40 	.word	0x00006a40

00007d70 <_exit>:
    7d70:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    7d74:	e3a00018 	mov	r0, #24
    7d78:	e59f1004 	ldr	r1, [pc, #4]	; 7d84 <_exit+0x14>
    7d7c:	ef123456 	svc	0x00123456
    7d80:	eafffffe 	b	7d80 <_exit+0x10>
    7d84:	00020026 	.word	0x00020026

00007d88 <_gettimeofday>:
    7d88:	e92d4038 	push	{r3, r4, r5, lr}
    7d8c:	e2505000 	subs	r5, r0, #0
    7d90:	e1a04001 	mov	r4, r1
    7d94:	0a000007 	beq	7db8 <_gettimeofday+0x30>
    7d98:	e3510000 	cmp	r1, #0
    7d9c:	1a000007 	bne	7dc0 <_gettimeofday+0x38>
    7da0:	e3a00011 	mov	r0, #17
    7da4:	ef123456 	svc	0x00123456
    7da8:	e8850011 	stm	r5, {r0, r4}
    7dac:	e1a00004 	mov	r0, r4
    7db0:	e8bd4038 	pop	{r3, r4, r5, lr}
    7db4:	e12fff1e 	bx	lr
    7db8:	e1a00005 	mov	r0, r5
    7dbc:	eafffffb 	b	7db0 <_gettimeofday+0x28>
    7dc0:	ebfffb1a 	bl	6a30 <__errno>
    7dc4:	e3a03016 	mov	r3, #22
    7dc8:	e5803000 	str	r3, [r0]
    7dcc:	e3e00000 	mvn	r0, #0
    7dd0:	eafffff6 	b	7db0 <_gettimeofday+0x28>

00007dd4 <_sbrk>:
    7dd4:	e92d4008 	push	{r3, lr}
    7dd8:	e59f305c 	ldr	r3, [pc, #92]	; 7e3c <_sbrk+0x68>
    7ddc:	e59f105c 	ldr	r1, [pc, #92]	; 7e40 <_sbrk+0x6c>
    7de0:	e5932000 	ldr	r2, [r3]
    7de4:	e5913000 	ldr	r3, [r1]
    7de8:	e3520000 	cmp	r2, #0
    7dec:	e0830000 	add	r0, r3, r0
    7df0:	0a000002 	beq	7e00 <_sbrk+0x2c>
    7df4:	e0602002 	rsb	r2, r0, r2
    7df8:	e3520000 	cmp	r2, #0
    7dfc:	ba000009 	blt	7e28 <_sbrk+0x54>
    7e00:	e04d2003 	sub	r2, sp, r3
    7e04:	e3520000 	cmp	r2, #0
    7e08:	ba000002 	blt	7e18 <_sbrk+0x44>
    7e0c:	e04d2000 	sub	r2, sp, r0
    7e10:	e35200ff 	cmp	r2, #255	; 0xff
    7e14:	da000003 	ble	7e28 <_sbrk+0x54>
    7e18:	e5810000 	str	r0, [r1]
    7e1c:	e1a00003 	mov	r0, r3
    7e20:	e8bd4008 	pop	{r3, lr}
    7e24:	e12fff1e 	bx	lr
    7e28:	ebfffb00 	bl	6a30 <__errno>
    7e2c:	e3a0300c 	mov	r3, #12
    7e30:	e5803000 	str	r3, [r0]
    7e34:	e3e03000 	mvn	r3, #0
    7e38:	eafffff7 	b	7e1c <_sbrk+0x48>
    7e3c:	00053af8 	.word	0x00053af8
    7e40:	00053afc 	.word	0x00053afc

00007e44 <__cs3_isr_interrupt>:
    7e44:	eafffffe 	b	7e44 <__cs3_isr_interrupt>

00007e48 <__libc_init_array>:
    7e48:	e92d4070 	push	{r4, r5, r6, lr}
    7e4c:	e59f506c 	ldr	r5, [pc, #108]	; 7ec0 <__libc_init_array+0x78>
    7e50:	e59f606c 	ldr	r6, [pc, #108]	; 7ec4 <__libc_init_array+0x7c>
    7e54:	e0656006 	rsb	r6, r5, r6
    7e58:	e1b06146 	asrs	r6, r6, #2
    7e5c:	12455004 	subne	r5, r5, #4
    7e60:	13a04000 	movne	r4, #0
    7e64:	0a000005 	beq	7e80 <__libc_init_array+0x38>
    7e68:	e5b53004 	ldr	r3, [r5, #4]!
    7e6c:	e2844001 	add	r4, r4, #1
    7e70:	e1a0e00f 	mov	lr, pc
    7e74:	e12fff13 	bx	r3
    7e78:	e1560004 	cmp	r6, r4
    7e7c:	1afffff9 	bne	7e68 <__libc_init_array+0x20>
    7e80:	e59f5040 	ldr	r5, [pc, #64]	; 7ec8 <__libc_init_array+0x80>
    7e84:	e59f6040 	ldr	r6, [pc, #64]	; 7ecc <__libc_init_array+0x84>
    7e88:	e0656006 	rsb	r6, r5, r6
    7e8c:	eb0000e5 	bl	8228 <_init>
    7e90:	e1b06146 	asrs	r6, r6, #2
    7e94:	12455004 	subne	r5, r5, #4
    7e98:	13a04000 	movne	r4, #0
    7e9c:	0a000005 	beq	7eb8 <__libc_init_array+0x70>
    7ea0:	e5b53004 	ldr	r3, [r5, #4]!
    7ea4:	e2844001 	add	r4, r4, #1
    7ea8:	e1a0e00f 	mov	lr, pc
    7eac:	e12fff13 	bx	r3
    7eb0:	e1560004 	cmp	r6, r4
    7eb4:	1afffff9 	bne	7ea0 <__libc_init_array+0x58>
    7eb8:	e8bd4070 	pop	{r4, r5, r6, lr}
    7ebc:	e12fff1e 	bx	lr
    7ec0:	00008240 	.word	0x00008240
    7ec4:	00008240 	.word	0x00008240
    7ec8:	00008240 	.word	0x00008240
    7ecc:	00008248 	.word	0x00008248

Disassembly of section .rodata:

00007ed8 <rotation_speeds_size-0x160>:
    7ed8:	706e493e 	.word	0x706e493e
    7edc:	54207475 	.word	0x54207475
    7ee0:	00657079 	.word	0x00657079
    7ee4:	00000000 	.word	0x00000000
    7ee8:	75706e49 	.word	0x75706e49
    7eec:	79542074 	.word	0x79542074
    7ef0:	00006570 	.word	0x00006570
    7ef4:	6279654b 	.word	0x6279654b
    7ef8:	6472616f 	.word	0x6472616f
    7efc:	00000000 	.word	0x00000000
    7f00:	7379654b 	.word	0x7379654b
    7f04:	00000000 	.word	0x00000000
    7f08:	6e6f433e 	.word	0x6e6f433e
    7f0c:	6c6f7274 	.word	0x6c6f7274
    7f10:	70795420 	.word	0x70795420
    7f14:	00000065 	.word	0x00000065
    7f18:	746e6f43 	.word	0x746e6f43
    7f1c:	206c6f72 	.word	0x206c6f72
    7f20:	65707954 	.word	0x65707954
    7f24:	00000000 	.word	0x00000000
    7f28:	746e6f43 	.word	0x746e6f43
    7f2c:	6f756e69 	.word	0x6f756e69
    7f30:	00007375 	.word	0x00007375
    7f34:	63736944 	.word	0x63736944
    7f38:	65746572 	.word	0x65746572
    7f3c:	00000000 	.word	0x00000000
    7f40:	6d69543e 	.word	0x6d69543e
    7f44:	54207265 	.word	0x54207265
    7f48:	00657079 	.word	0x00657079
    7f4c:	00000000 	.word	0x00000000
    7f50:	656d6954 	.word	0x656d6954
    7f54:	79542072 	.word	0x79542072
    7f58:	00006570 	.word	0x00006570
    7f5c:	6c6c694d 	.word	0x6c6c694d
    7f60:	63657369 	.word	0x63657369
    7f64:	73646e6f 	.word	0x73646e6f
    7f68:	00000000 	.word	0x00000000
    7f6c:	6f636553 	.word	0x6f636553
    7f70:	0073646e 	.word	0x0073646e
    7f74:	00000000 	.word	0x00000000
    7f78:	6669443e 	.word	0x6669443e
    7f7c:	75636966 	.word	0x75636966
    7f80:	0079746c 	.word	0x0079746c
    7f84:	00000000 	.word	0x00000000
    7f88:	66666944 	.word	0x66666944
    7f8c:	6c756369 	.word	0x6c756369
    7f90:	00007974 	.word	0x00007974
    7f94:	79736145 	.word	0x79736145
    7f98:	00000000 	.word	0x00000000
    7f9c:	75626544 	.word	0x75626544
    7fa0:	00000067 	.word	0x00000067
    7fa4:	64726148 	.word	0x64726148
    7fa8:	00000000 	.word	0x00000000
    7fac:	6d726f4e 	.word	0x6d726f4e
    7fb0:	00006c61 	.word	0x00006c61
    7fb4:	00006f4e 	.word	0x00006f4e
    7fb8:	5b575328 	.word	0x5b575328
    7fbc:	00295d31 	.word	0x00295d31
    7fc0:	00000000 	.word	0x00000000
    7fc4:	00736559 	.word	0x00736559
    7fc8:	00000000 	.word	0x00000000
    7fcc:	5b575328 	.word	0x5b575328
    7fd0:	00295d35 	.word	0x00295d35
    7fd4:	00000000 	.word	0x00000000
    7fd8:	44202a2a 	.word	0x44202a2a
    7fdc:	69666669 	.word	0x69666669
    7fe0:	746c7563 	.word	0x746c7563
    7fe4:	65532079 	.word	0x65532079
    7fe8:	704f2074 	.word	0x704f2074
    7fec:	6e6f6974 	.word	0x6e6f6974
    7ff0:	2a2a2073 	.word	0x2a2a2073
    7ff4:	00000000 	.word	0x00000000
    7ff8:	65726353 	.word	0x65726353
    7ffc:	52206e65 	.word	0x52206e65
    8000:	7461746f 	.word	0x7461746f
    8004:	006e6f69 	.word	0x006e6f69
    8008:	00000000 	.word	0x00000000
    800c:	61786548 	.word	0x61786548
    8010:	206e6f67 	.word	0x206e6f67
    8014:	61746f52 	.word	0x61746f52
    8018:	6e6f6974 	.word	0x6e6f6974
    801c:	00000000 	.word	0x00000000
    8020:	5b575328 	.word	0x5b575328
    8024:	00295d36 	.word	0x00295d36
    8028:	5b575328 	.word	0x5b575328
    802c:	00295d33 	.word	0x00295d33
    8030:	5b575328 	.word	0x5b575328
    8034:	00295d34 	.word	0x00295d34

00008038 <rotation_speeds_size>:
    8038:	0000000c 31676f6c 00000030 00000000     ....log10.......

00008048 <npio2_hw>:
    8048:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
    8058:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
    8068:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
    8078:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
    8088:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
    8098:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
    80a8:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
    80b8:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

000080c8 <two_over_pi>:
    80c8:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
    80d8:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
    80e8:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
    80f8:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
    8108:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
    8118:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
    8128:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
    8138:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
    8148:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
    8158:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
    8168:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
    8178:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
    8188:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
    8198:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
    81a8:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
    81b8:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
    81c8:	0060e27b 00c08c6b                       {.`.k...

000081d0 <init_jk>:
    81d0:	00000002 00000003 00000004 00000006     ................

000081e0 <PIo2>:
    81e0:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
    81f0:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
    8200:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
    8210:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

00008220 <_global_impure_ptr>:
    8220:	000532c0 00000043                       .2..C...

00008228 <_init>:
    8228:	e1a0c00d 	mov	r12, sp
    822c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    8230:	e24cb004 	sub	r11, r12, #4
    8234:	e24bd028 	sub	sp, r11, #40	; 0x28
    8238:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    823c:	e12fff1e 	bx	lr

00008240 <__init_array_start>:
    8240:	00007014 	.word	0x00007014

00008244 <__frame_dummy_init_array_entry>:
    8244:	00000208                                ....

00008248 <__libc_fini>:
    8248:	e1a0c00d 	mov	r12, sp
    824c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    8250:	e24cb004 	sub	r11, r12, #4
    8254:	e24bd028 	sub	sp, r11, #40	; 0x28
    8258:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    825c:	e12fff1e 	bx	lr

00008260 <__fini_array_start>:
    8260:	000001c4 	.word	0x000001c4

00008264 <__cs3_regions>:
    8264:	00000000 	.word	0x00000000
    8268:	00000040 	.word	0x00000040
    826c:	00000040 	.word	0x00000040
    8270:	00053ac0 	.word	0x00053ac0
    8274:	000003c0 	.word	0x000003c0
